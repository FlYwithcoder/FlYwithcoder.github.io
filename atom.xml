<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2023-10-05T15:30:44.000Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="http://example.com/2023/10/07/%E8%B0%83%E7%94%A8%E7%BA%A6%E5%AE%9A/"/>
    <id>http://example.com/2023/10/07/%E8%B0%83%E7%94%A8%E7%BA%A6%E5%AE%9A/</id>
    <published>2023-10-07T05:52:02.118Z</published>
    <updated>2023-10-05T15:30:44.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="常见的几种调用约定："><a href="#常见的几种调用约定：" class="headerlink" title="常见的几种调用约定："></a>常见的几种调用约定：</h1><table><thead><tr><th>调用约定</th><th>参数压栈顺序</th><th>平衡堆栈</th></tr></thead><tbody><tr><td>__cdecl</td><td>从右至左入栈</td><td>调用者清理栈</td></tr><tr><td>__stdcall</td><td>从右至左入栈</td><td>自身清理堆栈</td></tr><tr><td>__fastcall</td><td>ECX&#x2F;EDX传送前两个，剩下:从右至左入栈</td><td>自身清理堆栈</td></tr></tbody></table><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-number">1</span>、<span class="hljs-type">int</span> __cdecl <span class="hljs-title function_">Plus</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span><span class="hljs-comment">//外平栈</span><br>&#123;<br><span class="hljs-keyword">return</span> a+b;<br>&#125;<br><br>push        <span class="hljs-number">2</span><br>push        <span class="hljs-number">1</span><br>call        @ILT+<span class="hljs-number">15</span>(Plus) (<span class="hljs-number">00401014</span>)<br>add         esp,<span class="hljs-number">8</span><br>    <br><span class="hljs-number">2</span>、<span class="hljs-type">int</span> __stdcall <span class="hljs-title function_">Plus</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span><span class="hljs-comment">//内平栈</span><br>&#123;<br><span class="hljs-keyword">return</span> a+b;<br>&#125;<br><br>push        <span class="hljs-number">2</span><br>push        <span class="hljs-number">1</span><br>call        @ILT+<span class="hljs-number">10</span>(Plus) (<span class="hljs-number">0040100f</span>)<br><br>函数内部：<br><br>ret         <span class="hljs-number">8</span><br><br><span class="hljs-number">3</span>、<span class="hljs-type">int</span> __fastcall <span class="hljs-title function_">Plus</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span><br>&#123;<br><span class="hljs-keyword">return</span> a+b;<br>&#125;<br><br>mov         edx,<span class="hljs-number">2</span><br>mov         ecx,<span class="hljs-number">1</span><br>call        @ILT+<span class="hljs-number">0</span>(Plus) (<span class="hljs-number">00401005</span>)<br><br>函数内部：<br><br>ret         <br><br>    <span class="hljs-number">4</span>、<span class="hljs-type">int</span> __fastcall <span class="hljs-title function_">Plus4</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b,<span class="hljs-type">int</span> c,<span class="hljs-type">int</span> d)</span><br>&#123;<br><span class="hljs-keyword">return</span> a+b+c+d;<br>&#125;<br><br>push        <span class="hljs-number">4</span><br>push        <span class="hljs-number">3</span><br>mov         edx,<span class="hljs-number">2</span><br>mov         ecx,<span class="hljs-number">1</span><br>call        @ILT+<span class="hljs-number">5</span>(Plus) (<span class="hljs-number">0040100</span>a)<br><br>函数内部：<br><br>ret         <span class="hljs-number">8</span><span class="hljs-comment">//内平</span><br><br></code></pre></td></tr></table></figure><p>58：55</p><p>1-26</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;常见的几种调用约定：&quot;&gt;&lt;a href=&quot;#常见的几种调用约定：&quot; class=&quot;headerlink&quot; title=&quot;常见的几种调用约定：&quot;&gt;&lt;/a&gt;常见的几种调用约定：&lt;/h1&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;调用约定&lt;/th&gt;
&lt;th&gt;参数</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://example.com/2023/10/07/%E5%A4%B4%E6%96%87%E4%BB%B6/"/>
    <id>http://example.com/2023/10/07/%E5%A4%B4%E6%96%87%E4%BB%B6/</id>
    <published>2023-10-07T05:52:02.102Z</published>
    <updated>2023-10-06T14:32:36.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="重复包含问题"><a href="#重复包含问题" class="headerlink" title="重复包含问题"></a>重复包含问题</h1><p>x.h</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">include</span> z.h</span><br></code></pre></td></tr></table></figure><p>y.h</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> z.h</span><br></code></pre></td></tr></table></figure><p>z.h</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Student</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-type">int</span> level;<br>&#125;<br></code></pre></td></tr></table></figure><p>如果此时有个文件同时包含了x.h和y.h会出问题</p><p>如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&quot;stdafx.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&quot;X.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&quot;Y.h&quot;</span></span><br></code></pre></td></tr></table></figure><h2 id="解决方案："><a href="#解决方案：" class="headerlink" title="解决方案："></a>解决方案：</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">if</span> !defined(ZZZ)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ZZZ</span><br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Student</span><br>&#123;<br><span class="hljs-type">int</span> level;<br>&#125;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br></code></pre></td></tr></table></figure><p>这句话的意思可以这样去理解，如果ZZZ已经存在了，就不再声明，ZZZ相当于一个编号，越复杂越好，唯一的。</p><p>详细见：</p><p>[<a href="https://blog.csdn.net/a15608445683/article/details/122960570]">https://blog.csdn.net/a15608445683/article/details/122960570]</a>: </p><h2 id="关于头文件-与“-”"><a href="#关于头文件-与“-”" class="headerlink" title="关于头文件&lt; &gt;与“ ”"></a><strong>关于头文件&lt; &gt;与“ ”</strong></h2><p>自己写的头文件用” “ ; 如“PE.h”</p><p>系统类用 &lt; &gt; ; 如&lt;stdio.h&gt;</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;重复包含问题&quot;&gt;&lt;a href=&quot;#重复包含问题&quot; class=&quot;headerlink&quot; title=&quot;重复包含问题&quot;&gt;&lt;/a&gt;重复包含问题&lt;/h1&gt;&lt;p&gt;x.h&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://example.com/2023/10/07/%E6%8C%87%E9%92%88/"/>
    <id>http://example.com/2023/10/07/%E6%8C%87%E9%92%88/</id>
    <published>2023-10-07T05:52:02.102Z</published>
    <updated>2023-10-06T14:35:24.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h2><p>1、”带*类型“ 的特征探测：宽度</p><p>2、”带*类型“ 的特征探测：声明</p><p>3、”带*类型“ 的特征探测：赋值</p><p>4、”带*类型“ 的特征探测：++、–</p><p>5、”带*类型“ 的特征探测：加上&#x2F;减去 一个整数</p><p>6、”带*类型“ 的特征探测：求差值</p><p>7、”带*类型“ 的特征探测：比较</p><p><strong>笔记</strong></p><p>1、带有*的变量类型的标准写法：变量类型 *  变量名；</p><p>​如int*  a</p><p>2、任何类型都可以带*，加上 *以后是新的类型；</p><p>3、*可以是任意多个。</p><p>4、带*类型的变量赋值时只能使用”完整写法”；</p><p>5、带*类型的变量宽度永远是4字节(本机尺寸)，无论类型是什么，无论有几个 *；</p><p>6、带*类型的变量可以加、减去一个整数，但不能乘或者除；</p><p>7、带*类型变量与其他整数相加或者相减时；</p><p>​带<em>类型变量 + N &#x3D; 带</em>类型变量 + N*(去掉一个 * 后类型的宽度)</p><p>​带<em>类型变量  - N &#x3D; 带</em>类型变量 - N*(去掉一个 * 后类型的宽度)</p><p>8、两个类型相同的带*类型的变量可以进行减法操作；</p><p>9、相减的结果要除以去掉一个*的数据的宽度；</p><p>10、带*的变量，如果类型相同，可以进行大小比较；</p><p>注：关于本机尺寸：32位机器的本机尺寸位4B; 64位机器的本机尺寸为8B;</p><h3 id="赋值"><a href="#赋值" class="headerlink" title="赋值"></a>赋值</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">char</span>* a;<br><span class="hljs-type">short</span>* b;<br><span class="hljs-type">int</span>* c;<br><br>a = (<span class="hljs-type">char</span>*)<span class="hljs-number">1</span>;<br>b = (<span class="hljs-type">short</span>*)<span class="hljs-number">2</span>;<br>c = (<span class="hljs-type">int</span>*)<span class="hljs-number">3</span>;<br></code></pre></td></tr></table></figure><h3 id="、–"><a href="#、–" class="headerlink" title="++、–"></a>++、–</h3><p><strong>++：结果为原有值加上除去一个*后数据宽度；</strong></p><p><strong>– 类似</strong></p><p>如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">char</span>* a;<br><span class="hljs-type">short</span>* b;<br><span class="hljs-type">int</span>* c;<br><br>a = (<span class="hljs-type">char</span>*)<span class="hljs-number">100</span>;<br>b = (<span class="hljs-type">short</span>*)<span class="hljs-number">100</span>;<br>c = (<span class="hljs-type">int</span>*)<span class="hljs-number">100</span>;<br><br>a++;<br>b++;<br>c++;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d %d&quot;</span>,a,b,c);<br></code></pre></td></tr></table></figure><p>得到结果为：101  102  104</p><p>因为：</p><p>​char* 去掉一个*为char,而char的数据宽度为1字节；</p><p>​short* 去掉一个*为short,而short的数据宽度为1字节；</p><p>​int* 去掉一个*为int,而int的数据宽度为1字节；</p><p>同理：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">char</span>** a;<br><span class="hljs-type">short</span>** b;<br><span class="hljs-type">int</span>** c;<br><br>a = (<span class="hljs-type">char</span>**)<span class="hljs-number">100</span>;<br>b = (<span class="hljs-type">short</span>**)<span class="hljs-number">100</span>;<br>c = (<span class="hljs-type">int</span>**)<span class="hljs-number">100</span>;<br><br>a++;<br>b++;<br>c++;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d %d&quot;</span>,a,b,c);<br></code></pre></td></tr></table></figure><p>的结果应为  104   104   104</p><h3 id="加上-减去一个整数"><a href="#加上-减去一个整数" class="headerlink" title="加上&#x2F;减去一个整数"></a>加上&#x2F;减去一个整数</h3><p><strong>结果为原有值 加上 除去一个*后数据宽度 与 被加整数 的乘积；</strong></p><p><strong>减法类似</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">char</span>* a;<br><span class="hljs-type">short</span>* b;<br><span class="hljs-type">int</span>* c;<br><br>a = (<span class="hljs-type">char</span>*)<span class="hljs-number">100</span>;<br>b = (<span class="hljs-type">short</span>*)<span class="hljs-number">100</span>;<br>c = (<span class="hljs-type">int</span>*)<span class="hljs-number">100</span>;<br><br>a = a + <span class="hljs-number">5</span>;<br>b = b + <span class="hljs-number">5</span>;<br>c = c + <span class="hljs-number">5</span>;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d %d&quot;</span>,a,b,c);<br></code></pre></td></tr></table></figure><p>得到结果为：105  110  120</p><p>因为：</p><p>​char* 去掉一个*为char,而char的数据宽度为1字节，100 + 1 * 5 &#x3D; 105；</p><p>​short* 去掉一个*为short,而short的数据宽度为2字节，100 + 2 * 5 &#x3D; 110；</p><p>​int* 去掉一个*为int,而int的数据宽度为4字节，100 + 4 * 5 &#x3D; 120；</p><p>同理：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">char</span>***** a;<br><span class="hljs-type">short</span>***** b;<br><span class="hljs-type">int</span>***** c;<br><br>a = (<span class="hljs-type">char</span>*****)<span class="hljs-number">100</span>;<br>b = (<span class="hljs-type">short</span>*****)<span class="hljs-number">100</span>;<br>c = (<span class="hljs-type">int</span>*****)<span class="hljs-number">100</span>;<br><br>a = a + <span class="hljs-number">5</span>;<br>b = b + <span class="hljs-number">5</span>;<br>c = c + <span class="hljs-number">5</span>;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d %d&quot;</span>,a,b,c);<br></code></pre></td></tr></table></figure><p>的结果为 120 120 120</p><h3 id="求差值"><a href="#求差值" class="headerlink" title="求差值"></a>求差值</h3><p><strong>两个类型相同的带 * 类型的变量可以进行减法操作；相减的结果要除以 去掉一个*的数据的宽度,结果为int型</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">char</span>* a;<br><span class="hljs-type">char</span>* b;<br><br>a = (<span class="hljs-type">char</span>*)<span class="hljs-number">200</span>;<br>b = (<span class="hljs-type">char</span>*)<span class="hljs-number">100</span>;<br><br><span class="hljs-type">int</span> x = a - b;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,x);<br></code></pre></td></tr></table></figure><p>结果为 ：(200-100)&#x2F;1 &#x3D; 100</p><p>同理：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">short</span>* a;<br><span class="hljs-type">short</span>* b;<br><br>a = (<span class="hljs-type">short</span>*)<span class="hljs-number">200</span>;<br>b = (<span class="hljs-type">short</span>*)<span class="hljs-number">100</span>;<br><br><span class="hljs-type">int</span> x = a - b;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,x);<br></code></pre></td></tr></table></figure><p>的结果为（200-100）&#x2F; 2 &#x3D; 50；</p><h3 id="作比较"><a href="#作比较" class="headerlink" title="作比较"></a>作比较</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">char</span>***** a;<br><span class="hljs-type">char</span>***** b;<br><br><br>a = (<span class="hljs-type">char</span>*****)<span class="hljs-number">200</span>;<br>b = (<span class="hljs-type">char</span>*****)<span class="hljs-number">100</span>;<br><br><span class="hljs-keyword">if</span>(a &gt; b)&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;1&quot;</span>);<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;2&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>结果为：1</p><h4 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs awk">自定义结构体如下：<br>struct Student<br>&#123;<br>    int x;<br>    int y;<br>&#125;; <span class="hljs-regexp">//</span><span class="hljs-number">8</span>B<br><br>第一步：<br>Student**** s;<span class="hljs-regexp">//</span><span class="hljs-number">4</span>B（本机尺寸）<br>s = (Student****)<span class="hljs-number">100</span>;<br>s++; <span class="hljs-regexp">//</span>s的值是多少？<br>s = s+<span class="hljs-number">2</span>; <span class="hljs-regexp">//</span>s的值是多少？<br>s = s-<span class="hljs-number">3</span>; <span class="hljs-regexp">//</span>s的值是多少？<br>解：<br>s++= <span class="hljs-number">100</span> + <span class="hljs-number">4</span> = <span class="hljs-number">104</span><br>s+<span class="hljs-number">2</span>= <span class="hljs-number">100</span> + <span class="hljs-number">2</span>*<span class="hljs-number">4</span> = <span class="hljs-number">108</span><br>s-<span class="hljs-number">3</span>= <span class="hljs-number">100</span> - <span class="hljs-number">3</span>*<span class="hljs-number">4</span> = <span class="hljs-number">88</span><br><br>第二步：<br>Student**** s1;<span class="hljs-regexp">//</span><span class="hljs-number">4</span>B<br>Student**** s2;<span class="hljs-regexp">//</span><span class="hljs-number">4</span>B<br>int x;<span class="hljs-regexp">//</span><span class="hljs-number">4</span>B<br>s1 = (Student****)<span class="hljs-number">200</span>;<br>s2 = (Student****)<span class="hljs-number">100</span>;<br>x = s1-s2; <span class="hljs-regexp">//</span>x的值是多少？<br>解：<br>x = (<span class="hljs-number">200</span>-<span class="hljs-number">100</span>)/<span class="hljs-number">4</span> = <span class="hljs-number">25</span><br><br>第三步：<br>Student* s;<br>s = (Student*)<span class="hljs-number">100</span>;<br>s++; <span class="hljs-regexp">//</span>s的值是多少？<br>s = s+<span class="hljs-number">2</span>; <span class="hljs-regexp">//</span>s的值是多少？<br>s = s-<span class="hljs-number">3</span>; <span class="hljs-regexp">//</span>s的值是多少？<br>解：<br>s++= <span class="hljs-number">100</span> + <span class="hljs-number">8</span> = <span class="hljs-number">108</span><br>s+<span class="hljs-number">2</span>= <span class="hljs-number">100</span> + <span class="hljs-number">2</span>*<span class="hljs-number">8</span> = <span class="hljs-number">116</span><br>s-<span class="hljs-number">3</span>= <span class="hljs-number">100</span> - <span class="hljs-number">3</span>*<span class="hljs-number">8</span> = <span class="hljs-number">76</span><br><br>第四步：<br>Student* s1;<br>Student* s2;<br>int x;<br>s1 = (Student*)<span class="hljs-number">200</span>;<br>s2 = (Student*)<span class="hljs-number">100</span>;<br>x = s1-s2; <span class="hljs-regexp">//</span>x的值是多少？<br>解：<br>x = int ((<span class="hljs-number">200</span>-<span class="hljs-number">100</span>)/<span class="hljs-number">8</span>) = int(<span class="hljs-number">12.5</span>) = <span class="hljs-number">12</span>;<br></code></pre></td></tr></table></figure><h3 id="符号"><a href="#符号" class="headerlink" title="&amp;符号"></a>&amp;符号</h3><p><strong>&amp;是地址符，任何一个变量都可以用&amp;来获取地址，比如&amp;a可以获取到a的地址，其类型为原类型加上</strong>*</p><p>如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">char</span> a;<br><span class="hljs-type">short</span> b;<br><br>则 &amp;a就是a的类型加一颗’*’，即就是<span class="hljs-type">char</span>*；<br>   &amp;b的类型`<span class="hljs-type">short</span>*`<br></code></pre></td></tr></table></figure><p><strong>如果在一个变量前用‘*’，比如</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span>* x   *x == <span class="hljs-type">int</span>;<br></code></pre></td></tr></table></figure><p><strong>得到的结果就是原来类型砍一颗星(与&amp;相反)</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span>* px1 = (<span class="hljs-type">int</span>*)<span class="hljs-number">10</span>;<br><span class="hljs-type">int</span>** px2 = (<span class="hljs-type">int</span>**)<span class="hljs-number">11</span>;<br><span class="hljs-type">int</span>*** px3 = (<span class="hljs-type">int</span>***)<span class="hljs-number">12</span>;<br><span class="hljs-type">int</span>**** px4 = (<span class="hljs-type">int</span>****)<span class="hljs-number">13</span>;<br><br><span class="hljs-comment">//*(px1)是什么类型？</span><br><span class="hljs-type">int</span><br><span class="hljs-comment">//*(px2)是什么类型？</span><br><span class="hljs-type">int</span>*<br><span class="hljs-comment">//*(px3)是什么类型？</span><br><span class="hljs-type">int</span>**<br><span class="hljs-comment">//*(px4)是什么类型？</span><br><span class="hljs-type">int</span>***<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> x = <span class="hljs-number">10</span>;<br><span class="hljs-comment">//movdword ptr [ebp-4],0Ah</span><br><br><span class="hljs-type">int</span>* px = &amp;x;<br>        <span class="hljs-comment">/*  leaeax,[ebp-4]</span><br><span class="hljs-comment">movdword ptr [ebp-8],eax*/</span><br><br><span class="hljs-type">int</span> x1 = *px;<br>        <span class="hljs-comment">/*  movecx,[ebp-8]先将地址为px内的值传给ecx</span><br><span class="hljs-comment">        movedx,dword ptr [ecx]再将地址为ecx 的值传给 edx</span><br><span class="hljs-comment">movdword ptr [ebp-0Ch],edx最后将edx的值传给x1*/</span><br>首先定义的变量 x，并赋值为<span class="hljs-number">10</span>；<br>然后定义 <span class="hljs-type">int</span>* 型变量 px，并把变量x的地址赋值给px;<br>再定义一个 变量 x1，将地址为px内的值赋值给x1；<br></code></pre></td></tr></table></figure><h4 id="作业：-调试相关：在vc-6-0中，F5是调试（运行到第一个断点处）；ctrl-F5是执行；F7是编译；F9是下断点；F10是单步步过；F11是单步步入"><a href="#作业：-调试相关：在vc-6-0中，F5是调试（运行到第一个断点处）；ctrl-F5是执行；F7是编译；F9是下断点；F10是单步步过；F11是单步步入" class="headerlink" title="作业：[调试相关：在vc++6.0中，F5是调试（运行到第一个断点处）；ctrl+F5是执行；F7是编译；F9是下断点；F10是单步步过；F11是单步步入]"></a><strong>作业：</strong>[调试相关：在vc++6.0中，F5是调试（运行到第一个断点处）；ctrl+F5是执行；F7是编译；F9是下断点；F10是单步步过；F11是单步步入]</h4><p>1、<strong>列出每一行的反汇编代码</strong></p><table><thead><tr><th>a</th><th>b</th><th>c</th><th>pa</th><th>pb</th><th>pc</th><th>ppa</th><th>ppb</th><th>ppc</th></tr></thead></table><p>​          ebp-4 ebp-8 ebp-0ch        ebp-10h    ebp-14h  ebp-18h    ebp-1ch             ebp-20h        ebp-24h</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">char</span> a = <span class="hljs-number">10</span>;<span class="hljs-comment">//movbyte ptr [ebp-4],0Ah</span><br><span class="hljs-comment">//[ebp-4]存的是局部变量a</span><br>    <span class="hljs-type">char</span>* pa = &amp;a;<span class="hljs-comment">/*leaeax,[ebp-4]</span><br><span class="hljs-comment">                          movdword ptr [ebp-10h],eax  */</span><br><span class="hljs-comment">//[ebp-10h]存的是局部变量pa</span><br><span class="hljs-type">char</span>** ppa = &amp;pa;<span class="hljs-comment">/*lea   eax,[ebp-10h]</span><br><span class="hljs-comment">  mov   dword ptr [ebp-1Ch],eax */</span><br><span class="hljs-comment">//[ebp-1Ch]存的是局部变量ppa</span><br><br><span class="hljs-type">short</span> b = <span class="hljs-number">20</span>;<span class="hljs-comment">//mov   word ptr [ebp-8],offset test+20h (00401040)</span><br><span class="hljs-type">int</span> c = <span class="hljs-number">30</span>;<span class="hljs-comment">//mov   dword ptr [ebp-0Ch],1Eh</span><br><br><span class="hljs-type">short</span>* pb = &amp;b;<span class="hljs-comment">/*leaecx,[ebp-8]</span><br><span class="hljs-comment">  movdword ptr [ebp-14h],ecx */</span><br><span class="hljs-type">int</span>* pc = &amp;c;<span class="hljs-comment">/*lea   edx,[ebp-0Ch]</span><br><span class="hljs-comment">  mov   dword ptr [ebp-18h],edx */</span><br><br><span class="hljs-type">char</span>** ppa = &amp;pa;<span class="hljs-comment">/*lea   eax,[ebp-10h]</span><br><span class="hljs-comment">  mov   dword ptr [ebp-1Ch],eax */</span><br><span class="hljs-comment">//[ebp-1Ch]存的是局部变量ppa</span><br><br><span class="hljs-type">short</span>** ppb = &amp;pb;<span class="hljs-comment">/*lea   ecx,[ebp-14h]</span><br><span class="hljs-comment">  mov   dword ptr [ebp-20h],ecx */</span><br><span class="hljs-type">int</span>** ppc = &amp;pc;<span class="hljs-comment">/*lea   edx,[ebp-18h]</span><br><span class="hljs-comment">  mov   dword ptr [ebp-24h],edx */</span><br><br></code></pre></td></tr></table></figure><p><strong>2、列出每一行的反汇编代码</strong></p><table><thead><tr><th>p</th><th>p7</th><th>p6</th><th>p5</th><th>p4</th><th>p3</th><th>p2</th><th>p1</th></tr></thead></table><p>​                   ebp-4                  ebp-8               ebp-0ch              ebp-10h         ebp-14h               ebp-18h               ebp-1ch             ebp-20h                                                                                                     </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> p = <span class="hljs-number">10</span>;<span class="hljs-comment">//movdword ptr [ebp-4],0Ah</span><br><span class="hljs-type">int</span>******* p7;<br><span class="hljs-type">int</span>****** p6;<br><span class="hljs-type">int</span>***** p5;<br><span class="hljs-type">int</span>**** p4;<br><span class="hljs-type">int</span>*** p3;<br><span class="hljs-type">int</span>** p2;<br><span class="hljs-type">int</span>* p1;<br><br>p1 = &amp;p;<span class="hljs-comment">/*lea eax,[ebp-4]</span><br><span class="hljs-comment">  mov dword ptr [ebp-20h],eax */</span><br><br>p2 = &amp;p1;<span class="hljs-comment">/*lea eax,[ebp-20h]</span><br><span class="hljs-comment">  mov dword ptr [ebp-1ch],ecx */</span><br><br>p3 = &amp;p2;<span class="hljs-comment">/*lea eax,[ebp-1ch]</span><br><span class="hljs-comment">  mov dword ptr [ebp-18h],edx */</span><br><br>p4 = &amp;p3;<span class="hljs-comment">/*lea eax,[ebp-18h]</span><br><span class="hljs-comment">  mov dword ptr [ebp-14h],eax */</span><br><br>p5 = &amp;p4;<span class="hljs-comment">/*lea eax,[ebp-14h]</span><br><span class="hljs-comment">  mov dword ptr [ebp-10h],ecx */</span><br><br>p6 = &amp;p5;<span class="hljs-comment">/*lea eax,[ebp-10h]</span><br><span class="hljs-comment">  mov dword ptr [ebp-0ch],edx */</span><br><br>p7 = &amp;p6;<span class="hljs-comment">/*lea eax,[ebp-0ch]</span><br><span class="hljs-comment">  mov dword ptr [ebp-8],eax */</span><br><br></code></pre></td></tr></table></figure><h3 id="”带-类型“-的特征探测，求值"><a href="#”带-类型“-的特征探测，求值" class="headerlink" title="”带*类型“ 的特征探测，求值"></a>”带*类型“ 的特征探测，求值</h3><h3 id="指针操作数组"><a href="#指针操作数组" class="headerlink" title="指针操作数组"></a>指针操作数组</h3><p>1、&amp;arr[0]代表取数组中第一个元素的地址，可以省略为数组名</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">char</span> arr[<span class="hljs-number">5</span>] = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>&#125;;<br>    <span class="hljs-comment">//用char* x = &amp;arr[0]; == char* px = arr;</span><br>    <span class="hljs-type">char</span>* px = arr;<span class="hljs-comment">//px存的就是第一个整数的地址</span><br>   <br>    <span class="hljs-comment">//常规打印数组</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">char</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">5</span>;i++)&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,arr[i]);<br>    &#125;<br>    <br>    <span class="hljs-comment">//用指针打印数组</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">char</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">5</span>;i++)&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,*(px+i));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">short</span> arr[<span class="hljs-number">5</span>] = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>&#125;;<br>    <span class="hljs-type">short</span>* px = arr;<br><br>    <span class="hljs-comment">//用指针打印数组</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">char</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">5</span>;i++)&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,*(px+i));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="作业"><a href="#作业" class="headerlink" title="作业"></a>作业</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-number">4</span>、完成代码，实现数组值的互换<br>    <span class="hljs-type">void</span> <span class="hljs-title function_">Function</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">int</span> arr[<span class="hljs-number">5</span>] = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>];<br>    <span class="hljs-comment">//此处添加代码，使用指针，将数组的值倒置</span><br>    <span class="hljs-type">int</span>* px = arr;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">char</span> i = <span class="hljs-number">0</span>;i &lt; <span class="hljs-number">2</span>;i++)&#123;<br>            temp = *(px+i);<br>            *(px+i) = *(px+(<span class="hljs-number">4</span>-i))<br>            *(px+(<span class="hljs-number">4</span>-i)) = temp;<br>        &#125;<br>    <span class="hljs-comment">//打印数组值的代码已经写完，不需要修改</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> k = <span class="hljs-number">0</span>;k &lt; <span class="hljs-number">5</span>;k++)&#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,*(px+k));<br>        &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="模拟CE实现搜索"><a href="#模拟CE实现搜索" class="headerlink" title="模拟CE实现搜索"></a>模拟CE实现搜索</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">1、数组作为参数；</span><br><span class="hljs-comment">2、通过char指针遍历</span><br><span class="hljs-comment">3、通过short指针遍历数据</span><br><span class="hljs-comment">4、通过int指针遍历数据</span><br><span class="hljs-comment">模拟CE实现搜索功能：</span><br><span class="hljs-comment">这一堆数据中存储了角色的血值信息，假设血值的类型为int类型</span><br><span class="hljs-comment">值为100(10进制)，请列出所有可能的值以及该值对应的地址</span><br><span class="hljs-comment">0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x07,0x09,</span><br><span class="hljs-comment">0x00,0x20,0x10,0x03,0x03,0x0C,0xO0,0x41,0x00,0x00,</span><br><span class="hljs-comment">0x00,0x01,0x00,0x00,0x00,0x05,0x00,0x00,0x00,0x0A,</span><br><span class="hljs-comment">0x00,0x00,0x02,0x74,0x64,0x41,0x00,0x06,0x08,0x00,</span><br><span class="hljs-comment">0x00,0x00,0x64,0x00,0x64,0x00,0xOF,0x00,0x00,0xOD,</span><br><span class="hljs-comment">0x00,0x00,0x00,0x23,0x00,0x00,0x0E,0x00,0x00,0x00,</span><br><span class="hljs-comment">0x00,0x00,0x00,0x23,0x00,0x00,0x04,0x00,0x00,0x00,</span><br><span class="hljs-comment">0x00,0x00,0x00,0x23,0x00,0x00,0x04,0x00,0x00,0x00,</span><br><span class="hljs-comment">0x00,0x00,0x00,0x23,0x00,0x00,0x04,0x00,0x00,0x00,</span><br><span class="hljs-comment">0x00,0x00,0x00,0x23,0x00,0x64,0x05,0x00,0x64,0x00,</span><br><span class="hljs-comment">*/</span><br><span class="hljs-type">char</span> data[] =<br>&#123;<br><span class="hljs-number">0x00</span>,<span class="hljs-number">0x64</span>,<span class="hljs-number">0x02</span>,<span class="hljs-number">0x03</span>,<span class="hljs-number">0x64</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x07</span>,<span class="hljs-number">0x64</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x03</span>,<span class="hljs-number">0x03</span>,<span class="hljs-number">0x0C</span>,<br><span class="hljs-number">0x07</span>,<span class="hljs-number">0x41</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x01</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x05</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x0A</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<br><span class="hljs-number">0x02</span>,<span class="hljs-number">0x74</span>,<span class="hljs-number">0x64</span>,<span class="hljs-number">0x41</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x06</span>,<span class="hljs-number">0x08</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x64</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x64</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x05</span>,<span class="hljs-number">0x00</span>,<br><span class="hljs-number">0x00</span>,<span class="hljs-number">0x0D</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x23</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x0E</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x23</span>,<br><span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x04</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x23</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x04</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<br><span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x23</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x04</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x23</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x64</span>,<br><span class="hljs-number">0x05</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x64</span>,<span class="hljs-number">0x00</span>,<br>&#125;;<br><span class="hljs-type">void</span> <span class="hljs-title function_">FindBloodAddr</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">通过char指针遍历</span><br><span class="hljs-comment">printf(&quot;%x\n&quot;, &amp;data[0]);//&amp;data[0]等价于 data</span><br><span class="hljs-comment">char* p = data;</span><br><span class="hljs-comment">for (int i = 0; i &lt; 100; i++) &#123;</span><br><span class="hljs-comment">if (*(p + i) == 0x64) &#123;</span><br><span class="hljs-comment">printf(&quot;%x\n&quot;,p+i);</span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment">*/</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">通过short指针遍历</span><br><span class="hljs-comment">printf(&quot;%x\n&quot;, &amp;data[0]);//&amp;data[0]等价于 data</span><br><span class="hljs-comment">short* p = (short*)data;</span><br><span class="hljs-comment">for (int i = 0; i &lt; 50; i++) &#123;  //printf(&quot;%x\n&quot;,*(p+i));打印出来是两个字节数据</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">if (*(p + i) == 0x64) &#123;//64 00 00 00</span><br><span class="hljs-comment">printf(&quot;%x\n&quot;, p + i);//p+i 等价于 &amp;(*(p + i)) </span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">通过int指针遍历</span><br><span class="hljs-comment">printf(&quot;%x\n&quot;, &amp;data[0]);//&amp;data[0]等价于 data</span><br><span class="hljs-comment">char* p = data;</span><br><span class="hljs-comment">for (int i = 0; i &lt; 97; i++) &#123;</span><br><span class="hljs-comment">if (*(p+i) == 0x64 &amp;&amp; *(p+i+1) == 0x0 &amp;&amp; *(p+i+2) == 0x0 &amp;&amp; *(p+i+3) == 0x0) &#123;</span><br><span class="hljs-comment">printf(&quot;%x\n&quot;, p+i);</span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment">*/</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">思路：通过双指针，模拟CE实现搜索功能</span><br><span class="hljs-comment">pt指针用于遍历，pr指针取当下pt所指位置的int单元，取pr所指的值与0x64进行比较</span><br><span class="hljs-comment">*/</span><br><span class="hljs-type">char</span>* pt;<br><span class="hljs-type">int</span>* pr;<br><span class="hljs-type">int</span> n = <span class="hljs-keyword">sizeof</span>(data);<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n - <span class="hljs-number">4</span>; i++) &#123;<br>pt = (data + i);<br>pr = (<span class="hljs-type">int</span>*)pt;<br><span class="hljs-keyword">if</span> (*pr == <span class="hljs-number">0x64</span>) &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[%x ]=%d\n&quot;</span>, pr, *pr);<br>&#125;<br>&#125;<br><br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>FindBloodAddr();<br>&#125;<br><span class="hljs-comment">//参考：https://www.cnblogs.com/ybit/p/15217003.html#%E6%96%B9%E6%A1%88%E4%BA%8C</span><br></code></pre></td></tr></table></figure><h2 id="字符串指针"><a href="#字符串指针" class="headerlink" title="字符串指针"></a>字符串指针</h2><p><strong>exe的内存分布：</strong></p><p><img src="https://img-blog.csdnimg.cn/20210308211916792.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2NDQxNDI3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">char</span>* x = <span class="hljs-string">&#x27;china&#x27;</span>;<br><span class="hljs-type">char</span> y[] = <span class="hljs-string">&#x27;china&#x27;</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span><br>&#123;<br>    *(x+<span class="hljs-number">1</span>)=<span class="hljs-string">&#x27;A&#x27;</span>;  <br>    y[<span class="hljs-number">1</span>] = <span class="hljs-string">&#x27;A&#x27;</span>;<br>&#125;<br>第一种使用字符串指针，x指向的是字符串的首地址；<br>第二种使用数组；<br>在test()中，修改字符串内容，发现第一种不可行，会报错内存非法读写。第二种可以：<br>    原因：<br>    第一种定义的是全局变量，可读不可写；<br>    第二种使用数组方式，首先会将字符串copy一下，因此可以修改<br></code></pre></td></tr></table></figure><h2 id="复制语句作为判断语句"><a href="#复制语句作为判断语句" class="headerlink" title="复制语句作为判断语句"></a>复制语句作为判断语句</h2><p>赋值语句作为判断条件是什么意思呢？它并<strong>不是</strong>以是否赋值成功作为<code>true</code>和<code>false</code>的判断机制，而是看<strong>赋值的值是多少</strong>，如果为<code>0</code>自动就作为<code>false</code>了</p><p>如：while ((*dest++) &#x3D; (*src++));</p><p>当src指向结束符，跳出循环；</p><h2 id="搜索字符串"><a href="#搜索字符串" class="headerlink" title="搜索字符串"></a>搜索字符串</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-comment">/*</span><br><span class="hljs-comment">1、int strlen(char* s)</span><br><span class="hljs-comment">返回值是字符串s的长度，不包括结束符‘/0’。</span><br><span class="hljs-comment">2、char* strcpy(char* dest,char* src);</span><br><span class="hljs-comment">复制字符串src到dest中，返回指针为dest的值。</span><br><span class="hljs-comment">3、char* strcat(char* dest,char* src);</span><br><span class="hljs-comment">将字符串src添加到dest尾部，返回指针为dest的值。</span><br><span class="hljs-comment">4、int strcmp(char* s1,char* s2);</span><br><span class="hljs-comment">一样的返回0，不一样返回1；</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">strlen</span><span class="hljs-params">(<span class="hljs-type">char</span>* s)</span> &#123;<span class="hljs-comment">//返回值是字符串s的长度，不包括结束符‘/0’。</span><br><span class="hljs-type">int</span> ret = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span> (*s != <span class="hljs-string">&#x27;\0&#x27;</span>) &#123;<br>ret++;<br>s++;<br>&#125;<br><span class="hljs-keyword">return</span> ret;<br>&#125;<br><br><span class="hljs-type">char</span>* <span class="hljs-title function_">strcpy</span><span class="hljs-params">(<span class="hljs-type">char</span>* dest, <span class="hljs-type">char</span>* src)</span> &#123;<span class="hljs-comment">//复制字符串src到dest中，返回指针为dest的值。</span><br><span class="hljs-type">char</span>* ret = dest;<br><span class="hljs-keyword">while</span> (*src != <span class="hljs-string">&#x27;\0&#x27;</span>) &#123;<br>*dest++ = *src++;<br>&#125;<br><span class="hljs-keyword">return</span> ret;<br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">最简写法：</span><br><span class="hljs-comment">char* strcpy(char* dest, char* src) &#123;</span><br><span class="hljs-comment">char* ret = dest;</span><br><span class="hljs-comment">while ((*dest++) = (*src++));</span><br><span class="hljs-comment">return ret;</span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-type">char</span>* <span class="hljs-title function_">strcat</span><span class="hljs-params">(<span class="hljs-type">char</span>* dest, <span class="hljs-type">char</span>* src)</span> &#123;<span class="hljs-comment">//将字符串src添加到dest尾部，返回指针为dest的值。</span><br><span class="hljs-comment">//思路:先找到字符串dest尾部；然后再拼接</span><br><span class="hljs-type">char</span>* ret = dest;<br><span class="hljs-keyword">while</span> (*dest != <span class="hljs-string">&#x27;\0&#x27;</span>) &#123;<span class="hljs-comment">//找到目的字符串尾部</span><br>dest++;<br>&#125;<br><span class="hljs-comment">//注：不能写成while(*dest++ != &#x27;0\&#x27;),这种写法当指向结束符时指针会向后移动，因此不会覆盖结束符</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">while (*src != &#x27;\0&#x27;) &#123;</span><br><span class="hljs-comment">*dest = *src;</span><br><span class="hljs-comment">dest++;</span><br><span class="hljs-comment">src++;</span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">while</span> ((*dest++) = (*src++));<br><span class="hljs-keyword">return</span> ret;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">strcmp</span><span class="hljs-params">(<span class="hljs-type">char</span>* s1, <span class="hljs-type">char</span>* s2)</span> &#123; <span class="hljs-comment">//一样的返回0，不一样返回1；</span><br><span class="hljs-keyword">while</span> (*s1++ == *s2++) &#123;<br><span class="hljs-keyword">if</span> (*s1 == <span class="hljs-string">&#x27;\0&#x27;</span> &amp;&amp; *s2 == <span class="hljs-string">&#x27;\0&#x27;</span>) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">char</span> arr1[] = <span class="hljs-string">&quot;china&quot;</span>;<br><span class="hljs-type">char</span> arr2[] = <span class="hljs-string">&quot;chinab&quot;</span>;<br><span class="hljs-comment">//strlen(arr);</span><br><span class="hljs-comment">//strcpy(arr1,arr2);</span><br><span class="hljs-comment">//printf(&quot;%s\n&quot;, strcpy(arr1, arr2));</span><br><span class="hljs-comment">//strcat(arr1, arr2);</span><br><span class="hljs-comment">//printf(&quot;%s&quot;,strcat(arr1, arr2));</span><br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">strcmp</span>(arr1, arr2)) &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;True&quot;</span>);<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;False&quot;</span>);<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="查找字符串"><a href="#查找字符串" class="headerlink" title="查找字符串"></a>查找字符串</h3><p>模拟实现CE的数据搜索功能：</p><p>这一堆数据中存储了角色的名字信息(WOW)，请列出角色名的内存地址.</p><p>0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x07,0x09,</p><p>0x00,0x20,0x10,0x03,0x03,0x0C,0x00,0x00,0x44,0x00,</p><p>0x00,0x33,0x00,0x47,0x0C,0x0E,0x00,0x0D,0x00,0x11,</p><p>0x00,0x00,0x00,0x02,0x64,0x00,0x00,0x00,0xAA,0x00,</p><p>0x00,0x00,0x64,0x10,0x00,0x00,0x00,0x00,0x00,0x00,</p><p>0x00,0x00,0x02,0x00,0x74,0x0F,0x41,0x00,0x00,0x00,</p><p>0x01,0x00,0x00,0x00,0x05,0x00,0x00,0x00,0x0A,0x00,</p><p>0x00,0x02,0x57,0x4F,0x57,0x00,0x06,0x08,0x00,0x00,</p><p>0x00,0x00,0x00,0x64,0x00,0x0F,0x00,0x00,0x0D,0x00,</p><p>0x00,0x00,0x23,0x00,0x00,0x64,0x00,0x00,0x64,0x00</p><h2 id="指针数组"><a href="#指针数组" class="headerlink" title="指针数组"></a>指针数组</h2><p>1、创建一个int* arr[5] 数组，并为数组赋值(使用&amp;).</p><p>2、创建一个字符指针数组，存储所有的C的关键词(查资料找)，并全部打印出来.</p><p>3、查找这些数据中，有几个id&#x3D;1 level&#x3D;8的结构体信息。</p><p>0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x07,0x09,0x00,0x20,0x10,0x03,0x03,0x0C,</p><p>0x00,0x00,0x44,0x00,0x00,0x33,0x01,0x00,0x00,0x08,0x00,0x00,0x00,0x00,0x00,0x00,</p><p>0x00,0x02,0x64,0x00,0x00,0x00,0xAA,0x00,0x00,0x00,0x64,<strong>0x01,0x00,0x00,0x00,0x08,</strong></p><p><strong>0x00,0x00,</strong> <strong>0x00</strong>,0x00,0x02,0x00,0x74,0x0F,0x41,0x00,0x00,0x00, 0x01,0x00,0x00,0x00,</p><p>0x05,0x00,0x00,0x00,0x0A,0x00,0x00,0x02,0x57,0x4F,0x57,0x00,0x06,0x08,0x00,0x00,  </p><p>0x00,0x00,0x00,0x64,0x00,0x0F,0x00,0x00,0x0D,0x00, 0x00,0x00,0x23,0x00,0x00,0x64,</p><p>0x00,0x00,0x64,0x00  </p><p>结构体定义如下：</p><p>typedef struct TagPlayer </p><p>{ </p><p>​int id;</p><p>​int level;</p><p>}Player;</p><h2 id="结构体指针"><a href="#结构体指针" class="headerlink" title="结构体指针"></a>结构体指针</h2><p><img src="/2023/10/07/%E6%8C%87%E9%92%88/Users/HF\AppData\Roaming\Typora\typora-user-images\image-20230911213230999.png" alt="image-20230911213230999"></p><p><a href="https://blog.csdn.net/qq_46441427/article/details/114444224">https://blog.csdn.net/qq_46441427/article/details/114444224</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;指针&quot;&gt;&lt;a href=&quot;#指针&quot; class=&quot;headerlink&quot; title=&quot;指针&quot;&gt;&lt;/a&gt;指针&lt;/h2&gt;&lt;p&gt;1、”带*类型“ 的特征探测：宽度&lt;/p&gt;
&lt;p&gt;2、”带*类型“ 的特征探测：声明&lt;/p&gt;
&lt;p&gt;3、”带*类型“ 的特征探测：赋值&lt;/p</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://example.com/2023/10/07/%E8%A3%B8%E5%87%BD%E6%95%B0&amp;%E5%86%85%E8%81%94%E6%B1%87%E7%BC%96/"/>
    <id>http://example.com/2023/10/07/%E8%A3%B8%E5%87%BD%E6%95%B0&amp;%E5%86%85%E8%81%94%E6%B1%87%E7%BC%96/</id>
    <published>2023-10-07T05:52:02.102Z</published>
    <updated>2023-10-06T13:05:04.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="裸函数-没人管你"><a href="#裸函数-没人管你" class="headerlink" title="裸函数(没人管你)"></a>裸函数(没人管你)</h1><p>普通函数会自动生成实现堆栈提升、堆栈的缓存区建立、堆栈平衡和函数返回的汇编代码，裸函数不会自动生成任何代码，全部要自己手动写汇编代码。</p><p>裸函数定义：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c">_ _declspec(naked) Function()&#123;&#125;<br><span class="hljs-comment">//加汇编代码 ret 可以正确返回，否则报错</span><br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-number">1</span>、无参数无返回值的函数框架<br><span class="hljs-type">void</span> __declspec(naked) Function()  <br>&#123;<br>__asm<br>&#123;<br>push ebp<br>mov ebp,esp<br>sub esp,<span class="hljs-number">0x40</span><br>push ebx<br>push esi<br>push edi<br>lea edi,dword ptr ds:[ebp<span class="hljs-number">-0x40</span>]<br>mov eax,<span class="hljs-number">0xCCCCCCCC</span><br>mov ecx,<span class="hljs-number">0x10</span><br>rep stosd<br><br>pop edi<br>pop esi<br>pop ebx<br>mov esp,ebp<br>pop ebp<br><br>ret<br>&#125;<br>&#125;<br><br><span class="hljs-number">2</span>、有参数有返回值的函数框架<br><span class="hljs-type">int</span> __declspec(naked) Function(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> y)  <br>&#123;<br>__asm<br>&#123;<br>push ebp<br>mov ebp,esp<br>sub esp,<span class="hljs-number">0x40</span><br>push ebx<br>push esi<br>push edi<br>lea edi,dword ptr ds:[ebp<span class="hljs-number">-0x40</span>]<br>mov eax,<span class="hljs-number">0xCCCCCCCC</span><br>mov ecx,<span class="hljs-number">0x10</span><br>rep stosd<br><br>mov eax,dword ptr ds:[ebp+<span class="hljs-number">8</span>]<br>add eax,dword ptr ds:[ebp+<span class="hljs-number">0xC</span>]<br><br>pop edi<br>pop esi<br>pop ebx<br>mov esp,ebp<br>pop ebp<br><br>ret<br>&#125;<br>&#125;<br><br><span class="hljs-number">3</span>、带局部变量的函数框架<br><span class="hljs-type">int</span> __declspec(naked) Function(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> y)  <br>&#123;<br>__asm<br>&#123;<br>push ebp<br>mov ebp,esp<br>sub esp,<span class="hljs-number">0x40</span><br>push ebx<br>push esi<br>push edi<br>lea edi,dword ptr ds:[ebp<span class="hljs-number">-0x40</span>]<br>mov eax,<span class="hljs-number">0xCCCCCCCC</span><br>mov ecx,<span class="hljs-number">0x10</span><br>rep stosd<br>mov dword ptr ds:[ebp<span class="hljs-number">-4</span>],<span class="hljs-number">2</span><br>mov dword ptr ds:[ebp<span class="hljs-number">-8</span>],<span class="hljs-number">3</span><br><br>mov eax,dword ptr ds:[ebp+<span class="hljs-number">8</span>]<br>add eax,dword ptr ds:[ebp+<span class="hljs-number">0xC</span>]<br><br>pop edi<br>pop esi<br>pop ebx<br>mov esp,ebp<br>pop ebp<br><br>ret<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="内联汇编"><a href="#内联汇编" class="headerlink" title="内联汇编"></a>内联汇编</h1><p>在裸函数中加上_ _asm{}</p><p>{}之间可以写汇编代码</p><p>以下使用裸函数加内联汇编实现简单的C语言加法</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdafx.h&quot;</span></span><br><br><span class="hljs-type">void</span> _ _declspec(naked) Plus(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> y) <br>&#123;<br>_ _asm<br>&#123;<br><span class="hljs-comment">//保留调用前的栈底</span><br>push ebp<br><span class="hljs-comment">//提升堆栈</span><br>mov ebp,esp<br>sub esp,<span class="hljs-number">0x40</span><br><span class="hljs-comment">//保留现场</span><br>push ebx<br>push esi<br>push edi<br><span class="hljs-comment">//开始填充缓冲区</span><br>mov eax,<span class="hljs-number">0xcccccccc</span>;<br>mov ecx,<span class="hljs-number">0x10</span>   <span class="hljs-comment">//0x40/4 = 0x10</span><br>lea edi,dword ptr ds:[ebp<span class="hljs-number">-0x40</span>]<br>rep stosd<br><span class="hljs-comment">//函数的核心功能</span><br>mov eax,dword ptr ds:[ebp+<span class="hljs-number">0x8</span>]<br>add eax,dword ptr ds:[ebp+<span class="hljs-number">0xc</span>]<br><span class="hljs-comment">//恢复现场</span><br>pop edi<br>pop esi<br>pop ebx<br><span class="hljs-comment">//降低堆栈</span><br>mov esp,ebp<br>pop ebp<br>ret<br>&#125;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>* argv[])</span><br>&#123;<br>Plus(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>使用内联汇编来实现以下函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">plus</span><span class="hljs-params">(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> y,<span class="hljs-type">int</span> z)</span><br>&#123;<br><span class="hljs-type">int</span> a = <span class="hljs-number">2</span>;<br><span class="hljs-type">int</span> b = <span class="hljs-number">3</span>;<br><span class="hljs-type">int</span> c = <span class="hljs-number">4</span>;<br><span class="hljs-keyword">return</span> x+y+z+a+b+c;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdafx.h&quot;</span></span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">必须包含这头文件否则报错atal error C1010: unexpected end of file while looking for precompiled header directive</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-type">void</span> __declspec(naked) Plus(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> y,<span class="hljs-type">int</span> z)  <br>&#123;<br>__asm<br>&#123;<br>push ebp<br>mov ebp,esp<br>sub esp,<span class="hljs-number">0x40</span><br>                <br>push ebx<br>push esi<br>push edi<br>                <br>lea edi,dword ptr ds:[ebp<span class="hljs-number">-0x40</span>]<br>mov eax,<span class="hljs-number">0xCCCCCCCC</span><br>mov ecx,<span class="hljs-number">0x10</span><br>rep stosd<br>             <br>            <span class="hljs-comment">//int a = 2;</span><br>mov dword ptr ds:[ebp<span class="hljs-number">-4</span>],<span class="hljs-number">2</span><br>            <span class="hljs-comment">//int b = 3;</span><br>mov dword ptr ds:[ebp<span class="hljs-number">-8</span>],<span class="hljs-number">3</span><br>            <span class="hljs-comment">//int c = 4;</span><br>            mov dword ptr ds:[ebp<span class="hljs-number">-0xc</span>],<span class="hljs-number">4</span><br><br>mov eax,dword ptr ds:[ebp+<span class="hljs-number">8</span>]<br>add eax,dword ptr ds:[ebp+<span class="hljs-number">0xC</span>]<br>add eax,dword ptr ds:[ebp+<span class="hljs-number">0x10</span>]<br>            add eax,dword ptr ds:[ebp<span class="hljs-number">-4</span>]<br>            add eax,dword ptr ds:[ebp<span class="hljs-number">-8</span>]<br>            add eax,dword ptr ds:[ebp<span class="hljs-number">-0xc</span>]<br>            <br>pop edi<br>pop esi<br>pop ebx<br>mov esp,ebp<br>pop ebp<br><br>ret<br>&#125;<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>* argv[])</span><br>&#123;<br>    Plus(<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>);<br><span class="hljs-comment">//return 0;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>用VC6.0写的C语言生成的反汇编：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs assembly">55                    push        ebp<br>00401021 8B EC                mov         ebp,esp<br>00401023 83 EC 4C             sub         esp,4Ch<br>00401026 53                   push        ebx<br>00401027 56                   push        esi<br>00401028 57                   push        edi<br>00401029 8D 7D B4             lea         edi,[ebp-4Ch]<br>0040102C B9 13 00 00 00       mov         ecx,13h<br>00401031 B8 CC CC CC CC       mov         eax,0CCCCCCCCh<br>00401036 F3 AB                rep stos    dword ptr [edi]<br>4:        int a = 2;<br>00401038 C7 45 FC 02 00 00 00 mov         dword ptr [ebp-4],2<br>5:        int b = 3;<br>0040103F C7 45 F8 03 00 00 00 mov         dword ptr [ebp-8],3<br>6:        int c = 4;<br>00401046 C7 45 F4 04 00 00 00 mov         dword ptr [ebp-0Ch],4<br>7:        return x+y+z+a+b+c;<br>0040104D 8B 45 08             mov         eax,dword ptr [ebp+8]<br>00401050 03 45 0C             add         eax,dword ptr [ebp+0Ch]<br>00401053 03 45 10             add         eax,dword ptr [ebp+10h]<br>00401056 03 45 FC             add         eax,dword ptr [ebp-4]<br>00401059 03 45 F8             add         eax,dword ptr [ebp-8]<br>0040105C 03 45 F4             add         eax,dword ptr [ebp-0Ch]<br>8:    &#125;<br>0040105F 5F                   pop         edi<br>00401060 5E                   pop         esi<br>00401061 5B                   pop         ebx<br>00401062 8B E5                mov         esp,ebp<br>00401064 5D                   pop         ebp<br>00401065 C3                   ret<br><br></code></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>局部变量从EBP-4开始；参数从EBP+8开始（EBP+4保存的是返回EIP,EBP保存的是原来的栈底（调用前的EBP））</p><p>局部变量放在ebp上面 [ebp-4],[ebp-8],[ebp-0xC]</p><p>参数返回值放在ebp下面[ebp+8],[ebp+0x0C],[ebp+0x10] </p><p><strong>因为参数返回值不在函数内部</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;裸函数-没人管你&quot;&gt;&lt;a href=&quot;#裸函数-没人管你&quot; class=&quot;headerlink&quot; title=&quot;裸函数(没人管你)&quot;&gt;&lt;/a&gt;裸函数(没人管你)&lt;/h1&gt;&lt;p&gt;普通函数会自动生成实现堆栈提升、堆栈的缓存区建立、堆栈平衡和函数返回的汇编代码，裸函数不</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://example.com/2023/10/07/%E8%BF%9B%E5%88%B6%E7%9B%B8%E5%85%B3(C)/"/>
    <id>http://example.com/2023/10/07/%E8%BF%9B%E5%88%B6%E7%9B%B8%E5%85%B3(C)/</id>
    <published>2023-10-07T05:52:02.102Z</published>
    <updated>2023-10-05T14:07:14.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="进制相关-C"><a href="#进制相关-C" class="headerlink" title="进制相关(C)"></a>进制相关(C)</h1><p>要求：</p><p>输入两个参数，第一个参数base代表几进制，第二个参数num代表该进制下的第num个数；</p><p>输出base进制下第num个数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-comment">// 函数声明</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">print_num_in_base</span><span class="hljs-params">(<span class="hljs-type">int</span> base, <span class="hljs-type">int</span> num)</span>;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 定义两个整数变量x和y</span><br>    <span class="hljs-type">int</span> x, y;<br><br>    <span class="hljs-comment">// 提示用户输入两个整数</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;请输入两个整数（空格分隔）：&quot;</span>);<br><br>    <span class="hljs-comment">// 从用户那里获取两个整数</span><br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d&quot;</span>, &amp;x, &amp;y);<br><br>    <span class="hljs-comment">// 调用函数来打印x进制下的第y个数</span><br>    print_num_in_base(x, y);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">// 函数定义</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">print_num_in_base</span><span class="hljs-params">(<span class="hljs-type">int</span> base, <span class="hljs-type">int</span> num)</span> &#123;<br><span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> j;<br>    <span class="hljs-comment">// 定义一个字符数组来存储数字和字母</span><br>    <span class="hljs-type">char</span> digits[] = <span class="hljs-string">&quot;0123456789ABCDEF&quot;</span>;<br><br>    <span class="hljs-comment">// 定义一个字符数组来存储结果</span><br>    <span class="hljs-type">char</span> result[<span class="hljs-number">50</span>];<br>    <br>    <span class="hljs-comment">//第一个数从0开始</span><br>result[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>;<br>num = num<span class="hljs-number">-1</span>;<br>    <br>    <span class="hljs-comment">// 使用循环来计算每一位数字，并将其存储在结果数组中</span><br>    <span class="hljs-keyword">while</span> (num &gt; <span class="hljs-number">0</span>) &#123;<br>        result[i] = digits[num % base];<br>        num = num / base;<br>        i++;<br>    &#125;<br><br>    <span class="hljs-comment">// 打印出结果数组中的每一位数字，从最后一位开始打印</span><br>    <span class="hljs-keyword">for</span> (j = i - <span class="hljs-number">1</span>; j &gt;= <span class="hljs-number">0</span>; j--) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c&quot;</span>, result[j]);<br>    &#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="注：VC6-0快捷键"><a href="#注：VC6-0快捷键" class="headerlink" title="注：VC6.0快捷键"></a><strong>注：VC6.0快捷键</strong></h2><p>F7：构建（生成.exe）</p><p>F5：运行</p><p>shift + F5：结束运行</p><p>F9：断点</p><p>F10：步进</p><p>F11：步入</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;进制相关-C&quot;&gt;&lt;a href=&quot;#进制相关-C&quot; class=&quot;headerlink&quot; title=&quot;进制相关(C)&quot;&gt;&lt;/a&gt;进制相关(C)&lt;/h1&gt;&lt;p&gt;要求：&lt;/p&gt;
&lt;p&gt;输入两个参数，第一个参数base代表几进制，第二个参数num代表该进制下的第num</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>标志寄存器</title>
    <link href="http://example.com/2023/09/25/%E6%A0%87%E5%BF%97%E5%AF%84%E5%AD%98%E5%99%A8/"/>
    <id>http://example.com/2023/09/25/%E6%A0%87%E5%BF%97%E5%AF%84%E5%AD%98%E5%99%A8/</id>
    <published>2023-09-25T05:02:49.000Z</published>
    <updated>2023-09-26T08:20:14.551Z</updated>
    
    <content type="html"><![CDATA[<h2 id="EFLAGS寄存器"><a href="#EFLAGS寄存器" class="headerlink" title="EFLAGS寄存器"></a>EFLAGS寄存器</h2><p><img src="/../images/image-20230926161935873.png" alt="image-20230926161935873"></p><h3 id="标志寄存器"><a href="#标志寄存器" class="headerlink" title="标志寄存器"></a>标志寄存器</h3><p>1、进位标志CF(Carry Flag):如果运算结果的最高位产生了一个进位或借位，那么，其值为1，否则其值为0。</p><p>2、奇偶标志PF(Parity Flag)：奇偶标志PF用于反映运算结果中“1”的个数的奇偶性。如果“1”的个数为偶数，则PF的值为1，否则其值为0。</p><p>3、辅助进位标志AF(Auxiliary Carry Flag)：</p><p>在发生下列情况时，辅助进位标志AF的值被置为1，否则其值为0：</p><p>(1)、在字操作时，发生低字节向高字节进位或借位时；</p><p>(2)、在字节操作时，发生低4位向高4位进位或借位时。</p><p>4、零标志ZF(Zero Flag)：零标志ZF用来反映运算结果是否为0。</p><p>如果运算结果为0，则其值为1，否则其值为0。在判断运算结果是否为0时，可使用此标志位。</p><p>5、符号标志SF(Sign Flag)：符号标志SF用来反映运算结果的符号位，它与运算结果的最高位相同。</p><p>6、溢出标志OF(Overflow Flag)：溢出标志OF用于反映有符号数加减运算所得结果是否溢出。</p><p>如果运算结果超过当前运算位数所能表示的范围，则称为溢出，OF的值被置为1，否则，OF的值被清为0。</p><p>注：最高位进位与溢出的区别：</p><p>​进位标志表示无符号数运算结果是否超出范围.</p><p>​溢出标志表示有符号数运算结果是否超出范围.</p><p>​溢出主要是给有符号运算使用的，在有符号的运算中，有如下的规律：</p><p>​正 + 正 &#x3D; 正 如果结果是负数，则说明有溢出</p><p>​负 + 负 &#x3D; 负 如果结果是正数，则说明有溢出</p><p>​正 + 负 永远都不会有溢出.</p><p><img src="/../images/image-20230926162007713.png" alt="image-20230926162007713"></p><h2 id="其他指令"><a href="#其他指令" class="headerlink" title="其他指令"></a>其他指令</h2><h3 id="ADC指令：带进位加法"><a href="#ADC指令：带进位加法" class="headerlink" title="ADC指令：带进位加法"></a>ADC指令：带进位加法</h3><p>​格式：ADC  R&#x2F;M,R&#x2F;M&#x2F;IMM   两边不能同时为内存  宽度要一样</p><h3 id="SBB指令：带借位减法"><a href="#SBB指令：带借位减法" class="headerlink" title="SBB指令：带借位减法"></a>SBB指令：带借位减法</h3><p>​格式：SBB  R&#x2F;M,R&#x2F;M   两边不能同时为内存  宽度要一样</p><h3 id="XCHG指令：交换数据"><a href="#XCHG指令：交换数据" class="headerlink" title="XCHG指令：交换数据"></a>XCHG指令：交换数据</h3><p>​格式：XCHG  R&#x2F;M,R&#x2F;M&#x2F;IMM   两边不能同时为内存  宽度要一样</p><h3 id="MOVS指令：移动数据-内存-内存"><a href="#MOVS指令：移动数据-内存-内存" class="headerlink" title="MOVS指令：移动数据  内存-内存"></a>MOVS指令：移动数据  内存-内存</h3><p>​BYTE&#x2F;WORD&#x2F;DWORD</p><p>​MOVS BYTE PTR ES:[EDI],BYTE PTR DS:[ESI]简写为：MOVSB</p><p>​MOVS WORD PTR ES:[EDI],BYTE PTR DS:[ESI]简写为：MOVSW</p><p>​MOVS DWORD PTR ES:[EDI],BYTE PTR DS:[ESI]简写为：MOVSD</p><h3 id="STOS指令：将AL-AX-EAX的值存储到-EDI-指定的内存单元"><a href="#STOS指令：将AL-AX-EAX的值存储到-EDI-指定的内存单元" class="headerlink" title="STOS指令：将AL&#x2F;AX&#x2F;EAX的值存储到[EDI]指定的内存单元"></a>STOS指令：将AL&#x2F;AX&#x2F;EAX的值存储到[EDI]指定的内存单元</h3><p>​STOS BYTE PTR ES:[EDI]简写为STOSB</p><p>​STOS WORD PTR ES:[EDI]简写为STOSW</p><p>​STOS DWORD PTR ES:[EDI]简写为STOSD</p><h3 id="REP指令：按计数寄存器-ECX-中指定的次数重复执行字符串指令"><a href="#REP指令：按计数寄存器-ECX-中指定的次数重复执行字符串指令" class="headerlink" title="REP指令：按计数寄存器 (ECX) 中指定的次数重复执行字符串指令"></a>REP指令：按计数寄存器 (ECX) 中指定的次数重复执行字符串指令</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;EFLAGS寄存器&quot;&gt;&lt;a href=&quot;#EFLAGS寄存器&quot; class=&quot;headerlink&quot; title=&quot;EFLAGS寄存器&quot;&gt;&lt;/a&gt;EFLAGS寄存器&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/../images/image-202309261619358</summary>
      
    
    
    
    
    <category term="EFLAGS" scheme="http://example.com/tags/EFLAGS/"/>
    
  </entry>
  
</feed>
