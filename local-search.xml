<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>牛客刷题</title>
    <link href="/2024/01/16/%E7%89%9B%E5%AE%A2%E5%88%B7%E9%A2%98/"/>
    <url>/2024/01/16/%E7%89%9B%E5%AE%A2%E5%88%B7%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h1 id="BM7-链表中环的入口结点"><a href="#BM7-链表中环的入口结点" class="headerlink" title="BM7 链表中环的入口结点"></a><strong>BM7</strong> <strong>链表中环的入口结点</strong></h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p><img src="/../images/image-20240116105755207.png" alt="image-20240116105755207"></p><h2 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h2><p><img src="/../images/image-20240116105817217.png" alt="image-20240116105817217"></p><p>有了之前的判断链表是否有环的快慢指针解法，这题就相对简单了</p><p>假设头节点到入口点距离为 x,入口点到快慢指针相遇点距离为y,相遇点到环入口点距离为z;</p><p>那么将有以下条件成立：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//慢指针位移为：x+y</span><br><span class="hljs-comment">//快指针位移为：x+n*(y+z)   就是说快指针比慢指针多走n圈，且快指针速度是慢指针速度两倍</span><br>所以：<br><span class="hljs-number">2</span>*(x+y) = x + n*(y+z)<br>化简：<br>x+y = z + (n<span class="hljs-number">-1</span>)*(y+z)<br>x = z-y + (n<span class="hljs-number">-1</span>)*(y+z)<br></code></pre></td></tr></table></figure><p>所以，定义再来两个指针，一个从相遇点出发，一个从头节点出发，速度相同，再次相遇就是环入口点</p><p>具体算法：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs c"><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">struct ListNode &#123;</span><br><span class="hljs-comment">    int val;</span><br><span class="hljs-comment">    struct ListNode *next;</span><br><span class="hljs-comment">    ListNode(int x) :</span><br><span class="hljs-comment">        val(x), next(NULL) &#123;</span><br><span class="hljs-comment">    &#125;</span><br><span class="hljs-comment">&#125;;</span><br><span class="hljs-comment">*/</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br>public:<br>    ListNode* <span class="hljs-title function_">EntryNodeOfLoop</span><span class="hljs-params">(ListNode* pHead)</span> &#123;<br>        <span class="hljs-keyword">if</span>(pHead == nullptr||pHead-&gt;next==nullptr)&#123;<br>            <span class="hljs-keyword">return</span> nullptr;<br>        &#125;<br>        ListNode* fast = pHead;<br>        ListNode* slow = pHead;<br>        <span class="hljs-keyword">while</span> (fast!= nullptr &amp;&amp; fast-&gt;next != nullptr) &#123;<span class="hljs-comment">//存在环</span><br>            fast = fast-&gt;next-&gt;next;<br>            slow = slow-&gt;next;<br>            <span class="hljs-keyword">if</span>(fast == slow)&#123;<span class="hljs-comment">//找到相遇点后，将快指针指向头节点</span><br>                fast = pHead;<br>                <span class="hljs-keyword">while</span>(fast!=slow)&#123;<span class="hljs-comment">//快慢指针速度相同，再次相遇就是环入口点</span><br>                    fast = fast-&gt;next;<br>                    slow = slow-&gt;next;<br>                &#125;<br>                <span class="hljs-keyword">return</span> slow;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> nullptr;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>洛谷</title>
    <link href="/2024/01/03/%E6%B4%9B%E8%B0%B7/"/>
    <url>/2024/01/03/%E6%B4%9B%E8%B0%B7/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>组合数学</title>
    <link href="/2024/01/02/%E7%BB%84%E5%90%88%E6%95%B0%E5%AD%A6/"/>
    <url>/2024/01/02/%E7%BB%84%E5%90%88%E6%95%B0%E5%AD%A6/</url>
    
    <content type="html"><![CDATA[<h1 id="指数型母函数（P78）"><a href="#指数型母函数（P78）" class="headerlink" title="指数型母函数（P78）"></a>指数型母函数（P78）</h1><p>例2-29</p><p>由 a,b,c,d 这4个字符取5个作允许重复的排列  要求：啊出现的次数不超过2次，但不能不出现，b不超过1个，。。。</p><p>2-31</p><p>将 1，3，5，7，9，这5个数字组成n位数，要求 3 和7出现次数为偶数。。。</p><p>2-32</p><p>7个有区别的球放进4个有标志的盒子里，要求1，2必须含有偶数个球、、、</p><p>像以上例题可以总结为 n 种元素 取出 m个排列，其中，我们把带要求的定为 “种元素”，然后对“种元素”按照要求一一对应写出指数型泰勒多项式，再相乘，看x的m次幂 系数</p><p>2-29 a,b,c,d有要求限制，定为 4 种元素，取5个 则对a,b,c,d分别按照要求一一对应写出泰勒多项式 ，再相乘</p><p>2-31 1，3，5，7，9定为 5种元素 ，取 n个</p><p>2-32 4个盒子定为 4种元素 取 7个</p><h1 id="错排问题递推公式推导"><a href="#错排问题递推公式推导" class="headerlink" title="错排问题递推公式推导"></a>错排问题递推公式推导</h1><p>假如有 n nn 封信 , 任何一封信都需要错位 , 错排方案数是 D ( n ) D(n)D(n) ;</p><p>1 . 分步计数原理 : 使用 分步计数原理 , 先统计 第一封信的排列方法 , 然后再讨论 其余信的排列方法数 ;</p><p>( 1 ) 第一步 : 首先找出一封信 a aa 出来 , 这封信不能排在其本身位置 , 只能放在其余 n − 1 n-1n−1 个位置上 , 因此有 n − 1 n-1n−1 种排法 ;</p><p>( 2 ) 第二步 : 现在讨论其余除 a aa 之外的其余信的位置的错排问题 ;</p><p>2 . 分类计数原理</p><p>假设第一封信 a aa 占据了 b bb 的位置 , 那么此时 b bb 放在哪个信封分两种情况 , b bb 放在 a aa 位置 , 或 b bb 不放在 a aa 位置 ;</p><p>( 1 ) 第一类 : 第一种情况是放在 a aa 位置 , 此时 b bb 放在 a aa 位置 , 剩下 n − 2 n-2n−2 封信进行错排 , 方案数是 D ( n − 2 ) D(n-2)D(n−2)</p><p>( 2 ) 第二类 : 第二种情况是 b bb 没有去 a aa 的位置 , 那么 b bb 可能出现在除 a aa 之外的任何位置 , b bb 有 n − 2 n-2n−2 个位置可以去 , 不能去 a , b a,ba,b 位置 , 其余所有元素都有 n − 2 n-2n−2 个位置可以去 ( a , b a,ba,b 位置不能去 ) , 这种情况下 相当于除 a aa 之外的其它元素的错排问题 , 即 n − 1 n-1n−1 个元素的错排问题 , 方案数是 D ( n − 1 ) D(n-1)D(n−1) ; ★ ( 核心推导逻辑 ) ★</p><p>( 3 ) 加法法则 : 汇总上述分类计数原理 , 使用 加法法则 , 计算结果是 D ( n − 1 ) + D ( n − 2 ) D(n -1) + D(n-2)D(n−1)+D(n−2)</p><p>3 . 乘法法则 : 汇总上述分步计数原理 , 使用 乘法法则 , 计算结果是</p><p>D ( n ) &#x3D; ( n − 1 ) ( D ( n − 1 ) + D ( n − 2 ) )</p><p>用归纳法可以总结出D(n)：</p><p><img src="/../images/image-20240102162142986.png" alt="image-20240102162142986"></p>]]></content>
    
    
    
    <tags>
      
      <tag>组合数学复习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CTF_RE</title>
    <link href="/2023/11/29/CTF-RE/"/>
    <url>/2023/11/29/CTF-RE/</url>
    
    <content type="html"><![CDATA[<h1 id="BUU-10-SimpleRev"><a href="#BUU-10-SimpleRev" class="headerlink" title="BUU_10 SimpleRev"></a>BUU_10 SimpleRev</h1><p>查壳</p><p><img src="/../images/image-20231203195353127.png" alt="image-20231203195353127"></p><p>拖到IDA,shift+F12</p><p><img src="/../images/image-20231203195438346.png" alt="image-20231203195438346"></p><p>跟踪字符串</p><p><img src="/../images/image-20231203195556965.png" alt="image-20231203195556965"></p><h2 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h2><p><strong>x86cpu中存储是小端存储，因此，实际存储的应该是倒过来的</strong>，所以v9 &#x3D; hadow</p><p>然后就是对输入的flag操作，再和text对比，直接上脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python">key = <span class="hljs-string">&#x27;adsfkndcls&#x27;</span><br>flag =<span class="hljs-string">&#x27;&#x27;</span><br>text = <span class="hljs-string">&#x27;killshadow&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(text)):<br>    <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">65</span>,<span class="hljs-number">123</span>):<br>       <span class="hljs-keyword">if</span> text[i] == <span class="hljs-built_in">chr</span>((x-<span class="hljs-number">39</span>-<span class="hljs-built_in">ord</span>(key[i]) + <span class="hljs-number">97</span>) % <span class="hljs-number">26</span> +<span class="hljs-number">97</span>):<br>          flag= flag+<span class="hljs-built_in">chr</span>(x)<br>          <span class="hljs-keyword">break</span><span class="hljs-comment">#停止内存for循环</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;flag&#123;&#x27;</span>+flag+<span class="hljs-string">&#x27;&#125;&#x27;</span>)<br><br><span class="hljs-comment"># 观察如果是全大写是上面那种</span><br><span class="hljs-comment">#但是如果是全小写</span><br>key = <span class="hljs-string">&#x27;adsfkndcls&#x27;</span><br>flag =<span class="hljs-string">&#x27;&#x27;</span><br>text = <span class="hljs-string">&#x27;killshadow&#x27;</span><br><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">97</span>,<span class="hljs-number">123</span>):<span class="hljs-comment">#全小写</span><br><span class="hljs-keyword">if</span> text[i] == <span class="hljs-built_in">chr</span>((x-<span class="hljs-number">39</span>-<span class="hljs-built_in">ord</span>(key[i]) + <span class="hljs-number">97</span>) % <span class="hljs-number">26</span> +<span class="hljs-number">97</span>):<br>flag= flag+<span class="hljs-built_in">chr</span>(x)<br><span class="hljs-keyword">break</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;flag&#123;&#x27;</span>+flag+<span class="hljs-string">&#x27;&#125;&#x27;</span>)<br><br><span class="hljs-comment">#脑洞大开，只要是这两个解的排列组合都行，长度是10位就可以</span><br></code></pre></td></tr></table></figure><p>flag{KLDQCUDFZO}或者flag{efxkwoxzti}</p><p><img src="/../images/image-20231203195911759.png" alt="image-20231203195911759"></p><p><img src="/../images/image-20231203200926247.png" alt="image-20231203200926247"></p><h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><p>这个题有bug,所以收获只有IDA识别出来的字符串是小端序，正常情况下是倒过来的</p><h1 id="BUUCTF-16-：-GWCTF-2019-pyre1"><a href="#BUUCTF-16-：-GWCTF-2019-pyre1" class="headerlink" title="BUUCTF_16 ：[GWCTF 2019]pyre1"></a>BUUCTF_16 ：[GWCTF 2019]pyre1</h1><p>下载文件后发现格式为pyc文件，需要使用pyth反汇编</p><p>在线工具：<a href="https://tool.lu/pyc/">python反编译 - 在线工具 (tool.lu)</a></p><p>反汇编后得到：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><br><span class="hljs-comment"># visit https://tool.lu/pyc/ for more information</span><br><span class="hljs-comment"># Version: Python 2.7</span><br><br><span class="hljs-built_in">print</span> <span class="hljs-string">&#x27;Welcome to Re World!&#x27;</span><br><span class="hljs-built_in">print</span> <span class="hljs-string">&#x27;Your input1 is your flag~&#x27;</span><br>l = <span class="hljs-built_in">len</span>(input1)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(l):<br>    num = ((input1[i] + i) % <span class="hljs-number">128</span> + <span class="hljs-number">128</span>) % <span class="hljs-number">128</span>   <span class="hljs-comment">#就是数组加上下标然后再对128取余</span><br>    code += num<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(l - <span class="hljs-number">1</span>):<span class="hljs-comment">#code数组每个都和后一位异或得到给自己</span><br>    code[i] = code[i] ^ code[i + <span class="hljs-number">1</span>]<br><br><span class="hljs-built_in">print</span> code<br>code = [<br>    <span class="hljs-string">&#x27;%1f&#x27;</span>,<br>    <span class="hljs-string">&#x27;%12&#x27;</span>,<br>    <span class="hljs-string">&#x27;%1d&#x27;</span>,<br>    <span class="hljs-string">&#x27;(&#x27;</span>,<br>    <span class="hljs-string">&#x27;0&#x27;</span>,<br>    <span class="hljs-string">&#x27;4&#x27;</span>,<br>    <span class="hljs-string">&#x27;%01&#x27;</span>,<br>    <span class="hljs-string">&#x27;%06&#x27;</span>,<br>    <span class="hljs-string">&#x27;%14&#x27;</span>,<br>    <span class="hljs-string">&#x27;4&#x27;</span>,<br>    <span class="hljs-string">&#x27;,&#x27;</span>,<br>    <span class="hljs-string">&#x27;%1b&#x27;</span>,<br>    <span class="hljs-string">&#x27;U&#x27;</span>,<br>    <span class="hljs-string">&#x27;?&#x27;</span>,<br>    <span class="hljs-string">&#x27;o&#x27;</span>,<br>    <span class="hljs-string">&#x27;6&#x27;</span>,<br>    <span class="hljs-string">&#x27;*&#x27;</span>,<br>    <span class="hljs-string">&#x27;:&#x27;</span>,<br>    <span class="hljs-string">&#x27;%01&#x27;</span>,<br>    <span class="hljs-string">&#x27;D&#x27;</span>,<br>    <span class="hljs-string">&#x27;;&#x27;</span>,<br>    <span class="hljs-string">&#x27;%&#x27;</span>,<br>    <span class="hljs-string">&#x27;%13&#x27;</span>]<br></code></pre></td></tr></table></figure><p>所以就是将输入的数据存在input1[]数组里，然后将数组里每个元素加上下标再和128取余</p><p>得到的结果再将数组里前len-1个元素依次和后一个元素进行异或</p><p>因此，需要反其道而行之</p><p>写个python脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs python">code = [<br>    <span class="hljs-string">&#x27;\x1f&#x27;</span>,<br>    <span class="hljs-string">&#x27;\x12&#x27;</span>,<br>    <span class="hljs-string">&#x27;\x1d&#x27;</span>,<br>    <span class="hljs-string">&#x27;(&#x27;</span>,<br>    <span class="hljs-string">&#x27;0&#x27;</span>,<br>    <span class="hljs-string">&#x27;4&#x27;</span>,<br>    <span class="hljs-string">&#x27;\x01&#x27;</span>,<br>    <span class="hljs-string">&#x27;\x06&#x27;</span>,<br>    <span class="hljs-string">&#x27;\x14&#x27;</span>,<br>    <span class="hljs-string">&#x27;4&#x27;</span>,<br>    <span class="hljs-string">&#x27;,&#x27;</span>,<br>    <span class="hljs-string">&#x27;\x1b&#x27;</span>,<br>    <span class="hljs-string">&#x27;U&#x27;</span>,<br>    <span class="hljs-string">&#x27;?&#x27;</span>,<br>    <span class="hljs-string">&#x27;o&#x27;</span>,<br>    <span class="hljs-string">&#x27;6&#x27;</span>,<br>    <span class="hljs-string">&#x27;*&#x27;</span>,<br>    <span class="hljs-string">&#x27;:&#x27;</span>,<br>    <span class="hljs-string">&#x27;\x01&#x27;</span>,<br>    <span class="hljs-string">&#x27;D&#x27;</span>,<br>    <span class="hljs-string">&#x27;;&#x27;</span>,<br>    <span class="hljs-string">&#x27;%&#x27;</span>,<br>    <span class="hljs-string">&#x27;\x13&#x27;</span>]<br>l=<span class="hljs-built_in">len</span>(code)<br><span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(l-<span class="hljs-number">2</span>,-<span class="hljs-number">1</span>,-<span class="hljs-number">1</span>):  <span class="hljs-comment">#要倒着异或，，从倒数第二个开始，到0，（因为前面是正序的）</span><br>    code[j]=<span class="hljs-built_in">chr</span>(<span class="hljs-built_in">ord</span>(code[j])^<span class="hljs-built_in">ord</span>(code[j+<span class="hljs-number">1</span>]))<br><span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(l):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>((<span class="hljs-built_in">ord</span>(code[j])-j)%<span class="hljs-number">128</span>),end=<span class="hljs-string">&#x27;&#x27;</span>)<br></code></pre></td></tr></table></figure><p>得到结果：GWHT{Just_Re_1s_Ha66y!}</p><p>所以，flag{Just_Re_1s_Ha66y!}</p><h1 id="UPX-BUU-19-ACTF新生赛2020-easyre"><a href="#UPX-BUU-19-ACTF新生赛2020-easyre" class="headerlink" title="UPX_BUU_19[ACTF新生赛2020]easyre"></a>UPX_BUU_19[ACTF新生赛2020]easyre</h1><p>1、查壳</p><p><img src="/../images/image-20231203170206102.png" alt="image-20231203170206102"></p><p>发现是UPX加壳，对于标准的upx加壳，我们只用去<a href="https://upx.github.io/%E4%B8%8B%E8%BD%BD%E8%BD%AF%E4%BB%B6%EF%BC%8C%E7%84%B6%E5%90%8E%E5%86%8D%E6%96%87%E4%BB%B6%E5%A4%B9%E4%B8%AD%E6%89%93%E5%BC%80cmd">https://upx.github.io/下载软件，然后再文件夹中打开cmd</a></p><p>输入upx -d +需要脱壳文件的路径，就可以脱壳</p><p>2、脱壳后拖到IDA</p><p>shift+f12一下</p><p><img src="/../images/image-20231203170441226.png" alt="image-20231203170441226"></p><p>发现“you are correct!”跟进去</p><p><img src="/../images/image-20231203170531919.png" alt="image-20231203170531919"></p><p>最终发现flag其实就是v4对应的字符在_data_start_这个数组中的下标值+1所表示的字符串</p><p>双击data_start数组导出他的对应十六进制，剩下的就交给脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python">key = <span class="hljs-string">&quot;*F&#x27;\&quot;N,\&quot;(I?+@&quot;</span><br>data = [<span class="hljs-number">0x7E</span>, <span class="hljs-number">0x7D</span>, <span class="hljs-number">0x7C</span>, <span class="hljs-number">0x7B</span>, <span class="hljs-number">0x7A</span>, <span class="hljs-number">0x79</span>, <span class="hljs-number">0x78</span>, <span class="hljs-number">0x77</span>, <span class="hljs-number">0x76</span>, <span class="hljs-number">0x75</span>,<br>  <span class="hljs-number">0x74</span>, <span class="hljs-number">0x73</span>, <span class="hljs-number">0x72</span>, <span class="hljs-number">0x71</span>, <span class="hljs-number">0x70</span>, <span class="hljs-number">0x6F</span>, <span class="hljs-number">0x6E</span>, <span class="hljs-number">0x6D</span>, <span class="hljs-number">0x6C</span>, <span class="hljs-number">0x6B</span>,<br>  <span class="hljs-number">0x6A</span>, <span class="hljs-number">0x69</span>, <span class="hljs-number">0x68</span>, <span class="hljs-number">0x67</span>, <span class="hljs-number">0x66</span>, <span class="hljs-number">0x65</span>, <span class="hljs-number">0x64</span>, <span class="hljs-number">0x63</span>, <span class="hljs-number">0x62</span>, <span class="hljs-number">0x61</span>,<br>  <span class="hljs-number">0x60</span>, <span class="hljs-number">0x5F</span>, <span class="hljs-number">0x5E</span>, <span class="hljs-number">0x5D</span>, <span class="hljs-number">0x5C</span>, <span class="hljs-number">0x5B</span>, <span class="hljs-number">0x5A</span>, <span class="hljs-number">0x59</span>, <span class="hljs-number">0x58</span>, <span class="hljs-number">0x57</span>,<br>  <span class="hljs-number">0x56</span>, <span class="hljs-number">0x55</span>, <span class="hljs-number">0x54</span>, <span class="hljs-number">0x53</span>, <span class="hljs-number">0x52</span>, <span class="hljs-number">0x51</span>, <span class="hljs-number">0x50</span>, <span class="hljs-number">0x4F</span>, <span class="hljs-number">0x4E</span>, <span class="hljs-number">0x4D</span>,<br>  <span class="hljs-number">0x4C</span>, <span class="hljs-number">0x4B</span>, <span class="hljs-number">0x4A</span>, <span class="hljs-number">0x49</span>, <span class="hljs-number">0x48</span>, <span class="hljs-number">0x47</span>, <span class="hljs-number">0x46</span>, <span class="hljs-number">0x45</span>, <span class="hljs-number">0x44</span>, <span class="hljs-number">0x43</span>,<br>  <span class="hljs-number">0x42</span>, <span class="hljs-number">0x41</span>, <span class="hljs-number">0x40</span>, <span class="hljs-number">0x3F</span>, <span class="hljs-number">0x3E</span>, <span class="hljs-number">0x3D</span>, <span class="hljs-number">0x3C</span>, <span class="hljs-number">0x3B</span>, <span class="hljs-number">0x3A</span>, <span class="hljs-number">0x39</span>,<br>  <span class="hljs-number">0x38</span>, <span class="hljs-number">0x37</span>, <span class="hljs-number">0x36</span>, <span class="hljs-number">0x35</span>, <span class="hljs-number">0x34</span>, <span class="hljs-number">0x33</span>, <span class="hljs-number">0x32</span>, <span class="hljs-number">0x31</span>, <span class="hljs-number">0x30</span>, <span class="hljs-number">0x2F</span>,<br>  <span class="hljs-number">0x2E</span>, <span class="hljs-number">0x2D</span>, <span class="hljs-number">0x2C</span>, <span class="hljs-number">0x2B</span>, <span class="hljs-number">0x2A</span>, <span class="hljs-number">0x29</span>, <span class="hljs-number">0x28</span>, <span class="hljs-number">0x27</span>, <span class="hljs-number">0x26</span>, <span class="hljs-number">0x25</span>,<br>  <span class="hljs-number">0x24</span>, <span class="hljs-number">0x23</span>, <span class="hljs-number">0x20</span>, <span class="hljs-number">0x21</span>, <span class="hljs-number">0x22</span>, <span class="hljs-number">0x00</span>]<br><br>flag = <span class="hljs-string">&quot;flag&#123;&quot;</span>+<span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> key:<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(data)):<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">ord</span>(i) == data[j]:<br>            flag += <span class="hljs-built_in">chr</span>(j+<span class="hljs-number">1</span>)<br><span class="hljs-built_in">print</span>(flag+<span class="hljs-string">&#x27;&#125;&#x27;</span>,end=<span class="hljs-string">&#x27;&#x27;</span>)<br></code></pre></td></tr></table></figure><p>解出flag{U9X_1S_W6@T?}</p><p><img src="/../images/image-20231203170724647.png" alt="image-20231203170724647"></p><h1 id="2019红帽杯-easyRE-1"><a href="#2019红帽杯-easyRE-1" class="headerlink" title="[2019红帽杯]easyRE 1"></a>[2019红帽杯]easyRE 1</h1><p>下载后查壳发现是ELF64位；</p><p>拖到ida64</p><p>shift + f12 查看字符串发现 “You found me!!!”和“bye bye”</p><p><img src="/../images/image-20231129193830183.png" alt="image-20231129193830183"></p><p>双击然后 Ctrl+X查看被调用函数</p><p>F5进入反汇编</p><p><img src="/../images/image-20231129194122534.png" alt="image-20231129194122534"></p><p>看到sub_400360应该是个cmp</p><p>看v11来自于v18进行10此base64编码得到 </p><p>双击 off_6cc090</p><p><img src="/../images/image-20231129194232002.png" alt="image-20231129194232002"></p><p>再双击 aVm0wd2vhuxhtwg</p><p>选中字符串后 按shift+E导出</p><p><img src="/../images/image-20231129193443885.png" alt="image-20231129193443885"></p><p>写个脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> base64<br>data = <span class="hljs-string">&#x27;Vm0wd2VHUXhTWGhpUm1SWVYwZDRWVll3Wkc5WFJsbDNXa1pPVlUxV2NIcFhhMk0xVmpKS1NHVkdXbFpOYmtKVVZtcEtTMUl5VGtsaVJtUk9ZV3hhZVZadGVHdFRNVTVYVW01T2FGSnRVbGhhVjNoaFZWWmtWMXBFVWxSTmJFcElWbTAxVDJGV1NuTlhia0pXWWxob1dGUnJXbXRXTVZaeVdrWm9hVlpyV1hwV1IzaGhXVmRHVjFOdVVsWmlhMHBZV1ZSR1lWZEdVbFZTYlhSWFRWWndNRlZ0TVc5VWJGcFZWbXR3VjJKSFVYZFdha1pXWlZaT2NtRkhhRk5pVjJoWVYxZDBhMVV3TlhOalJscFlZbGhTY1ZsclduZGxiR1J5VmxSR1ZXSlZjRWhaTUZKaFZqSktWVkZZYUZkV1JWcFlWV3BHYTFkWFRrZFRiV3hvVFVoQ1dsWXhaRFJpTWtsM1RVaG9hbEpYYUhOVmJUVkRZekZhY1ZKcmRGTk5Wa3A2VjJ0U1ExWlhTbFpqUldoYVRVWndkbFpxUmtwbGJVWklZVVprYUdFeGNHOVhXSEJIWkRGS2RGSnJhR2hTYXpWdlZGVm9RMlJzV25STldHUlZUVlpXTlZadE5VOVdiVXBJVld4c1dtSllUWGhXTUZwell6RmFkRkpzVWxOaVNFSktWa1phVTFFeFduUlRhMlJxVWxad1YxWnRlRXRXTVZaSFVsUnNVVlZVTURrPQ==&#x27;</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br>    data = base64.b64decode(data)<br><span class="hljs-built_in">print</span>(data)<br></code></pre></td></tr></table></figure><p>得到一个网址 b’<a href="https://bbs.pediy.com/thread-254172.htm">https://bbs.pediy.com/thread-254172.htm</a>‘</p><p>点击后：</p><p><img src="/../images/image-20231129193750516.png" alt="image-20231129193750516"></p><p>GAN !!! 被耍了！！！</p><p>返回上个界面，发现有两个数组</p><p><img src="/../images/image-20231129195043811.png" alt="image-20231129195043811"></p><p>按 X 看一下</p><p><img src="/../images/image-20231129195106713.png" alt="image-20231129195106713"></p><p>来自于同一个函数不同偏移</p><p>进入函数发现f和g以及A0到A3，猜测疑似flag</p><p><img src="/../images/image-20231129195202132.png" alt="image-20231129195202132"></p><p>取byte_6CC0A0数组来和flag异或，写个脚本干</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">key = <span class="hljs-string">&#x27;flag&#x27;</span><br>encKey = [<span class="hljs-number">0x40</span>, <span class="hljs-number">0x35</span>, <span class="hljs-number">0x20</span>, <span class="hljs-number">0x56</span>]<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(encKey)):<br>    encKey[i] ^= <span class="hljs-built_in">ord</span>(key[i%<span class="hljs-number">4</span>])<br></code></pre></td></tr></table></figure><p>得到的结果为v4</p><p>再看底下这个循环，长度为25（0到24），所以将byte_6CC0A0数组第一个数点击，然后按 *键，创建一个大小为25的数组</p><p><img src="/../images/image-20231129200744597.png" alt="image-20231129200744597"></p><p><img src="/../images/image-20231129201145119.png" alt="image-20231129201145119"></p><p>shift+E导出为hex</p><p>再根据伪代码写个脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">encData = [ <span class="hljs-number">0x40</span>, <span class="hljs-number">0x35</span>, <span class="hljs-number">0x20</span>, <span class="hljs-number">0x56</span>, <span class="hljs-number">0x5D</span>, <span class="hljs-number">0x18</span>, <span class="hljs-number">0x22</span>, <span class="hljs-number">0x45</span>, <span class="hljs-number">0x17</span>, <span class="hljs-number">0x2F</span>,<br>  <span class="hljs-number">0x24</span>, <span class="hljs-number">0x6E</span>, <span class="hljs-number">0x62</span>, <span class="hljs-number">0x3C</span>, <span class="hljs-number">0x27</span>, <span class="hljs-number">0x54</span>, <span class="hljs-number">0x48</span>, <span class="hljs-number">0x6C</span>, <span class="hljs-number">0x24</span>, <span class="hljs-number">0x6E</span>,<br>  <span class="hljs-number">0x72</span>, <span class="hljs-number">0x3C</span>, <span class="hljs-number">0x32</span>, <span class="hljs-number">0x45</span>, <span class="hljs-number">0x5B</span>]<br><br><span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(encData)):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(encData[j]^encKey[j%<span class="hljs-number">4</span>]),end=<span class="hljs-string">&#x27;&#x27;</span>)<br></code></pre></td></tr></table></figure><p>flag{Act1ve_Defen5e_Test}</p><p><img src="/../images/image-20231129201419054.png" alt="image-20231129201419054"></p><h1 id="BUUCTF-24-CrackRTF1"><a href="#BUUCTF-24-CrackRTF1" class="headerlink" title="BUUCTF_24:CrackRTF1"></a>BUUCTF_24:CrackRTF1</h1><p>查壳</p><p><img src="/../images/image-20231130191202102.png" alt="image-20231130191202102"></p><p>无壳，拖到IDA32,找到main函数</p><p><img src="/../images/image-20231130191251936.png" alt="image-20231130191251936"></p><p>观察程序，有两次输入，将输入的进行一番操作之后最终和 sub_40100F函数有关，成功输出 “bye ~~\n”</p><p>首先看第一次输入的字符串赋值给Destination,并且长度为6，经过atoi(字符转整型)的结果大于100000，然后和@DBApp拼接</p><p>再看sub_40100A,参数是拼接后的Destination和他的长度</p><p>双击进去发现：</p><p><img src="/../images/image-20231130193525333.png" alt="image-20231130193525333"></p><p>百度搜一下CryptCreateHash()函数：</p><p><img src="/../images/image-20231130193623200.png" alt="image-20231130193623200"></p><p>发现第二个参数8004是ALG_ID,点进去看下8004对应的是SHA加密</p><p><img src="/../images/image-20231130193746492.png" alt="image-20231130193746492"></p><p>加密后返回String1和一个字符串对比，理论上SHA解密不了，查看别人解题发现使用<a href="https://www.bejson.com/enc/md5dsc/">MD5解密-BeJSON.com</a>这个网站上的MD5解密可以解密SHA</p><p><img src="/../images/image-20231130193933644.png" alt="image-20231130193933644"></p><p>所以可以知道第一个输入的字符串是123321</p><p>继续观察main函数发现：将输入的第二串字符串和Destination拼接后通过sub_401019()函数处理，双击sub_401019()</p><p><img src="/../images/image-20231130194259436.png" alt="image-20231130194259436"></p><p>发现和前面的一样，就是8004改为8003，去网站搜索8003发现是MD5加密</p><p><img src="/../images/image-20231130194400995.png" alt="image-20231130194400995"></p><p>丢到网站解密：</p><p><img src="/../images/image-20231130194449842.png" alt="image-20231130194449842"></p><p>所以第二次输入的是  ~!3a@0</p><p>最后看sub_40100F()函数</p><p>参数为Str,也就是两次拼接的字符串，即 ~!3a@0123321@DBApp</p><p><img src="/../images/image-20231201091203918.png" alt="image-20231201091203918"></p><p>可以看到函数里面有个sub_401005函数对lpBuffer进行操作，那我们就在此处下个断点，远程调试</p><p>然后把鼠标停在lpBuffer可以看到其地址位于0x42f260</p><p>鼠标停放在nNumberOfBytesToWrite，发现字符串长度为0xe0</p><p>按G输入0x42f260跳转到对应地址,然后创建大小为0xe0的数组，导出数据</p><p>双击sub_401005,看这个函数对lpBuffer数据干了啥</p><p><img src="/../images/image-20231201092324171.png" alt="image-20231201092324171"></p><p>参数lpString是 ~!3a@0123321@DBApp，a2为lpBuffer长度，a3为lpBuffer</p><p>可以看出，这对lpBuffer进行了异或加密</p><p>写个脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs python">data = [  <span class="hljs-number">0x05</span>, <span class="hljs-number">0x7D</span>, <span class="hljs-number">0x41</span>, <span class="hljs-number">0x15</span>, <span class="hljs-number">0x26</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x6D</span>, <span class="hljs-number">0x53</span>, <span class="hljs-number">0x5D</span>, <span class="hljs-number">0x40</span>,<br>          <span class="hljs-number">0x5B</span>, <span class="hljs-number">0x6D</span>, <span class="hljs-number">0x21</span>, <span class="hljs-number">0x2A</span>, <span class="hljs-number">0x31</span>, <span class="hljs-number">0x28</span>, <span class="hljs-number">0x13</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x19</span>, <span class="hljs-number">0x18</span>,<br>          <span class="hljs-number">0x00</span>, <span class="hljs-number">0x57</span>, <span class="hljs-number">0x1C</span>, <span class="hljs-number">0x54</span>, <span class="hljs-number">0x54</span>, <span class="hljs-number">0x54</span>, <span class="hljs-number">0x55</span>, <span class="hljs-number">0x03</span>, <span class="hljs-number">0x6E</span>, <span class="hljs-number">0x55</span>,<br>          <span class="hljs-number">0x25</span>, <span class="hljs-number">0x22</span>, <span class="hljs-number">0x2E</span>, <span class="hljs-number">0x20</span>, <span class="hljs-number">0x1E</span>, <span class="hljs-number">0x17</span>, <span class="hljs-number">0x4F</span>, <span class="hljs-number">0x11</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x52</span>,<br>          <span class="hljs-number">0x1C</span>, <span class="hljs-number">0x54</span>, <span class="hljs-number">0x54</span>, <span class="hljs-number">0x54</span>, <span class="hljs-number">0x5F</span>, <span class="hljs-number">0x52</span>, <span class="hljs-number">0x5C</span>, <span class="hljs-number">0x56</span>, <span class="hljs-number">0x26</span>, <span class="hljs-number">0x21</span>,<br>          <span class="hljs-number">0x70</span>, <span class="hljs-number">0x71</span>, <span class="hljs-number">0x45</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x05</span>, <span class="hljs-number">0x7D</span>, <span class="hljs-number">0x55</span>, <span class="hljs-number">0x0E</span>, <span class="hljs-number">0x2E</span>, <span class="hljs-number">0x44</span>,<br>          <span class="hljs-number">0x45</span>, <span class="hljs-number">0x50</span>, <span class="hljs-number">0x5F</span>, <span class="hljs-number">0x48</span>, <span class="hljs-number">0x6E</span>, <span class="hljs-number">0x57</span>, <span class="hljs-number">0x70</span>, <span class="hljs-number">0x18</span>, <span class="hljs-number">0x24</span>, <span class="hljs-number">0x2C</span>,<br>          <span class="hljs-number">0x1F</span>, <span class="hljs-number">0x14</span>, <span class="hljs-number">0x1B</span>, <span class="hljs-number">0x53</span>, <span class="hljs-number">0x5D</span>, <span class="hljs-number">0x3D</span>, <span class="hljs-number">0x26</span>, <span class="hljs-number">0x40</span>, <span class="hljs-number">0x43</span>, <span class="hljs-number">0x43</span>,<br>          <span class="hljs-number">0x05</span>, <span class="hljs-number">0x6F</span>, <span class="hljs-number">0x54</span>, <span class="hljs-number">0x52</span>, <span class="hljs-number">0x28</span>, <span class="hljs-number">0x25</span>, <span class="hljs-number">0x30</span>, <span class="hljs-number">0x32</span>, <span class="hljs-number">0x15</span>, <span class="hljs-number">0x04</span>,<br>          <span class="hljs-number">0x4F</span>, <span class="hljs-number">0x12</span>, <span class="hljs-number">0x07</span>, <span class="hljs-number">0x41</span>, <span class="hljs-number">0x1C</span>, <span class="hljs-number">0x17</span>, <span class="hljs-number">0x52</span>, <span class="hljs-number">0x50</span>, <span class="hljs-number">0x6F</span>, <span class="hljs-number">0x14</span>,<br>          <span class="hljs-number">0x51</span>, <span class="hljs-number">0x54</span>, <span class="hljs-number">0x1C</span>, <span class="hljs-number">0x63</span>, <span class="hljs-number">0x21</span>, <span class="hljs-number">0x22</span>, <span class="hljs-number">0x2C</span>, <span class="hljs-number">0x57</span>, <span class="hljs-number">0x1B</span>, <span class="hljs-number">0x14</span>,<br>          <span class="hljs-number">0x08</span>, <span class="hljs-number">0x1C</span>, <span class="hljs-number">0x3D</span>, <span class="hljs-number">0x3D</span>, <span class="hljs-number">0x3B</span>, <span class="hljs-number">0x49</span>, <span class="hljs-number">0x6F</span>, <span class="hljs-number">0x19</span>, <span class="hljs-number">0x6E</span>, <span class="hljs-number">0x56</span>,<br>          <span class="hljs-number">0x25</span>, <span class="hljs-number">0x2A</span>, <span class="hljs-number">0x27</span>, <span class="hljs-number">0x33</span>, <span class="hljs-number">0x11</span>, <span class="hljs-number">0x04</span>, <span class="hljs-number">0x11</span>, <span class="hljs-number">0x53</span>, <span class="hljs-number">0x13</span>, <span class="hljs-number">0x2C</span>,<br>          <span class="hljs-number">0x33</span>, <span class="hljs-number">0x56</span>, <span class="hljs-number">0x45</span>, <span class="hljs-number">0x57</span>, <span class="hljs-number">0x57</span>, <span class="hljs-number">0x5A</span>, <span class="hljs-number">0x46</span>, <span class="hljs-number">0x11</span>, <span class="hljs-number">0x75</span>, <span class="hljs-number">0x6A</span>,<br>          <span class="hljs-number">0x76</span>, <span class="hljs-number">0x70</span>, <span class="hljs-number">0x5E</span>, <span class="hljs-number">0x41</span>, <span class="hljs-number">0x4B</span>, <span class="hljs-number">0x0F</span>, <span class="hljs-number">0x02</span>, <span class="hljs-number">0x54</span>, <span class="hljs-number">0x71</span>, <span class="hljs-number">0x05</span>,<br>          <span class="hljs-number">0x0A</span>, <span class="hljs-number">0x4F</span>, <span class="hljs-number">0x6F</span>, <span class="hljs-number">0x45</span>, <span class="hljs-number">0x5B</span>, <span class="hljs-number">0x54</span>, <span class="hljs-number">0x37</span>, <span class="hljs-number">0x2F</span>, <span class="hljs-number">0x2B</span>, <span class="hljs-number">0x2F</span>,<br>          <span class="hljs-number">0x14</span>, <span class="hljs-number">0x44</span>, <span class="hljs-number">0x22</span>, <span class="hljs-number">0x54</span>, <span class="hljs-number">0x50</span>, <span class="hljs-number">0x50</span>, <span class="hljs-number">0x1C</span>, <span class="hljs-number">0x40</span>, <span class="hljs-number">0x50</span>, <span class="hljs-number">0x40</span>,<br>          <span class="hljs-number">0x57</span>, <span class="hljs-number">0x6F</span>, <span class="hljs-number">0x5E</span>, <span class="hljs-number">0x50</span>, <span class="hljs-number">0x2E</span>, <span class="hljs-number">0x23</span>, <span class="hljs-number">0x70</span>, <span class="hljs-number">0x71</span>, <span class="hljs-number">0x45</span>, <span class="hljs-number">0x42</span>,<br>          <span class="hljs-number">0x22</span>, <span class="hljs-number">0x47</span>, <span class="hljs-number">0x03</span>, <span class="hljs-number">0x3D</span>, <span class="hljs-number">0x26</span>, <span class="hljs-number">0x43</span>, <span class="hljs-number">0x03</span>, <span class="hljs-number">0x02</span>, <span class="hljs-number">0x13</span>, <span class="hljs-number">0x75</span>,<br>          <span class="hljs-number">0x5E</span>, <span class="hljs-number">0x50</span>, <span class="hljs-number">0x27</span>, <span class="hljs-number">0x18</span>, <span class="hljs-number">0x39</span>, <span class="hljs-number">0x0F</span>, <span class="hljs-number">0x40</span>, <span class="hljs-number">0x2F</span>, <span class="hljs-number">0x33</span>, <span class="hljs-number">0x11</span>,<br>          <span class="hljs-number">0x41</span>, <span class="hljs-number">0x04</span>, <span class="hljs-number">0x1F</span>, <span class="hljs-number">0x76</span>, <span class="hljs-number">0x43</span>, <span class="hljs-number">0x57</span>, <span class="hljs-number">0x56</span>, <span class="hljs-number">0x6C</span>, <span class="hljs-number">0x70</span>, <span class="hljs-number">0x44</span>,<br>          <span class="hljs-number">0x27</span>, <span class="hljs-number">0x37</span>, <span class="hljs-number">0x1E</span>, <span class="hljs-number">0x3C</span>, <span class="hljs-number">0x2C</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x1F</span>, <span class="hljs-number">0x53</span>, <span class="hljs-number">0x3E</span>, <span class="hljs-number">0x6B</span>,<br>          <span class="hljs-number">0x3D</span>, <span class="hljs-number">0x3D</span>, <span class="hljs-number">0x3B</span>, <span class="hljs-number">0x32</span>, <span class="hljs-number">0x28</span>]<br><br>key = <span class="hljs-string">&#x27;~!3a@0123321@DBApp&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(data)):<br>    data[i] = <span class="hljs-built_in">chr</span>(data[i] ^ <span class="hljs-built_in">ord</span>(key[i % <span class="hljs-built_in">len</span>(key)]))<br><br><span class="hljs-comment">#print(data)</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#x27;</span>.join(data))<br></code></pre></td></tr></table></figure><p><img src="/../images/image-20231201093625858.png" alt="image-20231201093625858"></p><p>所以flag{N0_M0re_Free_Bugs}</p><p><img src="/../images/image-20231201093713047.png" alt="image-20231201093713047"></p><h1 id="SWPUCTF-2021-新生赛-fakebase"><a href="#SWPUCTF-2021-新生赛-fakebase" class="headerlink" title="[SWPUCTF 2021 新生赛]fakebase"></a>[SWPUCTF 2021 新生赛]fakebase</h1><p>：python 取余逆向分析</p><p>打开代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python">flag = <span class="hljs-string">&#x27;xxxxxxxxxxxxxxxxxxx&#x27;</span><br>s_box = <span class="hljs-string">&#x27;qwertyuiopasdfghjkzxcvb123456#$&#x27;</span><br>tmp = <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> flag:<br>    tmp += <span class="hljs-built_in">str</span>(<span class="hljs-built_in">bin</span>(<span class="hljs-built_in">ord</span>(i)))[<span class="hljs-number">2</span>:].zfill(<span class="hljs-number">8</span>)    <span class="hljs-comment">#Python zfill() 方法返回指定长度的字符串，原字符串右对齐，前面填充0。</span><br><span class="hljs-comment"># #将flag中每个字符分别转化为十进制ASCII值，再将ASCII值转化为二进制字符串（8位），不够的左边补0，再连接起来赋给tmp</span><br>b1 = <span class="hljs-built_in">int</span>(tmp,<span class="hljs-number">2</span>)   <span class="hljs-comment">#将二进制tmp转化为十进制整型</span><br>s = <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">while</span> b1//<span class="hljs-number">31</span> != <span class="hljs-number">0</span>:  <span class="hljs-comment"># 当b1不能被31整除时</span><br>    s += s_box[b1%<span class="hljs-number">31</span>] <span class="hljs-comment"># s取s_box下标为余数的字符</span><br>    b1 = b1//<span class="hljs-number">31</span>   <span class="hljs-comment">#取整</span><br><br><span class="hljs-built_in">print</span>(s)<br><br><span class="hljs-comment"># s = u#k4ggia61egegzjuqz12jhfspfkay</span><br></code></pre></td></tr></table></figure><p>所以就是逆向还原flag</p><h2 id="解法一："><a href="#解法一：" class="headerlink" title="解法一："></a>解法一：</h2><p>看一下取余运算：</p><p>​假设 a%b &#x3D; c,那么a &#x3D; b*k+c   即a&#x2F;b &#x3D; k 余 c</p><p>题目中是 b1%31 &#x3D; s_box.index  b1&#x2F;31 &#x3D; b1</p><p>因为是字符串转成的十进制，所以最后 一次 b1肯定小于128，也就是说 k是小于 5 的</p><p>纳直接爆破：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> libnum<br>s_box = <span class="hljs-string">&#x27;qwertyuiopasdfghjkzxcvb123456#$&#x27;</span><br>s = <span class="hljs-string">&#x27;u#k4ggia61egegzjuqz12jhfspfkay&#x27;</span><br><span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>):<br>    b1 = k<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> s[::-<span class="hljs-number">1</span>]:<span class="hljs-comment">#倒序遍历s  s_box[i]是余数</span><br>        b1 = s_box.index(i)+b1*<span class="hljs-number">31</span><br>    flag =  libnum.n2s(<span class="hljs-built_in">int</span>(b1)) <span class="hljs-comment">#十进制转化成字符，libnum.s2n --&gt; 字符转化成十进制</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;NSSCTF&#x27;</span> <span class="hljs-keyword">in</span> <span class="hljs-built_in">str</span>(flag):<br>        <span class="hljs-built_in">print</span>(flag)<br></code></pre></td></tr></table></figure><p>最后flag &#x3D; NSSCTF{WHAt_BASe31}</p><h2 id="解法二："><a href="#解法二：" class="headerlink" title="解法二："></a>解法二：</h2><p>分析代码可知：遍历flag中的字符，并且把字符对应的ASCII码变为二进制形式(因为有zfill(8)函数所以每个字符转换的二进制形式有8位)，然后变成str形式连接在一起，变为整数形式给b1。</p><p>while循环语句：如果b1&#x2F;&#x2F;31!&#x3D;0，则把s_box中对应的b1%31下标的字符给s串。因为有取余运算，所以不能准确知道b1&#x2F;&#x2F;31的商是多少，所以要爆破</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python">s_box = <span class="hljs-string">&#x27;qwertyuiopasdfghjkzxcvb123456#$&#x27;</span><br>s = <span class="hljs-string">&#x27;u#k4ggia61egegzjuqz12jhfspfkay&#x27;</span><br><span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">31</span>):<br>    tmp = j<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> s[::-<span class="hljs-number">1</span>]:<span class="hljs-comment">#倒序遍历s  s_box[i]是余数</span><br>        tmp = s_box.index(i)+tmp*<span class="hljs-number">31</span><br>    tmp = <span class="hljs-built_in">str</span>(<span class="hljs-built_in">bin</span>(tmp)[<span class="hljs-number">2</span>:])<br>    tmp = tmp.zfill((<span class="hljs-built_in">len</span>(tmp)//<span class="hljs-number">8</span>+<span class="hljs-number">1</span>)*<span class="hljs-number">8</span>)<br>    flag = <span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-built_in">len</span>(tmp),<span class="hljs-number">8</span>):<br>        flag += <span class="hljs-built_in">chr</span>(<span class="hljs-built_in">int</span>(tmp[i:i+<span class="hljs-number">8</span>],<span class="hljs-number">2</span>))<br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;NSSCTF&#x27;</span> <span class="hljs-keyword">in</span> flag:<br>        <span class="hljs-built_in">print</span>(flag)<br></code></pre></td></tr></table></figure><h1 id="密码学-Base编码"><a href="#密码学-Base编码" class="headerlink" title="密码学_Base编码"></a>密码学_Base编码</h1><p>等待更新</p><h1 id="WUSTCTF-2020-level3"><a href="#WUSTCTF-2020-level3" class="headerlink" title="[WUSTCTF 2020]level3"></a>[WUSTCTF 2020]level3</h1><p>1、查壳</p><p><img src="/../images/image-20231223163008862.png" alt="image-20231223163008862"></p><p>64位无壳</p><p>2、拖到IDA</p><p><img src="/../images/image-20231223163056750.png" alt="image-20231223163056750"></p><p>输入部分涉及随机数，不重要，关键在base64_encode()函数</p><p>跟进去</p><p><img src="/../images/image-20231223163209845.png" alt="image-20231223163209845"></p><p>发现是正常base64加密</p><p>看下base64_encode看下表有没有被修改</p><p>跟进去发现没有，那把加密后的</p><p>d2G0ZjLwHjS7DmOzZAY0X2lzX3CoZV9zdNOydO9vZl9yZXZlcnGlfD&#x3D;&#x3D;</p><p>解密，发现是一坨屎</p><p><img src="/../images/image-20231223163443428.png" alt="image-20231223163443428"></p><p>猜测一下有可能换表了，但是这种操作我也是第一次见，直接看下表的交叉引用</p><p><img src="/../images/image-20231223163716941.png" alt="image-20231223163716941"></p><p>发现还有一个函数0_0LookAtYou也使用了表，跟进去</p><p><img src="/../images/image-20231223174828208.png" alt="image-20231223174828208"></p><p>果然换表操作</p><p>python写个脚本模拟一下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">base64 = <span class="hljs-string">&#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&#x27;</span><br>base64 = <span class="hljs-built_in">list</span>(base64)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br>    v1 = base64[i]<br>    base64[i] = base64[<span class="hljs-number">19</span> - i]<br>    result = <span class="hljs-number">19</span> - i<br>    base64[result] = v1<br>base64 = <span class="hljs-string">&#x27;&#x27;</span>.join(base64)<br><span class="hljs-built_in">print</span>(base64)<br></code></pre></td></tr></table></figure><p>得到新表</p><p>TSRQPONMLKJIHGFEDCBAUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+&#x2F;</p><p>换表后解密得到flag:</p><p>wctf2020{Base64_is_the_start_of_reverse}</p><h2 id="base64解密-MoeCTF-2022-Base"><a href="#base64解密-MoeCTF-2022-Base" class="headerlink" title="base64解密([MoeCTF 2022]Base)"></a>base64解密([MoeCTF 2022]Base)</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//base64_char =&#x27;abcdefghijklmnopqrstuvwxyz0123456789+/ABCDEFGHIJKLMNOPQRSTUVWXYZ&#x27;</span><br><span class="hljs-comment">//base64 = &#x27;1wX/yRrA4RfR2wj72Qv52x3L5qa=&#x27;</span><br><span class="hljs-type">int</span> __cdecl <span class="hljs-title function_">base64_decode</span><span class="hljs-params">(<span class="hljs-type">char</span> *base64, <span class="hljs-type">char</span> *originChar)</span><br>&#123;<br>  <span class="hljs-type">int</span> v2; <span class="hljs-comment">// eax</span><br>  <span class="hljs-type">int</span> v3; <span class="hljs-comment">// eax</span><br>  <span class="hljs-type">int</span> v4; <span class="hljs-comment">// eax</span><br>  <span class="hljs-type">unsigned</span> __int8 temp[<span class="hljs-number">4</span>]; <span class="hljs-comment">// [rsp+23h] [rbp-Dh] BYREF</span><br>  <span class="hljs-type">unsigned</span> __int8 k; <span class="hljs-comment">// [rsp+27h] [rbp-9h]</span><br>  <span class="hljs-type">int</span> j; <span class="hljs-comment">// [rsp+28h] [rbp-8h]</span><br>  <span class="hljs-type">int</span> i; <span class="hljs-comment">// [rsp+2Ch] [rbp-4h]</span><br><br>  i = <span class="hljs-number">0</span>;<br>  j = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">while</span> ( base64[i] )<br>  &#123;<br>    <span class="hljs-built_in">memset</span>(temp, <span class="hljs-number">255</span>, <span class="hljs-keyword">sizeof</span>(temp));<br>    <span class="hljs-keyword">for</span> ( k = <span class="hljs-number">0</span>; k &lt;= <span class="hljs-number">63u</span>; ++k )<br>    &#123;<br>      <span class="hljs-keyword">if</span> ( base64char[k] == base64[i] )<br>        temp[<span class="hljs-number">0</span>] = k;                            <span class="hljs-comment">// 27</span><br>    &#125;<br>    <span class="hljs-keyword">for</span> ( k = <span class="hljs-number">0</span>; k &lt;= <span class="hljs-number">63u</span>; ++k )<br>    &#123;<br>      <span class="hljs-keyword">if</span> ( base64char[k] == base64[i + <span class="hljs-number">1</span>] )<br>        temp[<span class="hljs-number">1</span>] = k;                            <span class="hljs-comment">// 22</span><br>    &#125;<br>    <span class="hljs-keyword">for</span> ( k = <span class="hljs-number">0</span>; k &lt;= <span class="hljs-number">63u</span>; ++k )<br>    &#123;<br>      <span class="hljs-keyword">if</span> ( base64char[k] == base64[i + <span class="hljs-number">2</span>] )<br>        temp[<span class="hljs-number">2</span>] = k;                            <span class="hljs-comment">// 61</span><br>    &#125;<br>    <span class="hljs-keyword">for</span> ( k = <span class="hljs-number">0</span>; k &lt;= <span class="hljs-number">63u</span>; ++k )<br>    &#123;<br>      <span class="hljs-keyword">if</span> ( base64char[k] == base64[i + <span class="hljs-number">3</span>] )<br>        temp[<span class="hljs-number">3</span>] = k;                            <span class="hljs-comment">// 37</span><br>    &#125;<br>    v2 = j++;<br>    originChar[v2] = (temp[<span class="hljs-number">1</span>] &gt;&gt; <span class="hljs-number">4</span>) &amp; <span class="hljs-number">3</span> | (<span class="hljs-number">4</span> * temp[<span class="hljs-number">0</span>]);<br>    <span class="hljs-keyword">if</span> ( base64[i + <span class="hljs-number">2</span>] == <span class="hljs-number">61</span> )<br>      <span class="hljs-keyword">break</span>;<br>    v3 = j++;<br>    originChar[v3] = (temp[<span class="hljs-number">2</span>] &gt;&gt; <span class="hljs-number">2</span>) &amp; <span class="hljs-number">0xF</span> | (<span class="hljs-number">16</span> * temp[<span class="hljs-number">1</span>]);<br>    <span class="hljs-keyword">if</span> ( base64[i + <span class="hljs-number">3</span>] == <span class="hljs-number">61</span> )<br>      <span class="hljs-keyword">break</span>;<br>    v4 = j++;<br>    originChar[v4] = temp[<span class="hljs-number">3</span>] &amp; <span class="hljs-number">0x3F</span> | (temp[<span class="hljs-number">2</span>] &lt;&lt; <span class="hljs-number">6</span>);<br>    i += <span class="hljs-number">4</span>;<br>  &#125;<br>  <span class="hljs-keyword">return</span> j;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="HGAME-2023-week1-encode"><a href="#HGAME-2023-week1-encode" class="headerlink" title="[HGAME 2023 week1]encode"></a>[HGAME 2023 week1]encode</h1><p>1、查壳</p><p><img src="/../images/image-20231224163800811.png" alt="image-20231224163800811"></p><p>32位无壳</p><p>2、拖到IDA</p><p>进主函数，再识别汇编</p><p><img src="/../images/image-20231224163913963.png" alt="image-20231224163913963"></p><p>发现这题逻辑很简单，就是将输入的50个字节，每个字节低4位和高4位切开，放到新的数组里，再将新的数组和某一数组比较</p><p>所以先确定比较的数组dword_40300</p><p><img src="/../images/image-20231224164129633.png" alt="image-20231224164129633"></p><p>可以看出很长，</p><p>这里回顾一下IDA的快捷键D:<strong>解释光标处的地址为数据，每按一次将会转换这个地址的数据长度</strong></p><p>关于 db、dw、dd</p><p>db定义字节类型变量，一个字节数据占1个字节单元，读完一个，偏移量加1</p><p>dw定义字类型变量，一个字数据占2个字节单元，读完一个，偏移量加2</p><p>dd定义双字类型变量，一个双字数据占4个字节单元，读完一个，偏移量加4</p><p>光标停在数据第一行，鼠标右击，选择array</p><p><img src="/../images/image-20231224164514166.png" alt="image-20231224164514166"></p><p>生成数组：</p><p><img src="/../images/image-20231224164607859.png" alt="image-20231224164607859"></p><p>选中数据 shift+E导出数据;</p><p>因为我们要取dword,所以选择initialized C variable(可以观察底下预览)</p><p><img src="/../images/image-20231224164715483.png" alt="image-20231224164715483"></p><p>导出后，写个脚本逆向操作就行了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python">data = [<span class="hljs-number">8</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>,    <span class="hljs-number">6</span>,    <span class="hljs-number">1</span>, <span class="hljs-number">6</span>,    <span class="hljs-number">0x0D</span>, <span class="hljs-number">6</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">0x0B</span>, <span class="hljs-number">7</span>, <span class="hljs-number">5</span>,    <span class="hljs-number">6</span>, <span class="hljs-number">0x0E</span>, <span class="hljs-number">6</span>, <span class="hljs-number">3</span>,    <span class="hljs-number">6</span>, <span class="hljs-number">0x0F</span>, <span class="hljs-number">6</span>,    <span class="hljs-number">4</span>,    <span class="hljs-number">6</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>,    <span class="hljs-number">0x0F</span>,<br>        <span class="hljs-number">5</span>, <span class="hljs-number">9</span>, <span class="hljs-number">6</span>,    <span class="hljs-number">3</span>,    <span class="hljs-number">7</span>, <span class="hljs-number">0x0F</span>, <span class="hljs-number">5</span>,    <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">1</span>,    <span class="hljs-number">6</span>, <span class="hljs-number">3</span>,    <span class="hljs-number">7</span>, <span class="hljs-number">9</span>,    <span class="hljs-number">7</span>, <span class="hljs-number">0x0F</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>,    <span class="hljs-number">6</span>,    <span class="hljs-number">0x0F</span>, <span class="hljs-number">6</span>, <span class="hljs-number">2</span>, <span class="hljs-number">7</span>,    <span class="hljs-number">0x0F</span>, <span class="hljs-number">5</span>,<br>        <span class="hljs-number">1</span>, <span class="hljs-number">6</span>, <span class="hljs-number">0x0F</span>, <span class="hljs-number">5</span>,    <span class="hljs-number">2</span>, <span class="hljs-number">7</span>,    <span class="hljs-number">5</span>,    <span class="hljs-number">6</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>,    <span class="hljs-number">5</span>, <span class="hljs-number">6</span>,    <span class="hljs-number">2</span>, <span class="hljs-number">7</span>,    <span class="hljs-number">3</span>, <span class="hljs-number">7</span>,    <span class="hljs-number">5</span>, <span class="hljs-number">6</span>,    <span class="hljs-number">0x0F</span>, <span class="hljs-number">5</span>,    <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">0x0E</span>, <span class="hljs-number">6</span>,    <span class="hljs-number">7</span>,<br>        <span class="hljs-number">6</span>, <span class="hljs-number">9</span>, <span class="hljs-number">6</span>,    <span class="hljs-number">0x0E</span>, <span class="hljs-number">6</span>, <span class="hljs-number">5</span>,    <span class="hljs-number">6</span>,    <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">2</span>,    <span class="hljs-number">7</span>, <span class="hljs-number">0x0D</span>, <span class="hljs-number">7</span>, <span class="hljs-number">0</span>,    <span class="hljs-number">0</span>, <span class="hljs-number">0</span>,    <span class="hljs-number">0</span>, <span class="hljs-number">0</span>,    <span class="hljs-number">0</span>,    <span class="hljs-number">0</span>,    <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>,    <span class="hljs-number">0</span>,    <span class="hljs-number">0</span>]<br><br>flag = <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">50</span>):<br>        tmp = data[<span class="hljs-number">2</span>*i]+(data[<span class="hljs-number">2</span>*i+<span class="hljs-number">1</span>]&lt;&lt;<span class="hljs-number">4</span>)<br>        <span class="hljs-comment">#tmp = data[2*i]+(data[2*i+1]*16)</span><br>        flag += <span class="hljs-built_in">chr</span>(tmp)<br><span class="hljs-built_in">print</span>(flag)<br></code></pre></td></tr></table></figure><p>解出flag:hgame{encode_is_easy_for_a_reverse_engineer}</p><p><img src="/../images/image-20231224165023845.png" alt="image-20231224165023845"></p>]]></content>
    
    
    
    <tags>
      
      <tag>CTF_RE</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python</title>
    <link href="/2023/11/29/python/"/>
    <url>/2023/11/29/python/</url>
    
    <content type="html"><![CDATA[<h1 id="range"><a href="#range" class="headerlink" title="range()"></a><strong>range()</strong></h1><p><strong>range(start,end,step)</strong></p><p>参数说明：</p><p>1、start: 计数从 start 开始。<strong>默认是从 0 开始</strong>。例如range（5）等价于range（0， 5）;<br>2、stop: 计数到 stop 结束，<strong>但不包括 stop</strong>。例如：range（0， 5） 是[0, 1, 2, 3, 4]没有5<br>3、step：步长，<strong>默认为1</strong>。例如：range（0， 5） 等价于 range(0, 5, 1)</p><p>for i in range(5)等价于 for(int i&#x3D;0;i&lt;5;i++)</p><h1 id="ord"><a href="#ord" class="headerlink" title="ord()"></a>ord()</h1><p>ord（）函数就是用来返回单个字符的ascii值（0-255）或者unicode数值（）</p><h1 id="chr"><a href="#chr" class="headerlink" title="chr()"></a>chr()</h1><p>chr（）函数是输入一个整数【0，255】返回其对应的ascii符号</p><h1 id="‘’jion-str"><a href="#‘’jion-str" class="headerlink" title="‘’jion(str)"></a>‘’jion(str)</h1><p>“将字符串str中的每个成员以单引号内的字符分隔开再拼接成一个字符串</p><h1 id="random-getrandbits-方法"><a href="#random-getrandbits-方法" class="headerlink" title="random.getrandbits() 方法"></a>random.getrandbits() 方法</h1><p>例如</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> random<br><span class="hljs-built_in">print</span>(random.getrandbits(<span class="hljs-number">8</span>))<br></code></pre></td></tr></table></figure><p>random.getrandbits(<em>n</em>)方法返回一个指定大小 <strong>n位</strong>（以位为单位）的整数。必需。 </p><h1 id="MD5加密"><a href="#MD5加密" class="headerlink" title="MD5加密"></a>MD5加密</h1><p>需要使用hashlib库</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> hashlib<br><span class="hljs-built_in">str</span> = <span class="hljs-string">&#x27;123&#x27;</span><br><br>m = hashlib.md5(<span class="hljs-built_in">str</span>.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)) <span class="hljs-comment">#创建md5对象</span><br>m.hexdigest()<span class="hljs-comment">#md5加密</span><br><span class="hljs-comment"># 或者直接一步到位 print(hashlib.md5(str).hexdigest)</span><br></code></pre></td></tr></table></figure><h1 id="Z3求线性方程组的解"><a href="#Z3求线性方程组的解" class="headerlink" title="Z3求线性方程组的解"></a>Z3求线性方程组的解</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> z3 <span class="hljs-keyword">import</span> *<br>a1 = <span class="hljs-built_in">int</span>(<span class="hljs-string">&#x27;a1&#x27;</span>)<span class="hljs-comment">#创建一个整型变量</span><br><span class="hljs-comment"># 实数变量用 Real()</span><br><span class="hljs-comment"># 创建多个变量用  x,y,z = Ints(&#x27;x y z&#x27;)</span><br>s = Solver() <span class="hljs-comment">#创建约束求解器</span><br>constranits = [约束]<span class="hljs-comment">#写出约束</span><br>s.add(constraints)<span class="hljs-comment">#添加约束</span><br><span class="hljs-keyword">if</span> s.check() == sat:<span class="hljs-comment">#如果有解</span><br>    <span class="hljs-built_in">print</span>(s.model())<span class="hljs-comment">#打印结果</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>angr_ctf</title>
    <link href="/2023/11/17/angr-ctf/"/>
    <url>/2023/11/17/angr-ctf/</url>
    
    <content type="html"><![CDATA[<h1 id="angr-的项目地址"><a href="#angr-的项目地址" class="headerlink" title="angr 的项目地址"></a>angr 的项目地址</h1><p><a href="https://github.com/jakespringer/angr_ctf">https://github.com/jakespringer/angr_ctf</a></p><h1 id="angr实战"><a href="#angr实战" class="headerlink" title="angr实战"></a>angr实战</h1><h2 id="00"><a href="#00" class="headerlink" title="00"></a>00</h2><p>拖到IDA</p><p><img src="/../images/image-20231117140415445.png" alt="image-20231117140415445"></p><p>就是输入正确的指令才能通关</p><p>这次试一下用angr来解题</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs shell">goahead@DESKTOP-8KORQ75:/mnt/d/CTF/angr/angr_ctf-master/dist$ workon angr<br>(angr) goahead@DESKTOP-8KORQ75:/mnt/d/CTF/angr/angr_ctf-master/dist$ python<br>Python 3.6.9 (default, Mar 10 2023, 16:46:00)<br>[GCC 8.4.0] on linux<br>Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.<br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; import angr</span><br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; p = angr.Project(<span class="hljs-string">&quot;./00_angr_find&quot;</span>)<span class="hljs-comment">#创建一个工程名</span></span><br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; init_state = p.factory.entry_state()<span class="hljs-comment">#给它初始化状态为从入口点开始</span></span><br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; sm = p.factory.simulation_manager(init_state)<span class="hljs-comment">#让angr执行</span></span><br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; sm.explore(find = 0x08048678)<span class="hljs-comment"># 给它探索的目的地，也就是IDA中分析到的“good job”</span></span><br>WARNING | 2023-11-17 14:12:29,194 | angr.storage.memory_mixins.default_filler_mixin | The program is accessing register with an unspecified value. This could indicate unwanted behavior.<br>WARNING | 2023-11-17 14:12:29,194 | angr.storage.memory_mixins.default_filler_mixin | angr will cope with this by generating an unconstrained symbolic variable and continuing. You can resolve this by:<br>WARNING | 2023-11-17 14:12:29,195 | angr.storage.memory_mixins.default_filler_mixin | 1) setting a value to the initial state<br>WARNING | 2023-11-17 14:12:29,195 | angr.storage.memory_mixins.default_filler_mixin | 2) adding the state option ZERO_FILL_UNCONSTRAINED_&#123;MEMORY,REGISTERS&#125;, to make unknown regions hold null<br>WARNING | 2023-11-17 14:12:29,195 | angr.storage.memory_mixins.default_filler_mixin | 3) adding the state option SYMBOL_FILL_UNCONSTRAINED_&#123;MEMORY,REGISTERS&#125;, to suppress these messages.<br>WARNING | 2023-11-17 14:12:29,195 | angr.storage.memory_mixins.default_filler_mixin | Filling register edi with 4 unconstrained bytes referenced from 0x80486b1 (__libc_csu_init+0x1 in 00_angr_find (0x80486b1))<br>WARNING | 2023-11-17 14:12:29,196 | angr.storage.memory_mixins.default_filler_mixin | Filling register ebx with 4 unconstrained bytes referenced from 0x80486b3 (__libc_csu_init+0x3 in 00_angr_find (0x80486b3))<br>WARNING | 2023-11-17 14:12:30,087 | angr.storage.memory_mixins.default_filler_mixin | Filling memory at 0x7ffeff60 with 4 unconstrained bytes referenced from 0x817e690 (strcmp+0x0 in libc.so.6 (0x7e690))<br>&lt;SimulationManager with 1 active, 16 deadended, 1 found&gt;<br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; sm.found[0]</span><br>&lt;SimState @ 0x8048678&gt;<br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; found_state = sm.found[0]</span><br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; found_state.posix.dumps(0)</span><br>b&#x27;JXWVXRKX&#x27;<br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; found_state.posix.dumps(1)</span><br>b&#x27;Enter the password: &#x27;<br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">#  state.posix.dumps (0) 代表该状态程序的所有输入， state.posix.dumps (1) 代表该状态程序的所有输出。</span></span><br></code></pre></td></tr></table></figure><p>所以输入JXWVXRKX就可以通关</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">goahead@DESKTOP-8KORQ75:/mnt/d/CTF/angr/angr_ctf-master/dist$ ./00_angr_find<br>Enter the password: JXWVXRKX<br>Good Job.<br></code></pre></td></tr></table></figure><h2 id="常规解法"><a href="#常规解法" class="headerlink" title="常规解法"></a>常规解法</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">letter_list = [<span class="hljs-string">&#x27;J&#x27;</span>, <span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-string">&#x27;C&#x27;</span>, <span class="hljs-string">&#x27;E&#x27;</span>, <span class="hljs-string">&#x27;J&#x27;</span>, <span class="hljs-string">&#x27;G&#x27;</span>, <span class="hljs-string">&#x27;C&#x27;</span>, <span class="hljs-string">&#x27;S&#x27;</span>]<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">reverse_operation</span>(<span class="hljs-params">value, i</span>):<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">chr</span>((value - <span class="hljs-number">65</span> - <span class="hljs-number">3</span> * i) % <span class="hljs-number">26</span> + <span class="hljs-number">65</span>)<br><br><span class="hljs-comment"># 反向计算得到字母数组 s[8]</span><br>s = [reverse_operation(<span class="hljs-built_in">ord</span>(letter), i) <span class="hljs-keyword">for</span> i, letter <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(letter_list)]<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;原始字母数组:&quot;</span>, letter_list)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;通过反向运算得到的字母数组:&quot;</span>, <span class="hljs-string">&#x27;&#x27;</span>.join(s))<br></code></pre></td></tr></table></figure><h2 id="01"><a href="#01" class="headerlink" title="01"></a>01</h2><p>拖到IDA,看到一个函数maybe_good,打开</p><p><img src="/../images/image-20231117150539723.png" alt="image-20231117150539723"></p><p>很显然，我们想要的就是0x080485E0</p><p>执行程序</p><p><img src="/../images/image-20231117150731058.png" alt="image-20231117150731058"></p><p>发现和00类似</p><p>直接使用angr</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs shell">(angr) goahead@DESKTOP-8KORQ75:/mnt/d/CTF/angr/angr_ctf-master/dist$ workon angr<br>(angr) goahead@DESKTOP-8KORQ75:/mnt/d/CTF/angr/angr_ctf-master/dist$ python<br>Python 3.6.9 (default, Mar 10 2023, 16:46:00)<br>[GCC 8.4.0] on linux<br>Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.<br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; import angr</span><br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; p = p.angr.Project(<span class="hljs-string">&quot;./01_angr_avoid&quot;</span>)</span><br>Traceback (most recent call last):<br>  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;<br>NameError: name &#x27;p&#x27; is not defined<br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; p = angr.Project(<span class="hljs-string">&quot;./01_angr_avoid&quot;</span>)</span><br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; init_state=p.factory.entry_state()</span><br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; sm = p.factory.simulation_manager(init_state)</span><br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; sm.explore(find=0x080485E0,avoid=0x080485F2) <span class="hljs-comment">#find的值就是要让angr到达的地址值，而avoid的值是不让angr到达的地址值</span></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; found_state = sm.found[0]</span><br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; found_state.posix.dumps(0)</span><br>b&#x27;HUJOZMYS&#x27;<br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; found_state.posix.dumps(1)</span><br>b&#x27;Enter the password: &#x27;<br></code></pre></td></tr></table></figure><p>故输入HUJOZMYS即可通关</p><p><img src="/../images/image-20231117153253889.png" alt="image-20231117153253889"></p><h2 id="02"><a href="#02" class="headerlink" title="02"></a>02</h2><p>观察有多个地方输出“Good job”</p><p>使用脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># It is very useful to be able to search for a state that reaches a certain</span><br><span class="hljs-comment"># instruction. However, in some cases, you may not know the address of the</span><br><span class="hljs-comment"># specific instruction you want to reach (or perhaps there is no single</span><br><span class="hljs-comment"># instruction goal.) In this challenge, you don&#x27;t know which instruction</span><br><span class="hljs-comment"># grants you success. Instead, you just know that you want to find a state where</span><br><span class="hljs-comment"># the binary prints &quot;Good Job.&quot;</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># Angr is powerful in that it allows you to search for a states that meets an</span><br><span class="hljs-comment"># arbitrary condition that you specify in Python, using a predicate you define</span><br><span class="hljs-comment"># as a function that takes a state and returns True if you have found what you</span><br><span class="hljs-comment"># are looking for, and False otherwise.</span><br><br><span class="hljs-keyword">import</span> angr<br><span class="hljs-keyword">import</span> sys<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>(<span class="hljs-params">argv</span>):<br>  path_to_binary = <span class="hljs-string">&quot;./02_angr_find_condition&quot;</span><br>  project = angr.Project(path_to_binary)<br>  initial_state = project.factory.entry_state()<br>  simulation = project.factory.simgr(initial_state)<br><br>  <span class="hljs-keyword">def</span> <span class="hljs-title function_">is_successful</span>(<span class="hljs-params">state</span>):<span class="hljs-comment">#判断当前状态能否使程序输出 Good Job，然后返回 True or False，</span><br>    stdout_output = state.posix.dumps(sys.stdout.fileno()) <span class="hljs-comment">#把标准输出赋值给 stdout_output ，那不是字符串而是一个bytes 对象</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-string">b&#x27;Good Job.&#x27;</span> <span class="hljs-keyword">in</span> stdout_output:  <span class="hljs-comment">#  要使用 b&#x27;Good Job.&#x27; 替代 Good Job. 检查是否输出了字符串 Good Job.</span><br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span>  <span class="hljs-comment"># (3)</span><br>    <span class="hljs-keyword">else</span>:<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br>  <span class="hljs-keyword">def</span> <span class="hljs-title function_">should_abort</span>(<span class="hljs-params">state</span>):<br>    stdout_output = state.posix.dumps(sys.stdout.fileno())<br>    <span class="hljs-keyword">if</span> <span class="hljs-string">b&#x27;Try again.&#x27;</span> <span class="hljs-keyword">in</span> stdout_output:<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>    <span class="hljs-keyword">else</span>:<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br>  simulation.explore(find=is_successful, avoid=should_abort)<br><br>  <span class="hljs-keyword">if</span> simulation.found:<br>    solution_state = simulation.found[<span class="hljs-number">0</span>]<br>    <span class="hljs-built_in">print</span>(solution_state.posix.dumps(sys.stdin.fileno()))<br>  <span class="hljs-keyword">else</span>:<br>    <span class="hljs-keyword">raise</span> Exception(<span class="hljs-string">&#x27;Could not find the solution&#x27;</span>)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>  main(sys.argv)<br><br></code></pre></td></tr></table></figure><p>输出结果为：b’HETOBRCU’</p><h2 id="03-寄存器符号化"><a href="#03-寄存器符号化" class="headerlink" title="03 寄存器符号化"></a>03 寄存器符号化</h2><p>发现要输入多个参数（3个）</p><p><img src="/../images/image-20231122131953858.png" alt="image-20231122131953858"></p><p>则我们直接跳过输入，让angr直接从0x8048980 处开始执行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">start_address = <span class="hljs-number">0x08048980</span> <span class="hljs-comment"># :integer (probably hexadecimal)</span><br>initial_state = project.factory.blank_state(addr=start_address)<br><span class="hljs-comment">#这次使用 blank_state() 方法替代了 entry_state() 。通过把 addr=start_address 传递给 blank_state() </span><br></code></pre></td></tr></table></figure><p>观察反汇编，使用eax,ebx,edx,进行传参，故位数为32位</p><p>用 <strong>claripy</strong> 通过 <strong>BVS()</strong> 方法生成三个位向量。这个方法需要两个参数：第一个参数表示符号名，第二个参数表示这个符号的长度 单位bit。因为符号值都保存在寄存器里，并且寄存器都是32位的，所以位向量的大小也需要是32位的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">password0_size_in_bits = <span class="hljs-number">32</span> <span class="hljs-comment"># :integer</span><br>password0 = claripy.BVS(<span class="hljs-string">&#x27;password0&#x27;</span>, password0_size_in_bits)<br>password1 = claripy.BVS(<span class="hljs-string">&#x27;password1&#x27;</span>, password0_size_in_bits)<br>password2 = claripy.BVS(<span class="hljs-string">&#x27;password2&#x27;</span>, password0_size_in_bits)<br></code></pre></td></tr></table></figure><p>现在我们已经创建了三个符号位向量，现在就把他们赋值给 <code>eax</code>,<code>ebx</code>,<code>edx</code>。我准备修改先前创建的状态 <strong>initial_state</strong>，并更新寄存器的内容，幸运的是，angr提供了一个非常智能的方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">initial_state.regs.eax = password0<br>initial_state.regs.ebx = password1<br>initial_state.regs.edx = password2<br></code></pre></td></tr></table></figure><p>现在我们准备跟以前一样定义 <code>find</code> , <code>avoid</code> 状态。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python">simulation = project.factory.simgr(initial_state) <br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">is_successful</span>(<span class="hljs-params">state</span>):<br>  stdout_output = state.posix.dumps(sys.stdout.fileno())<br>  <span class="hljs-keyword">if</span> <span class="hljs-string">b&#x27;Good Job.\n&#x27;</span> <span class="hljs-keyword">in</span> stdout_output:<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>  <span class="hljs-keyword">else</span>: <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">should_abort</span>(<span class="hljs-params">state</span>):<br>  stdout_output = state.posix.dumps(sys.stdout.fileno())<br>  <span class="hljs-keyword">if</span> <span class="hljs-string">b&#x27;Try again.\n&#x27;</span> <span class="hljs-keyword">in</span>  stdout_output:<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>  <span class="hljs-keyword">else</span>: <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span> <br><br>simulation.explore(find=is_successful, avoid=should_abort)<br></code></pre></td></tr></table></figure><p>下面就是打印解了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> simulation.found:<br>    solution_state = simulation.found[<span class="hljs-number">0</span>]<br><br>    <span class="hljs-comment"># Solve for the symbolic values. If there are multiple solutions, we only</span><br>    <span class="hljs-comment"># care about one, so we can use eval, which returns any (but only one)</span><br>    <span class="hljs-comment"># solution. Pass eval the bitvector you want to solve for.</span><br>    <span class="hljs-comment"># (!) <span class="hljs-doctag">NOTE:</span> state.se is deprecated, use state.solver (it&#x27;s exactly the same).</span><br>    solution0 = <span class="hljs-built_in">format</span>(solution_state.solver.<span class="hljs-built_in">eval</span>(password0), <span class="hljs-string">&#x27;x&#x27;</span>) <br>    <span class="hljs-comment"># 我们根据注入的三个符号值调用求解引擎的 eval()方法； format() 方法格式化解并去掉16进制的 “0x”。</span><br>    solution1 = <span class="hljs-built_in">format</span>(solution_state.solver.<span class="hljs-built_in">eval</span>(password1), <span class="hljs-string">&#x27;x&#x27;</span>)<br>    solution2 = <span class="hljs-built_in">format</span>(solution_state.solver.<span class="hljs-built_in">eval</span>(password2), <span class="hljs-string">&#x27;x&#x27;</span>)<br><br>    <span class="hljs-comment"># Aggregate and format the solutions you computed above, and then print</span><br>    <span class="hljs-comment"># the full string. Pay attention to the order of the integers, and the</span><br>    <span class="hljs-comment"># expected base (decimal, octal, hexadecimal, etc).</span><br>    <br>    <span class="hljs-comment">#重组3个解，组合为一个字符串，然后打印出来。</span><br>    solution = solution0 + <span class="hljs-string">&quot; &quot;</span> + solution1 + <span class="hljs-string">&quot; &quot;</span> + solution2 <span class="hljs-comment"># (2)</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[+] Success! Solution is: &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(solution))<br>  <span class="hljs-keyword">else</span>:<br>    <span class="hljs-keyword">raise</span> Exception(<span class="hljs-string">&#x27;Could not find the solution&#x27;</span>)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>  main(sys.argv)<br></code></pre></td></tr></table></figure><h2 id="04-符号化栈"><a href="#04-符号化栈" class="headerlink" title="04 符号化栈"></a>04 符号化栈</h2><h3 id="手搓一下"><a href="#手搓一下" class="headerlink" title="手搓一下"></a>手搓一下</h3><p>F5反汇编进入 handle_user()函数</p><p><img src="/../images/image-20231122142222044.png" alt="image-20231122142222044"></p><p>发现只要将输入的两个数分别与另外两个数进行异或操作，再与两个数比较就能得到正确答案</p><p>因此，只需将最终要比较的数分别和那两个数异或就能得到输入（两次异或等于不操作）</p><h3 id="使用angr"><a href="#使用angr" class="headerlink" title="使用angr"></a>使用angr</h3><p><img src="/../images/image-20231122193723533.png" alt="image-20231122193723533"></p><p>因为我们要跳过scanf,故call scanf 下面的add esp,10h（平衡堆栈）我们也不用执行</p><p>所以，从下一行 0x08048697开始执行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> angr<br><span class="hljs-keyword">import</span> claripy<br><span class="hljs-keyword">import</span> sys<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>(<span class="hljs-params">argv</span>):<br>    bin_path = <span class="hljs-string">&quot;./04_angr_symbolic_stack&quot;</span><br>    p = angr.Project(bin_path)<br>    <br>    start_addr = <span class="hljs-number">0x08048697</span><br>    init_state = p.factory.blank_state(addr = start_addr)<br></code></pre></td></tr></table></figure><p>用 <strong>claripy</strong> 通过 <strong>BVS()</strong> 方法生成两个个位向量。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs python">    <span class="hljs-comment">#ebp = esp</span><br>    init_state.regs.esp = init_state.reg.esp<br>    <br>    password0 = claripy.BVS(<span class="hljs-string">&#x27;password0&#x27;</span>,<span class="hljs-number">32</span>)<br>    password1= claripy.BVS(<span class="hljs-string">&#x27;password0&#x27;</span>,<span class="hljs-number">32</span>)<br>    <br>    <span class="hljs-comment">#因为他push 两个参数为 [ebp-0Ch]和[ebp-10h]，而栈的地址是向下增长的</span><br> <span class="hljs-comment">#一个参数大小为4字节，所以padding 的位置为0x0C-4 = 0x08</span><br>    padding_length_in_bytes = <span class="hljs-number">0x08</span><br>    <span class="hljs-comment">#提升堆栈</span><br>    initial_state.regs.esp -= padding_length_in_bytes<br>    <span class="hljs-comment">#push password0</span><br>  initial_state.stack_push(password0)  <br>    <span class="hljs-comment">#push password1</span><br>  initial_state.stack_push(password1)<br>    <br>    sm = p.factory.simgr(init_state)<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">is_successful</span>(<span class="hljs-params">state</span>):<br>        stdout_output = state.posix.dumps(sys.stdout.fileno())<br>        <span class="hljs-keyword">if</span> <span class="hljs-string">b&#x27;Good Job&#x27;</span> <span class="hljs-keyword">in</span> stdout_output:<br>          <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>        <span class="hljs-keyword">else</span>:<br>          <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">should_abort</span>(<span class="hljs-params">state</span>):<br>        stdout_output = state.posix.dumps(sys.stdout.fileno())<br>        <span class="hljs-keyword">if</span> <span class="hljs-string">b&#x27;Try again&#x27;</span> <span class="hljs-keyword">in</span> stdout_output:<br>          <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>        <span class="hljs-keyword">else</span>:<br>          <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>    <br>    simulation.explore(find=is_successful, avoid=should_abort)<br>    <br>      <span class="hljs-keyword">if</span> simulation.found:<br>      solution_state = simulation.found[<span class="hljs-number">0</span>]  <br>        solution0 = solution_state.se.<span class="hljs-built_in">eval</span>(password0)<br>    solution1 = solution_state.se.<span class="hljs-built_in">eval</span>(password1)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Solution is:&#123;&#125; &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(solution0,solution1))<br>     <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">raise</span> Exception<span class="hljs-string">&quot;Solution not found&quot;</span><br>    <br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main(sys.argv)<br></code></pre></td></tr></table></figure><p>答案输入：</p><p>1704280884 -1912626145</p><p>或者</p><p>1704280884   2382341151</p><p>都对！因为将-1912626145转化为无符号整型就是2382341151（python实现将有符号整型a转为无符号整型：print(a+2**32)）</p><h2 id="05-符号化内存"><a href="#05-符号化内存" class="headerlink" title="05 符号化内存"></a>05 符号化内存</h2><p>找到scanf附近，发现需要输入4个变量，并且这4个变量都是通过push内存直接传入的</p><p><img src="/../images/image-20231123163800289.png" alt="image-20231123163800289"></p><p>因此，本次得到目标是符号化内存</p><p>首先，看一下从哪个地址开始执行吧，因为无需调用scanf函数，故他的堆栈平衡也不用操作，</p><p>所以直接从0x08048601开始执行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">start_address = <span class="hljs-number">0x08048601</span><br>init_state = project.factory.blank_state(addr = start_address)<br></code></pre></td></tr></table></figure><p>用 <strong>claripy</strong> 通过 <strong>BVS()</strong> 方法生成四个位向量。由于scanf(“%8s %8s %8s %8s”)，所以每个参数64位</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">password0 = claripy.BVS(<span class="hljs-string">&#x27;password0&#x27;</span>,<span class="hljs-number">64</span>)<br>password1 = claripy.BVS(<span class="hljs-string">&#x27;password1&#x27;</span>,<span class="hljs-number">64</span>)<br>password2 = claripy.BVS(<span class="hljs-string">&#x27;password2&#x27;</span>,<span class="hljs-number">64</span>)<br>password3 = claripy.BVS(<span class="hljs-string">&#x27;password3&#x27;</span>,<span class="hljs-number">64</span>)<br></code></pre></td></tr></table></figure><p>把内存单元的地址值和变量之间进行一定关系的绑定</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">password0_address = <span class="hljs-number">0x0A1BA1C0</span><br>password1_address = <span class="hljs-number">0x0A1BA1C8</span><br>password2_address = <span class="hljs-number">0x0A1BA1D0</span><br>password3_address = <span class="hljs-number">0x0A1BA1D8</span><br><br>initial_state.memory.store(password0_address, password0)<br>initial_state.memory.store(password1_address, password1)<br>initial_state.memory.store(password2_address, password2)<br>initial_state.memory.store(password3_address, password3)<br></code></pre></td></tr></table></figure><p>执行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">simulation = project.factory.simgr(initial_state)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">is_successful</span>(<span class="hljs-params">state</span>):<br>  stdout_output = state.posix.dumps(sys.stdout.fileno())<br>  <span class="hljs-keyword">if</span> <span class="hljs-string">b&#x27;Good Job&#x27;</span> <span class="hljs-keyword">in</span> stdout_output:<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>  <span class="hljs-keyword">else</span>:<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">should_abort</span>(<span class="hljs-params">state</span>):<br>  stdout_output = state.posix.dumps(sys.stdout.fileno())<br>  <span class="hljs-keyword">if</span> <span class="hljs-string">b&#x27;Try again&#x27;</span> <span class="hljs-keyword">in</span> stdout_output:<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>  <span class="hljs-keyword">else</span>:<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br>simulation.explore(find=is_successful, avoid=should_abort)<br><br><span class="hljs-keyword">if</span> simulation.found:<br>  solution_state = simulation.found[<span class="hljs-number">0</span>]<br><br>  solution0 = solution_state.se.<span class="hljs-built_in">eval</span>(password0, cast_to=<span class="hljs-built_in">bytes</span>)<br>  solution1 = solution_state.se.<span class="hljs-built_in">eval</span>(password1, cast_to=<span class="hljs-built_in">bytes</span>)<br>  solution2 = solution_state.se.<span class="hljs-built_in">eval</span>(password2, cast_to=<span class="hljs-built_in">bytes</span>)<br>  solution3 = solution_state.se.<span class="hljs-built_in">eval</span>(password3, cast_to=<span class="hljs-built_in">bytes</span>)<br> <span class="hljs-comment">#将b&#x27;NAXTHGNR&#x27; b&#x27;JVSFTPWE&#x27; b&#x27;LMGAUHWC&#x27; b&#x27;XMDCPALU&#x27; 转化为 NAXTHGNR JVSFTPWE LMGAUHWC XMDCPALU</span><br>  <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Solution is: &#123;&#125; &#123;&#125; &#123;&#125; &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(solution0.decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>),solution1.decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>),solution2.decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>),solution3.decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)))<br>  <span class="hljs-keyword">else</span>:<br>    <span class="hljs-keyword">raise</span> Exception(<span class="hljs-string">&#x27;Could not find the solution&#x27;</span>)<br></code></pre></td></tr></table></figure><p>结果：NAXTHGNR JVSFTPWE LMGAUHWC XMDCPALU</p><h2 id="06符号化堆"><a href="#06符号化堆" class="headerlink" title="06符号化堆"></a>06符号化堆</h2><p>观察反汇编</p><p><img src="/../images/image-20231123175326510.png" alt="image-20231123175326510"></p><p>程序使用了malloc动态分配内存，故本次我们要执行符号化堆</p><p>先看下从哪开始执行</p><p><img src="/../images/image-20231123175457697.png" alt="image-20231123175457697"></p><p>不调用scanf，所以我们从0x08048699处开始执行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">start_address = <span class="hljs-number">0x08048699</span><br>initial_state = project.factory.blank_state(addr=start_address)<br></code></pre></td></tr></table></figure><p>需要两个参数，所以用 <strong>claripy</strong> 通过 <strong>BVS()</strong> 方法生成两个位向量</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">password0 = claripy.BVS(<span class="hljs-string">&#x27;password0&#x27;</span>, <span class="hljs-number">64</span>)<br>password1 = claripy.BVS(<span class="hljs-string">&#x27;password1&#x27;</span>, <span class="hljs-number">64</span>)<br></code></pre></td></tr></table></figure><p>因为malloc是随机分配地址的，所以我们直接指定地址</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">addr_esp = initial_state.regs.esp<br>fake_heap_address0 = addr_esp - <span class="hljs-number">0x100</span><br>fake_heap_address1 = addr_esp - <span class="hljs-number">0x200</span><br></code></pre></td></tr></table></figure><p>将地址和变量进行绑定，默认情况下，Angr 在内存中存储整数时采用大字节。要使用参数 endness&#x3D;project.arch.memory_endness。在 x86 架构上，这是小端序。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">pointer_to_malloc_memory_address0 = <span class="hljs-number">0x0ABCC8A4</span><br>pointer_to_malloc_memory_address1 = <span class="hljs-number">0x0ABCC8AC</span><br>initial_state.memory.store(pointer_to_malloc_memory_address0, fake_heap_address0, endness=project.arch.memory_endness)<br>initial_state.memory.store(pointer_to_malloc_memory_address1, fake_heap_address1, endness=project.arch.memory_endness)<br></code></pre></td></tr></table></figure><p>在我们的 fake_heap_address 处存储我们的符号值。查看二进制文件，确定 scanf 从 fake_heap_address 写入的偏移量。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">initial_state.memory.store(fake_heap_address0, password0)<br>initial_state.memory.store(fake_heap_address1, password1)<br></code></pre></td></tr></table></figure><p>执行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs python">simulation = project.factory.simgr(initial_state)<br><br>  <span class="hljs-keyword">def</span> <span class="hljs-title function_">is_successful</span>(<span class="hljs-params">state</span>):<br>    stdout_output = state.posix.dumps(sys.stdout.fileno())<br>    <span class="hljs-keyword">if</span> <span class="hljs-string">b&#x27;Good Job&#x27;</span> <span class="hljs-keyword">in</span> stdout_output:<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>    <span class="hljs-keyword">else</span>:<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br>  <span class="hljs-keyword">def</span> <span class="hljs-title function_">should_abort</span>(<span class="hljs-params">state</span>):<br>    stdout_output = state.posix.dumps(sys.stdout.fileno())<br>    <span class="hljs-keyword">if</span> <span class="hljs-string">b&#x27;Try again&#x27;</span> <span class="hljs-keyword">in</span> stdout_output:<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>    <span class="hljs-keyword">else</span>:<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br><br>  simulation.explore(find=is_successful, avoid=should_abort)<br><br>  <span class="hljs-keyword">if</span> simulation.found:<br>    solution_state = simulation.found[<span class="hljs-number">0</span>]<br><br>    solution0 = solution_state.se.<span class="hljs-built_in">eval</span>(password0, cast_to=<span class="hljs-built_in">bytes</span>)<br>    solution1 = solution_state.se.<span class="hljs-built_in">eval</span>(password1, cast_to=<span class="hljs-built_in">bytes</span>)<br>    <span class="hljs-comment">#solution = ???</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Solution is: &#123;&#125; &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(solution0.decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>), solution1.decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)))<br>   <span class="hljs-comment"># print(solution)</span><br>  <span class="hljs-keyword">else</span>:<br>    <span class="hljs-keyword">raise</span> Exception(<span class="hljs-string">&#x27;Could not find the solution&#x27;</span>)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>  main(sys.argv)<br></code></pre></td></tr></table></figure><p>结果是：UBDKLMBV UNOERNYS</p><h1 id="07-文件内容符号化"><a href="#07-文件内容符号化" class="headerlink" title="07 文件内容符号化"></a>07 文件内容符号化</h1><p>拖到IDA,F5一下</p><p><img src="/../images/image-20231126160856679.png" alt="image-20231126160856679"></p><p>看到文件操作，因此本次目标符号化文件内容</p><p><img src="/../images/image-20231126161055053.png" alt="image-20231126161055053"></p><p>  #起始地址我们需要在初始化文件之前（因为这里并没有符号化文件名），输入password之后,选择的是ignore_me之后，选的是0x80488D6</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">start_address = <span class="hljs-number">0x080488D6</span><br>initial_state = project.factory.blank_state(addr=start_address)<br></code></pre></td></tr></table></figure><p>给它文件名和大小</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">filename = <span class="hljs-string">&quot;OJKSQYDP.txt&quot;</span><br>file_size = <span class="hljs-number">0x40</span><br></code></pre></td></tr></table></figure><p>紧接着进行文件文本符号化</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">password = initial_state.solver.BVS(<span class="hljs-string">&quot;password&quot;</span>,file_size*<span class="hljs-number">8</span>)<br>sim_file = angr.storage.SimFile(filename,content=password,size=file_size)<br></code></pre></td></tr></table></figure><p>然后进行<strong>相应的 插入操作</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">initial_state.fs.insert(filename,sim_file)<br></code></pre></td></tr></table></figure><p>最后进行文本内容的求解：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">sm = project.factory.simulation_manager(initial_state)<br></code></pre></td></tr></table></figure><p>结果为 AZOMMMZM</p><p><img src="/../images/image-20231126161624253.png" alt="image-20231126161624253"></p>]]></content>
    
    
    
    <tags>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Paper</title>
    <link href="/2023/11/16/Paper/"/>
    <url>/2023/11/16/Paper/</url>
    
    <content type="html"><![CDATA[<h1 id="四种执行追踪（以前叫实体分析）："><a href="#四种执行追踪（以前叫实体分析）：" class="headerlink" title="四种执行追踪（以前叫实体分析）："></a>四种执行追踪（以前叫实体分析）：</h1><p>[36]J. Caballero, H. Yin, Z. Liang, and D. Song, “Polyglot: Automatic</p><p>extraction of protocol message format using dynamic binary analysis,”</p><p>in Proc. 14th ACM Conf. Comput. Commun. Security (CCS), 2007,</p><p>pp. 317–329.</p><p>[37] Z. Lin, X. Jiang, D. Xu, and X. Zhang, “Automatic protocol format</p><p>reverse engineering through context- aware monitored execution,” in</p><p>Proc. Netw. Distrib. Syst. Security Symp. (NDSS), San Diego, CA, USA,</p><ol start="2008"><li></li></ol><p>[38] P. M. Comparetti, G. Wondracek, C. Kruegel, and E. Kirda, “Prospex:</p><p>Protocol specification extraction,” in Proc. IEEE 30th Symp. Security</p><p>Privacy (SP), Berkeley, CA, USA, 2009, pp. 110–125.</p><p>[39] Z. Wang, X. Jiang, W. Cui, X. Wang, and M. Grace, “ReFormat:</p><p>Automatic reverse engineering of encrypted messages,” in Proc. 14th</p><p>Eur. Symp. Res. Comput. Security (ESORICS), 2009, pp. 200–215.</p><h1 id="既有流量追踪又有执行追踪的综述："><a href="#既有流量追踪又有执行追踪的综述：" class="headerlink" title="既有流量追踪又有执行追踪的综述："></a>既有流量追踪又有执行追踪的综述：</h1><h2 id="流量追踪：执行追踪-11：13"><a href="#流量追踪：执行追踪-11：13" class="headerlink" title="流量追踪：执行追踪 &#x3D; 11：13"></a>流量追踪：执行追踪 &#x3D; 11：13</h2><p>[9] J. Narayan, S. K. Shukla, and T. C. Clancy, “A survey of automatic</p><p>protocol reverse engineering tools,” ACM Comput. Surveys, vol. 48,</p><p>no. 3, Dec. 2015, Art. no. 40.</p><h2 id="流量追踪：执行追踪-9：17"><a href="#流量追踪：执行追踪-9：17" class="headerlink" title="流量追踪：执行追踪 &#x3D;9：17"></a>流量追踪：执行追踪 &#x3D;9：17</h2><p>J. Duchêne, C. L. Guernic, E. Alata, V. Nicomette, and M. Kaâniche,</p><p>“State of the art of network protocol reverse engineering tools,”</p><p>J. Comput. Virol. Hacking Techn., vol. 14, no. 1, pp. 53–68,</p><p>Feb. 2018.</p><h1 id="Application-based-inference"><a href="#Application-based-inference" class="headerlink" title="Application based inference"></a>Application based inference</h1><h2 id="Message-Format"><a href="#Message-Format" class="headerlink" title="Message Format:"></a>Message Format:</h2><h3 id="FFE-x86-2006"><a href="#FFE-x86-2006" class="headerlink" title="FFE&#x2F;x86:2006"></a>FFE&#x2F;x86:2006</h3><p>Lim, J., Reps, T., Liblit, B.: Extracting Output Formats from Executables. In: 13th<br>Working Conference on Reverse Engineering, 2006. WCRE ’06, pp. 167–178. IEEE,<br>Benevento, Italy (2006). DOI 10.1109&#x2F;WCRE.2006.29</p><h3 id="Replayer-2006"><a href="#Replayer-2006" class="headerlink" title="Replayer:2006"></a>Replayer:2006</h3><p>Newsome, J., Brumley, D., Franklin, J., Song, D.: Replayer: automatic protocol replay<br>by binary analysis. In: Proceedings of the 13th ACM conference on Computer and<br>communications security, CCS ’06, pp. 311–321. ACM, New York, NY, USA (2006).<br>DOI 10.1145&#x2F;1180405.1180444</p><h3 id="Polyglot-2007"><a href="#Polyglot-2007" class="headerlink" title="Polyglot:2007"></a>Polyglot:2007</h3><p>Caballero, J., Yin, H., Liang, Z., Song, D.: Polyglot: automatic extraction of protocol<br>message format using dynamic binary analysis. In: Proceedings of the 14th ACM con-<br>ference on Computer and communications security, CCS ’07, pp. 317–329. ACM, New<br>York, NY, USA (2007). DOI 10.1145&#x2F;1315245.1315286</p><h3 id="Rosetta-2007"><a href="#Rosetta-2007" class="headerlink" title="Rosetta:2007"></a>Rosetta:2007</h3><p>Caballero, J., Song, D.: Rosetta: Extracting protocol semantics using binary analysis<br>with applications to protocol replay and NAT rewriting. Technical Report CMU-CyLab-<br>07-014, Carnegie Mellon University, Pittsburgh, USA (2007)</p><h3 id="AutoFormat-2008"><a href="#AutoFormat-2008" class="headerlink" title="AutoFormat:2008"></a>AutoFormat:2008</h3><p>Lin, Z., Jiang, X., Xu, D., Zhang, X.: Automatic Protocol Format Reverse Engineer-<br>ing through Context-Aware Monitored Execution. In: Proceedings of the 15th Annual<br>Network and Distributed System Security Symposium (NDSS). Internet Society, San<br>Diego, USA (2008)</p><h3 id="Tupni-2008"><a href="#Tupni-2008" class="headerlink" title="Tupni:2008"></a>Tupni:2008</h3><p>Cui, W., Peinado, M., Chen, K., Wang, H.J., Irun-Briz, L.: Tupni: automatic reverse<br>engineering of input formats. In: Proceedings of the 15th ACM conference on Computer<br>and communications security, CCS ’08, pp. 391–402. ACM, New York, NY, USA (2008).<br>DOI 10.1145&#x2F;1455770.1455820</p><h3 id="Prospex-2008"><a href="#Prospex-2008" class="headerlink" title="Prospex:2008"></a>Prospex:2008</h3><p>Wondracek, G., Comparetti, P.M., Krgel, C., Kirda, E.: Automatic network protocol<br>analysis. In: Proceedings of the 15th Annual Network and Distributed System Security<br>Symposium (NDSS). Internet Society, San Diego, USA (2008). DOI <a href="http://www.isoc/">http://www.isoc</a>.<br>org&#x2F;isoc&#x2F;conferences&#x2F;ndss&#x2F;08&#x2F;papers&#x2F;13 automatic network protocol.pdf</p><h3 id="ConfigRE-2008"><a href="#ConfigRE-2008" class="headerlink" title="ConfigRE:2008"></a>ConfigRE:2008</h3><p>Wang, R., Wang, X., Zhang, K., Li, Z.: Towards Automatic Reverse Engineering of<br>Software Security Configurations. In: Proceedings of the 15th ACM Conference on<br>Computer and Communications Security, CCS ’08, pp. 245–256. ACM, Limerick, Ireland<br>(2008). DOI 10.1145&#x2F;1455770.1455802</p><h3 id="ReFormat-2009"><a href="#ReFormat-2009" class="headerlink" title="ReFormat:2009"></a>ReFormat:2009</h3><p>Wang, Z., Jiang, X., Cui, W., Wang, X., Grace, M.: ReFormat: Automatic Reverse<br>Engineering of Encrypted Messages. In: M. Backes, P. Ning (eds.) Computer Security<br>ESORICS 2009, no. 5789 in Lecture Notes in Computer Science, pp. 200–215. Springer<br>Berlin Heidelberg, Saint Malo, France (2009)</p><h3 id="Dispatcher-2009"><a href="#Dispatcher-2009" class="headerlink" title="Dispatcher:2009"></a>Dispatcher:2009</h3><p>Caballero, J., Poosankam, P., Kreibich, C., Song, D.: Dispatcher: enabling active botnet<br>infiltration using automatic protocol reverse-engineering. In: Proceedings of the 16th<br>ACM conference on Computer and communications security, CCS ’09, pp. 621–634.<br>ACM, New York, NY, USA (2009). DOI 10.1145&#x2F;1653662.1653737</p><p>Caballero, J., Song, D.: Automatic protocol reverse-engineering: Message format extrac-<br>tion and field semantics inference. Computer Networks 57(2), 451–474 (2013). DOI<br>10.1016&#x2F;j.comnet.2012.08.003</p><h3 id="Fuzzgrind-2009"><a href="#Fuzzgrind-2009" class="headerlink" title="Fuzzgrind:2009"></a>Fuzzgrind:2009</h3><p>Campana, G.: Fuzzgrind: an automatic fuzzing tool (2009)</p><h3 id="REWARDS-2010"><a href="#REWARDS-2010" class="headerlink" title="REWARDS:2010"></a>REWARDS:2010</h3><p>Lin, Z., Zhang, X., Xu, D.: Automatic Reverse Engineering of Data Structures from<br>Binary Execution. In: Proceedings of the 17th Annual Network and Distributed System<br>Security Symposium (NDSS). Internet Society, San Diego, USA (2010)</p><h3 id="Howard-201"><a href="#Howard-201" class="headerlink" title="Howard:201"></a>Howard:201</h3><p>Slowinska, A., Stancescu, T., Bos, H.: Howard: A Dynamic Excavator for Reverse Engi-<br>neering Data Structures. In: Proceedings of the 18th Annual Network and Distributed<br>System Security Symposium (NDSS). Internet Society, San Diego, USA (2011)</p><h3 id="ARTISTE-2012"><a href="#ARTISTE-2012" class="headerlink" title="ARTISTE:2012"></a>ARTISTE:2012</h3><p>Caballero, J., Grieco, G., Marron, M., Lin, Z., Urbina, D.: ARTISTE: Automatic Gen-<br>eration of Hybrid Data Structure Signatures from Binary Code Executions. Technical<br>Report TR-IMDEA-SW-2012-001, IMDEA Software Institute, Madrid, Spain (2012)</p><h3 id="AFL-2014"><a href="#AFL-2014" class="headerlink" title="AFL:2014"></a>AFL:2014</h3><p>Zalewski, M.: American fuzzy lop. <a href="http://lcamtuf.coredump.cx/afl/technical">http://lcamtuf.coredump.cx/afl/technical</a>_<br>details.txt</p><h3 id="ARGOS-2015"><a href="#ARGOS-2015" class="headerlink" title="ARGOS:2015"></a>ARGOS:2015</h3><p>Zeng, J., Lin, Z.: Towards Automatic Inference of Kernel Object Semantics from Binary<br>Code. In: 18th International Symposium, RAID 2015, vol. 9404, pp. 538–561. Springer,<br>Kyoto, Japan (2015). DOI 10.1007&#x2F;978-3-319-26362-5</p><h2 id="Protocol-Grammar"><a href="#Protocol-Grammar" class="headerlink" title="Protocol Grammar:"></a>Protocol Grammar:</h2><h3 id="Prospex-2009"><a href="#Prospex-2009" class="headerlink" title="Prospex:2009"></a>Prospex:2009</h3><p>Comparetti, P., Wondracek, G., Kruegel, C., Kirda, E.: Prospex: Protocol Specification<br>Extraction. In: 2009 30th IEEE Symposium on Security and Privacy, pp. 110–125.<br>IEEE, Berkeley, USA (2009). DOI 10.1109&#x2F;SP.2009.14</p><h3 id="MACE-2010"><a href="#MACE-2010" class="headerlink" title="MACE:2010"></a>MACE:2010</h3><p>Cho, C.Y., Babi , D., Shin, E.C.R., Song, D.: Inference and Analysis of Formal Models of<br>Botnet Command and Control Protocols. In: Proceedings of the 17th ACM Conference<br>on Computer and Communications Security, CCS ’10, pp. 426–439. ACM, New York,<br>NY, USA (2010). DOI 10.1145&#x2F;1866307.1866355</p><h3 id="MACE-2011"><a href="#MACE-2011" class="headerlink" title="MACE:2011"></a>MACE:2011</h3><p>Cho, C.Y., Babi, D., Poosankam, P., Chen, K.Z., Wu, E.X., Song, D.: MACE: model-<br>inference-assisted concolic exploration for protocol and vulnerability discovery. In: Pro-<br>ceedings of the 20th USENIX conference on Security, SEC’11, p. 19. USENIX Associa-<br>tion, Berkeley, CA, USA (2011)</p><h2 id="others"><a href="#others" class="headerlink" title="others"></a>others</h2><ol><li>二进制代码分析：研究如何从二进制文件中提取有关程序执行的信息，例如函数调用、控制流等。这可以通过静态分析、动态分析和符号执行等方法实现。</li><li>运行时信息收集：研究如何在不修改目标程序的情况下，收集有关程序执行过程中的运行时信息，例如内存访问、寄存器值等。这可以通过插桩（Instrumentation）技术实现。</li><li>执行跟踪：研究如何记录程序执行过程中的关键事件，例如函数调用、条件分支等。这可以通过插桩、硬件支持或操作系统支持等方式实现。</li><li>执行路径分析：研究如何分析程序执行过程中的所有可能路径，以找出潜在的安全漏洞和异常行为。这可以通过数据流分析、模型检查等方法实现。</li><li>逆向工程工具开发：研究如何开发自动化的逆向工程工具，以帮助研究人员更高效地分析复杂的软件系统。这可以涉及到编译器设计、调试器开发等方面。</li><li>保护机制对抗：研究如何针对执行追踪协议逆向技术进行防御，以提高软件系统的安全性。这可以涉及到加密算法、混淆技术等方面的研究。</li></ol><h1 id="Note"><a href="#Note" class="headerlink" title="Note:"></a>Note:</h1><p>不如参考人家的：</p><p><a href="https://github.com/techge/PRE-list">https://github.com/techge/PRE-list</a></p><p><img src="/../images/image-20231201141808202.png" alt="image-20231201141808202"></p>]]></content>
    
    
    
    <tags>
      
      <tag>Paper</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>WSL使用</title>
    <link href="/2023/11/15/WSL%E4%BD%BF%E7%94%A8/"/>
    <url>/2023/11/15/WSL%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="安装wsl"><a href="#安装wsl" class="headerlink" title="安装wsl"></a>安装wsl</h1><p><a href="https://learn.microsoft.com/zh-cn/windows/wsl/install">安装 WSL | Microsoft Learn</a></p><h1 id="WSL快照"><a href="#WSL快照" class="headerlink" title="WSL快照"></a>WSL快照</h1><h2 id="做快照"><a href="#做快照" class="headerlink" title="做快照"></a>做快照</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">wsl --export Ubuntu-18.04 d:\wsl-ubuntu18.04.tar<br></code></pre></td></tr></table></figure><p>这时候D盘就会出现一个wsl-ubuntu18.04.tar</p><h2 id="回滚"><a href="#回滚" class="headerlink" title="回滚"></a>回滚</h2><h3 id="1-注销当前系统"><a href="#1-注销当前系统" class="headerlink" title="1.注销当前系统"></a>1.注销当前系统</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">wsl --unregister Ubuntu-18.04<br></code></pre></td></tr></table></figure><h3 id="2-回滚"><a href="#2-回滚" class="headerlink" title="2.回滚"></a>2.回滚</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">wsl --import Ubuntu-18.04 d:\wsl d:\wsl-ubuntu18.04.tar --version 2<br></code></pre></td></tr></table></figure><h3 id="3-设置默认登陆用户为安装时用户名"><a href="#3-设置默认登陆用户为安装时用户名" class="headerlink" title="3.设置默认登陆用户为安装时用户名"></a>3.设置默认登陆用户为安装时用户名</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ubuntu1804 config --default-user USERNAME<br></code></pre></td></tr></table></figure><h1 id="安装-angr"><a href="#安装-angr" class="headerlink" title="安装 angr"></a>安装 angr</h1><h1 id="使用angr"><a href="#使用angr" class="headerlink" title="使用angr"></a>使用angr</h1><p>import angr</p><p>p &#x3D; angr.Project(“工程名”)</p><p>init_state &#x3D; p.factory.entry_state()&#x2F;&#x2F;初始化状态</p><p>sm &#x3D; p.factory.simulation.manager(init_state)</p><p>sm.explore(find&#x3D; ,avoid&#x3D; )&#x2F;&#x2F;find:希望angr去的地址，，avoid:不希望angr去的地址</p><p>found_state &#x3D; sm.found[0]</p><p>found_state.posix.dumps(0)&#x2F;&#x2F;标准输出</p><p>found_state.posix.dumps(1)&#x2F;&#x2F;标准输出</p>]]></content>
    
    
    
    <tags>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C Plus</title>
    <link href="/2023/11/09/C-Plus/"/>
    <url>/2023/11/09/C-Plus/</url>
    
    <content type="html"><![CDATA[<h1 id="大纲"><a href="#大纲" class="headerlink" title="大纲"></a>大纲</h1><p><img src="/../images/image-20231223150929510.png" alt="image-20231223150929510"></p><h1 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h1><h2 id="1、直接使用结构体做为参数"><a href="#1、直接使用结构体做为参数" class="headerlink" title="1、直接使用结构体做为参数"></a>1、直接使用结构体做为参数</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sclass</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-type">int</span> a;<br><span class="hljs-type">int</span> b;<br>&#125;;<br><span class="hljs-type">int</span> <span class="hljs-title function_">Plus</span><span class="hljs-params">(<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> b)</span><br>&#123;<br><span class="hljs-keyword">return</span> a+b;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>* argv[])</span><br>&#123;<br>sclass s;<br>s.a = <span class="hljs-number">10</span>;<br>s.b = <span class="hljs-number">20</span>;<br><br><span class="hljs-type">int</span> x = Plus(s.a,s.b);<br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,x);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">//反汇编</span><br>sub         esp,<span class="hljs-number">10</span>h<br>mov         eax,esp<br>mov         ecx,dword ptr [ebp<span class="hljs-number">-10</span>h]<br>mov         dword ptr [eax],ecx<br>mov         edx,dword ptr [ebp<span class="hljs-number">-0</span>Ch]<br>mov         dword ptr [eax+<span class="hljs-number">4</span>],edx<br>mov         ecx,dword ptr [ebp<span class="hljs-number">-8</span>]<br>mov         dword ptr [eax+<span class="hljs-number">8</span>],ecx<br>mov         edx,dword ptr [ebp<span class="hljs-number">-4</span>]<br>mov         dword ptr [eax+<span class="hljs-number">0</span>Ch],edx<br>call        @ILT+<span class="hljs-number">35</span>(Plus) (<span class="hljs-number">00401028</span>)<br>add         esp,<span class="hljs-number">10</span>h<br></code></pre></td></tr></table></figure><h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><p>将结构体直接做为参数传递的时候，传递的是整个结构体.</p><p><strong>注：</strong></p><p>结构体作为参数，传的是副本，故开发中不要用结构体变量，代替使用结构体指针；</p><p>数组作为参数，传的是指针。</p><h2 id="2、传递结构体指针"><a href="#2、传递结构体指针" class="headerlink" title="2、传递结构体指针"></a>2、传递结构体指针</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sclass</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-type">int</span> a;<br><span class="hljs-type">int</span> b;<br><span class="hljs-type">int</span> c;<br><span class="hljs-type">int</span> d;<br>&#125;;<br><span class="hljs-type">int</span> <span class="hljs-title function_">Plus</span><span class="hljs-params">(sclass* sc)</span><br>&#123;<br><span class="hljs-keyword">return</span> sc-&gt;a+sc-&gt;b;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>* argv[])</span><br>&#123;<br>sclass s;<br>s.a = <span class="hljs-number">10</span>;<br>s.b = <span class="hljs-number">20</span>;<br><br><span class="hljs-type">int</span> x = Plus(&amp;s);<br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,x);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">//反汇编</span><br>mov         dword ptr [ebp<span class="hljs-number">-10</span>h],<span class="hljs-number">0</span>Ah<br>mov         dword ptr [ebp<span class="hljs-number">-0</span>Ch],<span class="hljs-number">14</span>h<br>lea         eax,[ebp<span class="hljs-number">-10</span>h]<br>push        eax<br>call        @ILT+<span class="hljs-number">40</span>(Plus) (<span class="hljs-number">0040102</span>d)<br>add         esp,<span class="hljs-number">4</span><br><br></code></pre></td></tr></table></figure><h2 id="3、函数可以放在结构体里面，也可以放在结构体外面"><a href="#3、函数可以放在结构体里面，也可以放在结构体外面" class="headerlink" title="3、函数可以放在结构体里面，也可以放在结构体外面"></a>3、函数可以放在结构体里面，也可以放在结构体外面</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sclass</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-type">int</span> a;<br><span class="hljs-type">int</span> b;<br><span class="hljs-type">int</span> c;<br><span class="hljs-type">int</span> d;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">Plus</span><span class="hljs-params">(sclass* sc)</span><br>&#123;<br><span class="hljs-keyword">return</span> sc-&gt;a+sc-&gt;b;<br>&#125;<br>&#125;;<br><br></code></pre></td></tr></table></figure><p>探测：通过sizeof来探测将函数放在里面与外面结构体的大小有什么变化？</p><p>没变化！</p><h2 id="4、函数放在里面如何使用的问题-观察反汇编："><a href="#4、函数放在里面如何使用的问题-观察反汇编：" class="headerlink" title="4、函数放在里面如何使用的问题  观察反汇编："></a>4、函数放在里面如何使用的问题  观察反汇编：</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sclass</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-type">int</span> a;<br><span class="hljs-type">int</span> b;<br><span class="hljs-type">int</span> c;<br><span class="hljs-type">int</span> d;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">Plus</span><span class="hljs-params">(sclass* sc)</span><br>&#123;<br><span class="hljs-keyword">return</span> sc-&gt;a+sc-&gt;b;<br>&#125;<br>&#125;;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>* argv[])</span><br>&#123;<br>sclass s;<br>s.a = <span class="hljs-number">10</span>;<br>s.b = <span class="hljs-number">20</span>;<br><br><span class="hljs-type">int</span> x = s.Plus(&amp;s);<br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %x\n&quot;</span>,x,<span class="hljs-keyword">sizeof</span>(s));<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">注意观察反汇编：</span><br><span class="hljs-comment">1、参数传递</span><br><span class="hljs-comment">2、堆栈平衡</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><h2 id="5、封装、类、成员函数"><a href="#5、封装、类、成员函数" class="headerlink" title="5、封装、类、成员函数"></a>5、封装、类、成员函数</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sclass</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-type">int</span> a;<br><span class="hljs-type">int</span> b;<br><span class="hljs-type">int</span> c;<br><span class="hljs-type">int</span> d;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">Plus</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-keyword">return</span> a+b;<br>&#125;<br>&#125;;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>* argv[])</span><br>&#123;<br>sclass s;<br>s.a = <span class="hljs-number">10</span>;<br>s.b = <span class="hljs-number">20</span>;<br><br><span class="hljs-type">int</span> x = s.Plus();<br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %x\n&quot;</span>,x,<span class="hljs-keyword">sizeof</span>(s));<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>封装：</strong></p><p>1、将函数定义到结构体内部，就是封装.</p><p>2、编译器会自动传递结构体的指针给函数.</p><p><strong>类：</strong></p><p>带有函数的结构体，称为类.</p><p><strong>成员函数：</strong></p><p>结构体里面的函数，称为成员函数.</p><h1 id="this关键字"><a href="#this关键字" class="headerlink" title="this关键字"></a><a href="#'02'!A1">this关键字</a></h1><h2 id="1、什么是this指针"><a href="#1、什么是this指针" class="headerlink" title="1、什么是this指针?"></a>1、什么是this指针?</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sclass</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-type">int</span> a;<br><span class="hljs-type">int</span> b;<br><span class="hljs-type">int</span> c;<br><span class="hljs-type">int</span> d;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">Plus</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-keyword">return</span> a+b;<br>&#125;<br>&#125;;<br>sclass s;<span class="hljs-comment">//lea         ecx,[ebp-10h]</span><br>s.Plus();<span class="hljs-comment">//call        @ILT+90(Plus) (0040105f)</span><br></code></pre></td></tr></table></figure><h2 id="2、显示使用this指针"><a href="#2、显示使用this指针" class="headerlink" title="2、显示使用this指针"></a>2、显示使用this指针</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sclass</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-type">int</span> a;<br><span class="hljs-type">int</span> b;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">Init</span><span class="hljs-params">(<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> b)</span><br>&#123;<br>this-&gt;a = a;<br>this-&gt;b = b;<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">Print</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d&quot;</span>,a,b);<br>&#125;<br><br>&#125;;<br>sclass s;<br><br>s.Init(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>);<br><br>s.Print();<br></code></pre></td></tr></table></figure><h2 id="this指针的特点："><a href="#this指针的特点：" class="headerlink" title="this指针的特点："></a>this指针的特点：</h2><p>1、你用或者不用，它就在那里</p><p>2、参数个数确定的时候，用ecx来传递</p><p>3、参数个数不确定的时候，最后一个传递(参见不定长参数)</p><p>4、this指针不能做++ – 等运算，不能重新被赋值.</p><p>5、this指针不占用结构体的宽度.</p><h2 id="this指针的作用"><a href="#this指针的作用" class="headerlink" title="this指针的作用"></a>this指针的作用</h2><p>1、可以区分参数和成员</p><p>2、可以返回当前对象首地址</p><h1 id="继承，构造-析构函数"><a href="#继承，构造-析构函数" class="headerlink" title="继承，构造-析构函数"></a>继承，构造-析构函数</h1><h2 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Person</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-type">int</span> age;<br><span class="hljs-type">int</span> level;<br>Person()<span class="hljs-comment">//构造函数</span><br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Person对象创建了\n&quot;</span>);<br>&#125;<br>Person(<span class="hljs-type">int</span> age,<span class="hljs-type">int</span> level)<span class="hljs-comment">//构造函数（函数名和结构体名一样）</span><br>&#123;<br>this-&gt;age = age;<br>this-&gt;level = level;<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">Print</span><span class="hljs-params">()</span><span class="hljs-comment">//成员函数</span><br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d-%d\n&quot;</span>,age,level);<br>&#125;<br>&#125;;<br><br></code></pre></td></tr></table></figure><h3 id="构造函数的特点："><a href="#构造函数的特点：" class="headerlink" title="构造函数的特点："></a><strong>构造函数的特点：</strong></h3><p>1、与类同名</p><p>2、没有返回值</p><p>3、创建对象的时候执行</p><p>4、主要用于初始化</p><p>5、可以有多个(最好有一个无参的),称为重载(<strong>函数名一样，参数不同</strong>) 其他函数也可以重载</p><p>6、编译器不要求必须提供</p><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-number">1</span> 设计一个结构 DateInfo,要求其满足下述要求。<br>  (<span class="hljs-number">1</span>) 有三个成员： <span class="hljs-built_in">int</span> year; <span class="hljs-built_in">int</span> month;<span class="hljs-built_in">int</span> day;<br>   (<span class="hljs-number">2</span>) 要求有个带参数的构造函数，其参数分别为对应年、月、日。<br>   (<span class="hljs-number">3</span>) 有一个无参数的构造函数，其初始的年、月、日分别为：<span class="hljs-number">2015</span>、<span class="hljs-number">4</span>、<span class="hljs-number">2</span>。<br>   (<span class="hljs-number">4</span>) 要求有一个成员函数实现日期的设置：<span class="hljs-constructor">SetDay(<span class="hljs-params">int</span> <span class="hljs-params">day</span>)</span><br>   (<span class="hljs-number">5</span>) 要求有一个成员函数实现日期的获取: <span class="hljs-constructor">GetDay()</span><br>   (<span class="hljs-number">6</span>) 要求有一个成员函数实现年份的设置: <span class="hljs-constructor">SetYear(<span class="hljs-params">int</span> <span class="hljs-params">year</span>)</span><br>   (<span class="hljs-number">7</span>) 要求有一个成员函数实现年份的获取: <span class="hljs-constructor">GetYear()</span><br>   (<span class="hljs-number">8</span>) 要求有一个成员函数实现月份的设置: <span class="hljs-constructor">SetMonth(<span class="hljs-params">int</span> <span class="hljs-params">month</span>)</span><br>   (<span class="hljs-number">9</span>) 要求有一个成员函数实现月份的获取: <span class="hljs-constructor">GetMonth()</span><br></code></pre></td></tr></table></figure><p>​</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 0402.cpp : Defines the entry point for the console application.</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdafx.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">DataInfo</span><br>&#123;<br><span class="hljs-type">int</span> year;<br><span class="hljs-type">int</span> month;<br><span class="hljs-type">int</span> day;<br><span class="hljs-built_in">DataInfo</span>(<span class="hljs-type">int</span> year,<span class="hljs-type">int</span> month,<span class="hljs-type">int</span> day)<br>&#123;<br><span class="hljs-keyword">this</span>-&gt;year = year;<br><span class="hljs-keyword">this</span>-&gt;month = month;<br><span class="hljs-keyword">this</span>-&gt;day = day;<br>&#125;<br><span class="hljs-built_in">DataInfo</span>()<br>&#123;<br><span class="hljs-keyword">this</span>-&gt;year = <span class="hljs-number">2015</span>;<br><span class="hljs-keyword">this</span>-&gt;month = <span class="hljs-number">4</span>;<br><span class="hljs-keyword">this</span>-&gt;day = <span class="hljs-number">2</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">SetDay</span><span class="hljs-params">(<span class="hljs-type">int</span> day)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">this</span>-&gt;day = day;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">GetDay</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>-&gt;day;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">SetMonth</span><span class="hljs-params">(<span class="hljs-type">int</span> month)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">this</span>-&gt;month = month;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">GetMonth</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>-&gt;month;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">SetYear</span><span class="hljs-params">(<span class="hljs-type">int</span> year)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">this</span>-&gt;year = year;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">GetYear</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>-&gt;year;<br>&#125;<br><br><br>&#125;;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>* argv[])</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">// 创建一个DataInfo实例</span><br>DataInfo data;<br>    <span class="hljs-comment">//此时，data对象的日期为类里面定义的 2015-4-02</span><br><br><span class="hljs-comment">// 使用成员函数设置年份、月份和日期</span><br>data.<span class="hljs-built_in">SetYear</span>(<span class="hljs-number">2023</span>);<br>data.<span class="hljs-built_in">SetMonth</span>(<span class="hljs-number">12</span>);<br>data.<span class="hljs-built_in">SetDay</span>(<span class="hljs-number">3</span>);<br><br><span class="hljs-comment">// 使用成员函数获取年份、月份和日期</span><br><span class="hljs-type">int</span> year = data.<span class="hljs-built_in">GetYear</span>();<br><span class="hljs-type">int</span> month = data.<span class="hljs-built_in">GetMonth</span>();<br><span class="hljs-type">int</span> day = data.<span class="hljs-built_in">GetDay</span>();<br><br><span class="hljs-comment">// 打印结果</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Year: %d, Month: %d, Day: %d\n&quot;</span>, year, month, day);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><ul><li><p><strong>带参数的构造函数</strong>：带参数的构造函数允许在创建对象时传递参数。这些参数可以用来初始化对象的成员变量或执行其他必要的设置。</p><p>​例如   </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">DataInfo <span class="hljs-title function_">data</span><span class="hljs-params">(<span class="hljs-number">2023</span>,<span class="hljs-number">12</span>,<span class="hljs-number">3</span>)</span>;<br></code></pre></td></tr></table></figure></li><li><p><strong>不带参数的构造函数</strong>：不带参数的构造函数（也称为默认构造函数）在创建对象时不需要传递任何参数。如果你没有为类定义任何构造函数，编译器会自动为你提供一个不带参数的构造函数。</p></li></ul><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-number">2</span> 设计一个结构 TimeInfo,要求其满足下述要求。<br>   (<span class="hljs-number">1</span>) 该结构中包含表示时间的时、分、秒。<br>   (<span class="hljs-number">2</span>) 设置该结构中时、分、秒的函数。<br>   (<span class="hljs-number">3</span>) 获取该结构中时、分、秒的三个函数：<span class="hljs-built_in">GetHour</span>(),<span class="hljs-built_in">GetMinute</span>()和<span class="hljs-built_in">GetSecond</span>()。<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">TimeInfo</span><br>&#123;<br><span class="hljs-type">int</span> hour;<br><span class="hljs-type">int</span> minute;<br><span class="hljs-type">int</span> second;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">SetHour</span><span class="hljs-params">(<span class="hljs-type">int</span> hour)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">this</span>-&gt;hour = hour;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">GetHour</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>-&gt;hour;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">SetMinute</span><span class="hljs-params">(<span class="hljs-type">int</span> minute)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">this</span>-&gt;minute = minute;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">GetMinute</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>-&gt;minute;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">SetSecond</span><span class="hljs-params">(<span class="hljs-type">int</span> second)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">this</span>-&gt;second = second;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">GetSecond</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>-&gt;second;<br>&#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="析构函数"><a href="#析构函数" class="headerlink" title="析构函数"></a>析构函数</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;malloc.h&quot;</span></span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Person</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-type">int</span> age;<br><span class="hljs-type">int</span> level;<br><span class="hljs-type">char</span>* arr;<br>Person()<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;无参构造函数执行了...&quot;</span>);<br>&#125;<br>Person(<span class="hljs-type">int</span> age,<span class="hljs-type">int</span> level)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;有参构造函数执行了...&quot;</span>);<br>this-&gt;age = age;<br>this-&gt;level = level;<br>arr = (<span class="hljs-type">char</span>*)<span class="hljs-built_in">malloc</span>(<span class="hljs-number">1024</span>);<br>&#125;<br>~Person()<span class="hljs-comment">//析构函数</span><br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;析构函数执行了...&quot;</span>);<br><span class="hljs-built_in">free</span>(arr);<br>arr = <span class="hljs-literal">NULL</span>;<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">Print</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d-%d\n&quot;</span>,age,level);<br>&#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p><strong>析构函数的特点：</strong></p><p>1、只能有一个析构函数，不能重载</p><p>2、不能带任何参数</p><p>3、不能带返回值</p><p>4、主要用于清理工作</p><p>5、编译器不要求必须提供</p><h1 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Person</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-type">int</span> age;<br><span class="hljs-type">int</span> sex;<br>&#125;;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Teacher</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-type">int</span> age;<br><span class="hljs-type">int</span> sex;<br><span class="hljs-type">int</span> level;<br><span class="hljs-type">int</span> classId;<br>&#125;;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Student</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-type">int</span> age;<br><span class="hljs-type">int</span> sex;<br><span class="hljs-type">int</span> code;<br><span class="hljs-type">int</span> score;<br>&#125;;<br><br><br>Teacher t;<br><br>t.age = <span class="hljs-number">1</span>;<br>t.sex = <span class="hljs-number">2</span>;<br>t.level = <span class="hljs-number">3</span>;<br>t.classId = <span class="hljs-number">4</span>;<br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,<span class="hljs-keyword">sizeof</span>(t));<br></code></pre></td></tr></table></figure><p>观察反汇编</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs assembly">mov         dword ptr [ebp-10h],1<br>mov         dword ptr [ebp-0Ch],2<br>mov         dword ptr [ebp-8],3<br>mov         dword ptr [ebp-4],4<br>push        10h<br>push        offset string &quot;%d\n&quot; (0042201c)<br>call        printf (004010e0)<br>add         esp,8<br><br>mov         dword ptr [ebp-10h],1<br>mov         dword ptr [ebp-0Ch],2<br>mov         dword ptr [ebp-8],3<br>mov         dword ptr [ebp-4],4<br>push        10h<br>push        offset string &quot;%d\n&quot; (0042201c)<br>call        printf (004010e0)<br>add         esp,8<br></code></pre></td></tr></table></figure><p>改变写法：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Person</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-type">int</span> age;<br><span class="hljs-type">int</span> sex;<br>&#125;;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Teacher</span>:</span>Person<br>&#123;<br><span class="hljs-type">int</span> level;<br><span class="hljs-type">int</span> classId;<br>&#125;;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Student</span>:</span>Person<br>&#123;<br><span class="hljs-type">int</span> code;<br><span class="hljs-type">int</span> score;<br>&#125;;<br><br><br>Teacher t;<br><br>t.age = <span class="hljs-number">1</span>;<br>t.sex = <span class="hljs-number">2</span>;<br>t.level = <span class="hljs-number">3</span>;<br>t.classId = <span class="hljs-number">4</span>;<br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,<span class="hljs-keyword">sizeof</span>(t));<br><br>Student s;<br><br>s.age = <span class="hljs-number">1</span>;<br>s.sex = <span class="hljs-number">2</span>;<br>s.code = <span class="hljs-number">3</span>;<br>s.score = <span class="hljs-number">4</span>;<br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,<span class="hljs-keyword">sizeof</span>(s));<br></code></pre></td></tr></table></figure><p>观察反汇编：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs assembly">mov         dword ptr [ebp-10h],1<br>mov         dword ptr [ebp-0Ch],2<br>mov         dword ptr [ebp-8],3<br>mov         dword ptr [ebp-4],4<br>push        10h<br>push        offset string &quot;%d\n&quot; (0042201c)<br>call        printf (004010e0)<br>add         esp,8<br><br>mov         dword ptr [ebp-10h],1<br>mov         dword ptr [ebp-0Ch],2<br>mov         dword ptr [ebp-8],3<br>mov         dword ptr [ebp-4],4<br>push        10h<br>push        offset string &quot;%d\n&quot; (0042201c)<br>call        printf (004010e0)<br>add         esp,8<br></code></pre></td></tr></table></figure><h3 id="总结：-1"><a href="#总结：-1" class="headerlink" title="总结："></a><strong>总结：</strong></h3><p><strong>1、什么是继承？</strong></p><p>继承就是数据的复制</p><p><strong>2、为什么要用继承？</strong></p><p>减少重复代码的编写</p><p><strong>3、Person 称为父类或者基类</strong></p><p><strong>4、Teacher、Student称为子类或者派生类</strong></p><p><strong>5、t和s可以称为对象或者实例.</strong></p><p><strong>6、可以用父类指针指向子类的对象.并且是安全的（因为父类指针的范围比子类小）</strong></p><p>Person* pt &#x3D; &t;</p><h3 id="例子-1"><a href="#例子-1" class="headerlink" title="例子"></a>例子</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//3 让TimeInfo继承DateInfo 分别使用DataInfo和TimeInfo的指针访问TimeInfo对象的成员.</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">TimeInfo</span>:DataInfo<br>    <br>TimeInfo time;<br>DataInfo* pd = &amp;time;<br>TimeInfo* pt = &amp;time;<br>pt-&gt;year = <span class="hljs-number">2023</span>;<br>pt-&gt;month =<span class="hljs-number">12</span>;<br>pt-&gt;day = <span class="hljs-number">3</span>;<br>pt-&gt;hour = <span class="hljs-number">12</span>;<br>pt-&gt;minute = <span class="hljs-number">45</span>;<br>pt-&gt;second = <span class="hljs-number">50</span>;<br><br>pd-&gt;year = <span class="hljs-number">2023</span>;<br>pd-&gt;month =<span class="hljs-number">12</span>;<br>pd-&gt;day = <span class="hljs-number">3</span>;<br><br></code></pre></td></tr></table></figure><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-comment">// 4 设计一个结构叫做MyString，要求该结构能够完成以下功能：</span><br>  (<span class="hljs-number">1</span>) 构造函数能够根据实际传入的参数分配实际存储空间；<br>  (<span class="hljs-number">2</span>) 提供一个无参的构造函数，默认分配大小为<span class="hljs-number">1024</span>个字节；<br>  (<span class="hljs-number">3</span>) 析构函数释放该空间；<br>  (<span class="hljs-number">4</span>) 编写成员函数SetString，可以将一个字符串赋值给该结构；<br>  (<span class="hljs-number">5</span>) 编写成员函数PrintString，可以将该结构的内容打印到屏幕上；<br>  (<span class="hljs-number">6</span>) 编写成员函数AppendString，用于向已有的数据后面添加数据；<br>  (<span class="hljs-number">7</span>) 编写成员函数Size，用于得到当前数据的真实长度。<br>  编写测试程序，测试这个结构。<br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdafx.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;string.h&gt;</span></span><br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">MyString</span><br>&#123;<br><span class="hljs-type">void</span>* GiveAddr;<br><br><span class="hljs-built_in">MyString</span>(<span class="hljs-type">int</span> size)<br>&#123;<br><span class="hljs-keyword">this</span>-&gt;GiveAddr = <span class="hljs-built_in">malloc</span>(size);<br>&#125;<br><br><span class="hljs-built_in">MyString</span>()<br>&#123;<br><span class="hljs-keyword">this</span>-&gt;GiveAddr = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">1024</span>);<br>&#125;<br><br>~<span class="hljs-built_in">MyString</span>()<br>&#123;<br><span class="hljs-built_in">free</span>(GiveAddr);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">SetString</span><span class="hljs-params">(<span class="hljs-type">char</span>* <span class="hljs-type">String</span>)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">char</span>* c =(<span class="hljs-type">char</span>*)GiveAddr;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">size_t</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">strlen</span>(<span class="hljs-type">String</span>)+<span class="hljs-number">1</span>; i++)<br>&#123;<br> *c = *((<span class="hljs-type">char</span> *) <span class="hljs-type">String</span>+i);<br> c++;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">PrintString</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>,GiveAddr);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">Size</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">strlen</span>((<span class="hljs-type">char</span> *)GiveAddr);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">AppendString</span><span class="hljs-params">(<span class="hljs-type">char</span> * strings)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">char</span> * c =(<span class="hljs-type">char</span> *)GiveAddr+<span class="hljs-built_in">Size</span>();<br><br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">size_t</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">strlen</span>(strings)+<span class="hljs-number">1</span>; i++)<br>  &#123;<br> *c = *((<span class="hljs-type">char</span> *) strings+i);<br> c++;<br>  &#125;<br>&#125;<br><br><br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>* argv[])</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-function">MyString <span class="hljs-title">INstring</span><span class="hljs-params">(<span class="hljs-number">1000</span>)</span></span>;<br>INstring.<span class="hljs-built_in">SetString</span>(<span class="hljs-string">&quot;Hello Word&quot;</span>);<br>INstring.<span class="hljs-built_in">PrintString</span>();<br>INstring.<span class="hljs-built_in">AppendString</span>(<span class="hljs-string">&quot;KA_bo&quot;</span>);<br>INstring.<span class="hljs-built_in">PrintString</span>();<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="多层继承："><a href="#多层继承：" class="headerlink" title="多层继承："></a>多层继承：</h2><p><img src="/../images/image-20231201154824854.png" alt="image-20231201154824854"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">X</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-type">int</span> a;<br><span class="hljs-type">int</span> b;<br>&#125;;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Y</span>:</span>X<br>&#123;<br><span class="hljs-type">int</span> c;<br><span class="hljs-type">int</span> d;<br>&#125;;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Z</span>:</span>Y<br>&#123;<br><span class="hljs-type">int</span> e;<br><span class="hljs-type">int</span> f;<br>&#125;;<br><br>Z z;<br><br>z.a = <span class="hljs-number">1</span>;<br>z.b = <span class="hljs-number">2</span>;<br>z.c = <span class="hljs-number">3</span>;<br>z.d = <span class="hljs-number">4</span>;<br>z.e = <span class="hljs-number">5</span>;<br>z.f = <span class="hljs-number">6</span>;<br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,<span class="hljs-keyword">sizeof</span>(z));<br></code></pre></td></tr></table></figure><p>观察反汇编：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs assembly">mov         dword ptr [ebp-18h],1<br>mov         dword ptr [ebp-14h],2<br>mov         dword ptr [ebp-10h],3<br>mov         dword ptr [ebp-0Ch],4<br>mov         dword ptr [ebp-8],5<br>mov         dword ptr [ebp-4],6<br>push        18h<br>push        offset string &quot;%d\n&quot; (0042201c)<br>call        printf (004010e0)<br>add         esp,8<br><br></code></pre></td></tr></table></figure><p>父类有同名的：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">X</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-type">int</span> a;<br><span class="hljs-type">int</span> b;<br>&#125;;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Y</span>:</span>X<br>&#123;<br><span class="hljs-type">int</span> a;<br><span class="hljs-type">int</span> d;<br>&#125;;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Z</span>:</span>Y<br>&#123;<br><span class="hljs-type">int</span> e;<br><span class="hljs-type">int</span> f;<br>&#125;;<br><br>Z z;<br><br>z.X::a = <span class="hljs-number">1</span>;<br>z.b = <span class="hljs-number">2</span>;<br>z.Y::a = <span class="hljs-number">3</span>;<br>z.d = <span class="hljs-number">4</span>;<br>z.e = <span class="hljs-number">5</span>;<br>z.f = <span class="hljs-number">6</span>;<br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,<span class="hljs-keyword">sizeof</span>(z));<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,z.X::a);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,z.b);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,z.Y::a);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,z.d);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,z.e);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,z.f);<br></code></pre></td></tr></table></figure><h2 id="多重继承：-一个子类可以有多个父类-即多重继承"><a href="#多重继承：-一个子类可以有多个父类-即多重继承" class="headerlink" title="多重继承：(一个子类可以有多个父类,即多重继承)"></a>多重继承：(一个子类可以有多个父类,即多重继承)</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">X</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-type">int</span> a;<br><span class="hljs-type">int</span> b;<br>&#125;;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Y</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-type">int</span> c;<br><span class="hljs-type">int</span> d;<br>&#125;;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Z</span>:</span>X,Y<br>&#123;<br><span class="hljs-type">int</span> e;<br><span class="hljs-type">int</span> f;<br>&#125;;<br><br><br>Z z;<br><br>z.a = <span class="hljs-number">1</span>;<br>z.b = <span class="hljs-number">2</span>;<br>z.c = <span class="hljs-number">3</span>;<br>z.d = <span class="hljs-number">4</span>;<br>z.e = <span class="hljs-number">5</span>;<br>z.f = <span class="hljs-number">6</span>;<br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,<span class="hljs-keyword">sizeof</span>(z));<br></code></pre></td></tr></table></figure><p>观察反汇编：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs assembly">mov         dword ptr [ebp-18h],1<br>mov         dword ptr [ebp-14h],2<br>mov         dword ptr [ebp-10h],3<br>mov         dword ptr [ebp-0Ch],4<br>mov         dword ptr [ebp-8],5<br>mov         dword ptr [ebp-4],6<br>push        18h<br>push        offset string &quot;%d %x\n&quot; (0042201c)<br>call        printf (004010e0)<br>add         esp,8<br></code></pre></td></tr></table></figure><h2 id="继承的特性"><a href="#继承的特性" class="headerlink" title="继承的特性"></a>继承的特性</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">X</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-type">int</span> a;<br><span class="hljs-type">int</span> b;<br>&#125;;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Y</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-type">int</span> a;<br><span class="hljs-type">int</span> d;<br>&#125;;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Z</span>:</span>X,Y<br>&#123;<br><span class="hljs-type">int</span> e;<br><span class="hljs-type">int</span> f;<br>&#125;;<br><br><br>Z z;<br><br>z.X::a = <span class="hljs-number">1</span>;<br>z.b = <span class="hljs-number">2</span>;<br>z.Y::a = <span class="hljs-number">3</span>;<br>z.d = <span class="hljs-number">4</span>;<br>z.e = <span class="hljs-number">5</span>;<br>z.f = <span class="hljs-number">6</span>;<br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,<span class="hljs-keyword">sizeof</span>(z));<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,z.X::a);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,z.b);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,z.Y::a);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,z.d);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,z.e);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,z.f);<br></code></pre></td></tr></table></figure><p>观察反汇编：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs assembly">mov         dword ptr [ebp-18h],1<br>mov         dword ptr [ebp-14h],2<br>mov         dword ptr [ebp-10h],3<br>mov         dword ptr [ebp-0Ch],4<br>mov         dword ptr [ebp-8],5<br>mov         dword ptr [ebp-4],6<br>push        18h<br>push        offset string &quot;%d %x\n&quot; (0042201c)<br>call        printf (004010e0)<br>add         esp,8<br></code></pre></td></tr></table></figure><h3 id="总结：-2"><a href="#总结：-2" class="headerlink" title="总结："></a><strong>总结：</strong></h3><p>1、多重继承增加了程序的复杂度，容易出错</p><p>2、微软建议使用单继承，如果需要多重继承可以改为多层继承<br><img src="/../images/image-20231201155228871.png" alt="image-20231201155228871"></p><h1 id="虚函数表"><a href="#虚函数表" class="headerlink" title="虚函数表"></a>虚函数表</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Base</span></span><br><span class="hljs-class">&#123;</span><br>public:<br>    <span class="hljs-type">void</span> <span class="hljs-title function_">Function_1</span><span class="hljs-params">()</span><br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Function_1...\n&quot;</span>);<br>    &#125;<br>    virtual <span class="hljs-type">void</span> <span class="hljs-title function_">Function_2</span><span class="hljs-params">()</span><br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Function_2...\n&quot;</span>);<br>    &#125;<br>&#125;;<br><br><span class="hljs-comment">//观察反汇编：</span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">TestMethod</span><span class="hljs-params">()</span><br>&#123;<br>Base base;<br><br>base.Function_1();<br><span class="hljs-number">00401090</span> <span class="hljs-number">8</span>D <span class="hljs-number">4</span>D FC             lea         ecx,[ebp<span class="hljs-number">-4</span>]<br><span class="hljs-number">00401093</span> E8 <span class="hljs-number">9F</span> FF FF FF       call        @ILT+<span class="hljs-number">50</span>(Base::Function_1) (<span class="hljs-number">00401037</span>)<br><br>base.Function_2();<br><span class="hljs-number">00401098</span> <span class="hljs-number">8</span>D <span class="hljs-number">4</span>D FC             lea         ecx,[ebp<span class="hljs-number">-4</span>]<br><span class="hljs-number">0040109B</span> E8 <span class="hljs-number">65</span> FF FF FF       call        @ILT+<span class="hljs-number">0</span>(Base::Function_2) (<span class="hljs-number">00401005</span>)<br><br>Base* pb = &amp;base;<br><br>pb-&gt;Function_1();<br><span class="hljs-number">004010</span>A6 <span class="hljs-number">8B</span> <span class="hljs-number">4</span>D F8             mov         ecx,dword ptr [ebp<span class="hljs-number">-8</span>]<br><span class="hljs-number">004010</span>A9 E8 <span class="hljs-number">89</span> FF FF FF       call        @ILT+<span class="hljs-number">50</span>(Base::Function_1) (<span class="hljs-number">00401037</span>)<br><br>pb-&gt;Function_2();<br><span class="hljs-number">004010</span>AE <span class="hljs-number">8B</span> <span class="hljs-number">4</span>D F8             mov         ecx,dword ptr [ebp<span class="hljs-number">-8</span>]<br><span class="hljs-number">004010B</span>1 <span class="hljs-number">8B</span> <span class="hljs-number">11</span>                mov         edx,dword ptr [ecx]<br><span class="hljs-number">004010B</span>3 <span class="hljs-number">8B</span> F4                mov         esi,esp<br><span class="hljs-number">004010B</span>5 <span class="hljs-number">8B</span> <span class="hljs-number">4</span>D F8             mov         ecx,dword ptr [ebp<span class="hljs-number">-8</span>]<br><span class="hljs-number">004010B</span>8 FF <span class="hljs-number">12</span>                call        dword ptr [edx]<br>&#125;<br><span class="hljs-comment">//看二进制汇编， E8表示直接调用，FF表示间接调用</span><br></code></pre></td></tr></table></figure><h2 id="总结：-3"><a href="#总结：-3" class="headerlink" title="总结："></a>总结：</h2><p>1、通过对象调用时，virtual函数与普通函数都是E8 Call</p><p>2、通过指针调用时，virtual函数是FF Call,也就是间接Call</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Base</span></span><br><span class="hljs-class">&#123;</span><br>public:<br>    <span class="hljs-type">int</span> x;<br>    <span class="hljs-type">int</span> y;<br>    virtual <span class="hljs-type">void</span> <span class="hljs-title function_">Function_1</span><span class="hljs-params">()</span><br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Function_1...\n&quot;</span>);<br>    &#125;<br>    virtual <span class="hljs-type">void</span> <span class="hljs-title function_">Function_2</span><span class="hljs-params">()</span><br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Function_2...\n&quot;</span>);<br>    &#125;<br>&#125;;<br><br><span class="hljs-comment">//1、当类中有虚函数时，观察大小的变化.</span><br><br>Base base;<br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%x\n&quot;</span>,<span class="hljs-keyword">sizeof</span>(base));<br><br>思考：多出这<span class="hljs-number">4</span>个字节是什么?<br><br><span class="hljs-comment">//2、观察虚函数通过指针调用时的反汇编：</span><br><br>pb-&gt;Function_1();<br><span class="hljs-number">0040</span>D9E3 <span class="hljs-number">8B</span> <span class="hljs-number">4</span>D F0             mov         ecx,dword ptr [ebp<span class="hljs-number">-10</span>h]<br><span class="hljs-number">0040</span>D9E6 <span class="hljs-number">8B</span> <span class="hljs-number">11</span>                mov         edx,dword ptr [ecx]<br><span class="hljs-number">0040</span>D9E8 <span class="hljs-number">8B</span> F4                mov         esi,esp<br><span class="hljs-number">0040</span>D9EA <span class="hljs-number">8B</span> <span class="hljs-number">4</span>D F0             mov         ecx,dword ptr [ebp<span class="hljs-number">-10</span>h]<br><span class="hljs-number">0040</span>D9ED FF <span class="hljs-number">12</span>                call        dword ptr [edx]<br><br><br>pb-&gt;Function_2();<br><span class="hljs-number">0040</span>D9F6 <span class="hljs-number">8B</span> <span class="hljs-number">45</span> F0             mov         eax,dword ptr [ebp<span class="hljs-number">-10</span>h]<br><span class="hljs-number">0040</span>D9F9 <span class="hljs-number">8B</span> <span class="hljs-number">10</span>                mov         edx,dword ptr [eax]<br><span class="hljs-number">0040</span>D9FB <span class="hljs-number">8B</span> F4                mov         esi,esp<br><span class="hljs-number">0040</span>D9FD <span class="hljs-number">8B</span> <span class="hljs-number">4</span>D F0             mov         ecx,dword ptr [ebp<span class="hljs-number">-10</span>h]<br><span class="hljs-number">0040</span>DA00 FF <span class="hljs-number">52</span> <span class="hljs-number">04</span>             call        dword ptr [edx+<span class="hljs-number">4</span>]<br><br><br></code></pre></td></tr></table></figure><h2 id="总结：-4"><a href="#总结：-4" class="headerlink" title="总结："></a>总结：</h2><p>1、当类中有虚函数时，会多一个属性，4个字节</p><p>2、多出的属性是一个地址，指向一张表，里面存储了所有虚函数的地址</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Base</span></span><br><span class="hljs-class">&#123;</span><br>public:<br><span class="hljs-type">int</span> x;<br><span class="hljs-type">int</span> y;<br>    virtual <span class="hljs-type">void</span> <span class="hljs-title function_">Function_1</span><span class="hljs-params">()</span><br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Function_1...\n&quot;</span>);<br>    &#125;<br>    virtual <span class="hljs-type">void</span> <span class="hljs-title function_">Function_2</span><span class="hljs-params">()</span><br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Function_2...\n&quot;</span>);<br>    &#125;<br>    virtual <span class="hljs-type">void</span> <span class="hljs-title function_">Function_3</span><span class="hljs-params">()</span><br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Function_3...\n&quot;</span>);<br>    &#125;<br>&#125;;<br><br><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">TestMethod</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-comment">//查看 Sub 的虚函数表</span><br>    Base base;<br><br><span class="hljs-comment">//对象的前四个字节就是虚函数表</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;base 的虚函数表地址为：%x\n&quot;</span>,*(<span class="hljs-type">int</span>*)&amp;base);<br><br><span class="hljs-comment">//通过函数指针调用函数，验证正确性</span><br>    <span class="hljs-keyword">typedef</span> <span class="hljs-title function_">void</span><span class="hljs-params">(*pFunction)</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br><br>pFunction pFn;<br><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">3</span>;i++)<br>&#123;<br><span class="hljs-type">int</span> temp = *((<span class="hljs-type">int</span>*)(*(<span class="hljs-type">int</span>*)&amp;base)+i);<br>pFn = (pFunction)temp;<br>pFn();<br>&#125;<br><br><br>&#125;<br><br><br></code></pre></td></tr></table></figure><h2 id="总结：-5"><a href="#总结：-5" class="headerlink" title="总结："></a>总结：</h2><p><img src="/../images/image-20231216104832606.png" alt="image-20231216104832606"></p><h2 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h2><h3 id="1、单继承无函数覆盖-打印Sub对象的虚函数表"><a href="#1、单继承无函数覆盖-打印Sub对象的虚函数表" class="headerlink" title="1、单继承无函数覆盖(打印Sub对象的虚函数表)"></a>1、单继承无函数覆盖(打印Sub对象的虚函数表)</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//1、单继承无函数覆盖(打印Sub对象的虚函数表)</span><br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Base</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">Function_1</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Base:Function_1...\n&quot;</span>);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">Function_2</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Base:Function_2...\n&quot;</span>);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">Function_3</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Base:Function_3...\n&quot;</span>);<br>    &#125;<br>&#125;;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Sub</span>:Base<br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">Function_4</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Sub:Function_4...\n&quot;</span>);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">Function_5</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Sub:Function_5...\n&quot;</span>);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">Function_6</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Sub:Function_6...\n&quot;</span>);<br>    &#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>* argv[])</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//查看 Sub 的虚函数表</span><br>    Sub sub;<br><br><span class="hljs-comment">//对象的前四个字节就是虚函数表</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Sub 的虚函数表地址为：%x\n&quot;</span>,*(<span class="hljs-type">int</span>*)&amp;sub);<br><br><span class="hljs-comment">//通过函数指针调用函数，验证正确性</span><br>    <span class="hljs-function"><span class="hljs-keyword">typedef</span> <span class="hljs-title">void</span><span class="hljs-params">(*pFunction)</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span></span>;<br><br>pFunction pFn;<br><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">6</span>;i++)<br>&#123;<br>pFn = (pFunction)*((<span class="hljs-type">int</span>*)(*(<span class="hljs-type">int</span>*)&amp;sub)+i);<br><span class="hljs-built_in">pFn</span>();<br>&#125;<br><br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><img src="/../images/image-20231216161557187.png" alt="image-20231216161557187"></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p><img src="/../images/image-20231216161344352.png" alt="image-20231216161344352"></p><h3 id="2、单继承有函数覆盖-打印Sub对象的虚函数表"><a href="#2、单继承有函数覆盖-打印Sub对象的虚函数表" class="headerlink" title="2、单继承有函数覆盖(打印Sub对象的虚函数表)"></a>2、单继承有函数覆盖(打印Sub对象的虚函数表)</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs c"><br><br><span class="hljs-comment">//2、单继承有函数覆盖(打印Sub对象的虚函数表)</span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Base</span></span><br><span class="hljs-class">&#123;</span><br>public:<br>    virtual <span class="hljs-type">void</span> <span class="hljs-title function_">Function_1</span><span class="hljs-params">()</span><br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Base:Function_1...\n&quot;</span>);<br>    &#125;<br>    virtual <span class="hljs-type">void</span> <span class="hljs-title function_">Function_2</span><span class="hljs-params">()</span><br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Base:Function_2...\n&quot;</span>);<br>    &#125;<br>    virtual <span class="hljs-type">void</span> <span class="hljs-title function_">Function_3</span><span class="hljs-params">()</span><br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Base:Function_3...\n&quot;</span>);<br>    &#125;<br>&#125;;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Sub</span>:</span>Base<br>&#123;<br>public:<br>    virtual <span class="hljs-type">void</span> <span class="hljs-title function_">Function_1</span><span class="hljs-params">()</span><br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Sub:Function_1...\n&quot;</span>);<br>    &#125;<br>    virtual <span class="hljs-type">void</span> <span class="hljs-title function_">Function_2</span><span class="hljs-params">()</span><br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Sub:Function_2...\n&quot;</span>);<br>    &#125;<br>    virtual <span class="hljs-type">void</span> <span class="hljs-title function_">Function_6</span><span class="hljs-params">()</span><br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Sub:Function_6...\n&quot;</span>);<br>    &#125;<br>&#125;;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>* argv[])</span><br>&#123;<br><span class="hljs-comment">//查看 Sub 的虚函数表</span><br>    Sub sub;<br><br><span class="hljs-comment">//对象的前四个字节就是虚函数表</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Sub 的虚函数表地址为：%x\n&quot;</span>,*(<span class="hljs-type">int</span>*)&amp;sub);<br><br><span class="hljs-comment">//通过函数指针调用函数，验证正确性</span><br>    <span class="hljs-keyword">typedef</span> <span class="hljs-title function_">void</span><span class="hljs-params">(*pFunction)</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br><br>pFunction pFn;<br><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">6</span>;i++)<br>&#123;<br><span class="hljs-type">int</span> temp = *((<span class="hljs-type">int</span>*)(*(<span class="hljs-type">int</span>*)&amp;sub)+i);<br><span class="hljs-keyword">if</span>(temp == <span class="hljs-number">0</span>)<br>&#123;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>pFn = (pFunction)temp;<br>pFn();<br>&#125;<br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%x\n&quot;</span>,*((<span class="hljs-type">int</span>*)(*(<span class="hljs-type">int</span>*)&amp;sub)+<span class="hljs-number">6</span>));<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><img src="/../images/image-20231216161318303.png" alt="image-20231216161318303"></p><h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><p><img src="/../images/image-20231216161505126.png" alt="image-20231216161505126"></p><h3 id="3、多重继承无函数覆盖"><a href="#3、多重继承无函数覆盖" class="headerlink" title="3、多重继承无函数覆盖"></a>3、多重继承无函数覆盖</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Base1</span></span><br><span class="hljs-class">&#123;</span><br>public:<br>    virtual <span class="hljs-type">void</span> <span class="hljs-title function_">Fn_1</span><span class="hljs-params">()</span><br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Base1:Fn_1...\n&quot;</span>);<br>    &#125;<br>    virtual <span class="hljs-type">void</span> <span class="hljs-title function_">Fn_2</span><span class="hljs-params">()</span><br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Base1:Fn_2...\n&quot;</span>);<br>    &#125;<br>&#125;;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Base2</span></span><br><span class="hljs-class">&#123;</span><br>public:<br>    virtual <span class="hljs-type">void</span> <span class="hljs-title function_">Fn_3</span><span class="hljs-params">()</span><br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Base2:Fn_3...\n&quot;</span>);<br>    &#125;<br>    virtual <span class="hljs-type">void</span> <span class="hljs-title function_">Fn_4</span><span class="hljs-params">()</span><br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Base2:Fn_4...\n&quot;</span>);<br>    &#125;<br>&#125;;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Sub</span>:</span>Base1,Base2<br>&#123;<br>public:<br>    virtual <span class="hljs-type">void</span> <span class="hljs-title function_">Fn_5</span><span class="hljs-params">()</span><br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Sub:Fn_5...\n&quot;</span>);<br>    &#125;<br>    virtual <span class="hljs-type">void</span> <span class="hljs-title function_">Fn_6</span><span class="hljs-params">()</span><br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Sub:Fn_6...\n&quot;</span>);<br>    &#125;<br>&#125;;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>* argv[])</span><br>&#123;<br><span class="hljs-comment">//查看 Sub 的虚函数表</span><br>    Sub sub;<br><br><span class="hljs-comment">//通过函数指针调用函数，验证正确性</span><br>    <span class="hljs-keyword">typedef</span> <span class="hljs-title function_">void</span><span class="hljs-params">(*pFunction)</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br><br><br><span class="hljs-comment">//对象的前四个字节是第一个Base1的虚表</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Sub 的虚函数表地址为：%x\n&quot;</span>,*(<span class="hljs-type">int</span>*)&amp;sub);<br><br>pFunction pFn;<br><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">6</span>;i++)<br>&#123;<br><span class="hljs-type">int</span> temp = *((<span class="hljs-type">int</span>*)(*(<span class="hljs-type">int</span>*)&amp;sub)+i);<br><span class="hljs-keyword">if</span>(temp == <span class="hljs-number">0</span>)<br>&#123;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>pFn = (pFunction)temp;<br>pFn();<br>&#125;<br><br><span class="hljs-comment">//对象的第二个四字节是Base2的虚表</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Sub 的虚函数表地址为：%x\n&quot;</span>,*(<span class="hljs-type">int</span>*)((<span class="hljs-type">int</span>)&amp;sub+<span class="hljs-number">4</span>));<br><br>pFunction pFn1;<br><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> k=<span class="hljs-number">0</span>;k&lt;<span class="hljs-number">2</span>;k++)<br>&#123;<br><span class="hljs-type">int</span> temp = *((<span class="hljs-type">int</span>*)(*(<span class="hljs-type">int</span>*)((<span class="hljs-type">int</span>)&amp;sub+<span class="hljs-number">4</span>))+k);<br>pFn1 = (pFunction)temp;<br>pFn1();<br>&#125;<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="总结：因为有两个直接父类，所以有两个虚函数表"><a href="#总结：因为有两个直接父类，所以有两个虚函数表" class="headerlink" title="总结：因为有两个直接父类，所以有两个虚函数表"></a>总结：因为有两个直接父类，所以有两个虚函数表</h3><p><img src="/../images/image-20231216161852900.png" alt="image-20231216161852900"></p><h3 id="4、多重继承有函数覆盖"><a href="#4、多重继承有函数覆盖" class="headerlink" title="4、多重继承有函数覆盖"></a>4、多重继承有函数覆盖</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Base1</span></span><br><span class="hljs-class">&#123;</span><br>public:<br>    virtual <span class="hljs-type">void</span> <span class="hljs-title function_">Fn_1</span><span class="hljs-params">()</span><br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Base1:Fn_1...\n&quot;</span>);<br>    &#125;<br>    virtual <span class="hljs-type">void</span> <span class="hljs-title function_">Fn_2</span><span class="hljs-params">()</span><br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Base1:Fn_2...\n&quot;</span>);<br>    &#125;<br>&#125;;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Base2</span></span><br><span class="hljs-class">&#123;</span><br>public:<br>    virtual <span class="hljs-type">void</span> <span class="hljs-title function_">Fn_3</span><span class="hljs-params">()</span><br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Base2:Fn_3...\n&quot;</span>);<br>    &#125;<br>    virtual <span class="hljs-type">void</span> <span class="hljs-title function_">Fn_4</span><span class="hljs-params">()</span><br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Base2:Fn_4...\n&quot;</span>);<br>    &#125;<br>&#125;;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Sub</span>:</span>Base1,Base2<br>&#123;<br>public:<br>    virtual <span class="hljs-type">void</span> <span class="hljs-title function_">Fn_1</span><span class="hljs-params">()</span><br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Sub:Fn_1...\n&quot;</span>);<br>    &#125;<br>    virtual <span class="hljs-type">void</span> <span class="hljs-title function_">Fn_3</span><span class="hljs-params">()</span><br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Sub:Fn_3...\n&quot;</span>);<br>    &#125;<br>virtual <span class="hljs-type">void</span> <span class="hljs-title function_">Fn_5</span><span class="hljs-params">()</span><br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Sub:Fn_5...\n&quot;</span>);<br>    &#125;<br>&#125;;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>* argv[])</span><br>&#123;<br><span class="hljs-comment">//查看 Sub 的虚函数表</span><br>    Sub sub;<br><br><span class="hljs-comment">//通过函数指针调用函数，验证正确性</span><br>    <span class="hljs-keyword">typedef</span> <span class="hljs-title function_">void</span><span class="hljs-params">(*pFunction)</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br><br><br><span class="hljs-comment">//对象的前四个字节是第一个Base1的虚表</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Sub 的虚函数表地址为：%x\n&quot;</span>,*(<span class="hljs-type">int</span>*)&amp;sub);<br><br>pFunction pFn;<br><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">6</span>;i++)<br>&#123;<br><span class="hljs-type">int</span> temp = *((<span class="hljs-type">int</span>*)(*(<span class="hljs-type">int</span>*)&amp;sub)+i);<br><span class="hljs-keyword">if</span>(temp == <span class="hljs-number">0</span>)<br>&#123;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>pFn = (pFunction)temp;<br>pFn();<br>&#125;<br><br><span class="hljs-comment">//对象的第二个四字节是Base2的虚表</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Sub 的虚函数表地址为：%x\n&quot;</span>,*(<span class="hljs-type">int</span>*)((<span class="hljs-type">int</span>)&amp;sub+<span class="hljs-number">4</span>));<br><br>pFunction pFn1;<br><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> k=<span class="hljs-number">0</span>;k&lt;<span class="hljs-number">2</span>;k++)<br>&#123;<br><span class="hljs-type">int</span> temp = *((<span class="hljs-type">int</span>*)(*(<span class="hljs-type">int</span>*)((<span class="hljs-type">int</span>)&amp;sub+<span class="hljs-number">4</span>))+k);<br>pFn1 = (pFunction)temp;<br>pFn1();<br>&#125;<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h3><p>覆盖的哪个就在哪个虚函数表里</p><p><img src="/../images/image-20231216161952320.png" alt="image-20231216161952320"></p><h3 id="5、多层继承无函数覆盖"><a href="#5、多层继承无函数覆盖" class="headerlink" title="5、多层继承无函数覆盖"></a>5、多层继承无函数覆盖</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Base1</span></span><br><span class="hljs-class">&#123;</span><br>public:<br>    virtual <span class="hljs-type">void</span> <span class="hljs-title function_">Fn_1</span><span class="hljs-params">()</span><br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Base1:Fn_1...\n&quot;</span>);<br>    &#125;<br>    virtual <span class="hljs-type">void</span> <span class="hljs-title function_">Fn_2</span><span class="hljs-params">()</span><br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Base1:Fn_2...\n&quot;</span>);<br>    &#125;<br>&#125;;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Base2</span>:</span>Base1<span class="hljs-comment">// C -&gt;  A  B</span><br>&#123;<br>public:        <span class="hljs-comment">//A C对象</span><br>    virtual <span class="hljs-type">void</span> <span class="hljs-title function_">Fn_3</span><span class="hljs-params">()</span><br>    &#123;        <span class="hljs-comment">//BC对象</span><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Base2:Fn_3...\n&quot;</span>);<br>    &#125;<br>    virtual <span class="hljs-type">void</span> <span class="hljs-title function_">Fn_4</span><span class="hljs-params">()</span><br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Base2:Fn_4...\n&quot;</span>);<br>    &#125;<br>&#125;;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Sub</span>:</span>Base2<br>&#123;<br>public:<br>    virtual <span class="hljs-type">void</span> <span class="hljs-title function_">Fn_5</span><span class="hljs-params">()</span><br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Sub:Fn_5...\n&quot;</span>);<br>    &#125;<br>    virtual <span class="hljs-type">void</span> <span class="hljs-title function_">Fn_6</span><span class="hljs-params">()</span><br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Sub:Fn_6...\n&quot;</span>);<br>    &#125;<br>&#125;;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>* argv[])</span><br>&#123;<br><span class="hljs-comment">//查看 Sub 的虚函数表</span><br>    Sub sub;<br><br><span class="hljs-comment">//观察大小：虚函数表只有一个</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%x\n&quot;</span>,<span class="hljs-keyword">sizeof</span>(sub));<br><br><span class="hljs-comment">//通过函数指针调用函数，验证正确性</span><br>    <span class="hljs-keyword">typedef</span> <span class="hljs-title function_">void</span><span class="hljs-params">(*pFunction)</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br><br><br><span class="hljs-comment">//对象的前四个字节是就是虚函数表</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Sub 的虚函数表地址为：%x\n&quot;</span>,*(<span class="hljs-type">int</span>*)&amp;sub);<br><br>pFunction pFn;<br><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">6</span>;i++)<br>&#123;<br><span class="hljs-type">int</span> temp = *((<span class="hljs-type">int</span>*)(*(<span class="hljs-type">int</span>*)&amp;sub)+i);<br><span class="hljs-keyword">if</span>(temp == <span class="hljs-number">0</span>)<br>&#123;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>pFn = (pFunction)temp;<br>pFn();<br>&#125;<br><br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="总结-3"><a href="#总结-3" class="headerlink" title="总结"></a>总结</h3><p><img src="/../images/image-20231216162219217.png" alt="image-20231216162219217"></p><h3 id="6、多层继承有函数覆盖-1"><a href="#6、多层继承有函数覆盖-1" class="headerlink" title="6、多层继承有函数覆盖(1)"></a>6、多层继承有函数覆盖(1)</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Base1</span></span><br><span class="hljs-class">&#123;</span><br>public:<br>    virtual <span class="hljs-type">void</span> <span class="hljs-title function_">Fn_1</span><span class="hljs-params">()</span><br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Base1:Fn_1...\n&quot;</span>);<br>    &#125;<br>    virtual <span class="hljs-type">void</span> <span class="hljs-title function_">Fn_2</span><span class="hljs-params">()</span><br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Base1:Fn_2...\n&quot;</span>);<br>    &#125;<br>&#125;;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Base2</span>:</span>Base1<br>&#123;<br>public:<br>    virtual <span class="hljs-type">void</span> <span class="hljs-title function_">Fn_1</span><span class="hljs-params">()</span><br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Base2:Fn_1...\n&quot;</span>);<br>    &#125;<br>    virtual <span class="hljs-type">void</span> <span class="hljs-title function_">Fn_3</span><span class="hljs-params">()</span><br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Base2:Fn_3...\n&quot;</span>);<br>    &#125;<br>&#125;;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Sub</span>:</span>Base2<br>&#123;<br>public:<br>virtual <span class="hljs-type">void</span> <span class="hljs-title function_">Fn_5</span><span class="hljs-params">()</span><br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Sub:Fn_5...\n&quot;</span>);<br>    &#125;<br>&#125;;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>* argv[])</span><br>&#123;<br><span class="hljs-comment">//查看 Sub 的虚函数表</span><br>    Sub sub;<br><br><span class="hljs-comment">//观察大小：虚函数表只有一个</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%x\n&quot;</span>,<span class="hljs-keyword">sizeof</span>(sub));<br><br><span class="hljs-comment">//通过函数指针调用函数，验证正确性</span><br>    <span class="hljs-keyword">typedef</span> <span class="hljs-title function_">void</span><span class="hljs-params">(*pFunction)</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br><br><br><span class="hljs-comment">//对象的前四个字节是就是虚函数表</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Sub 的虚函数表地址为：%x\n&quot;</span>,*(<span class="hljs-type">int</span>*)&amp;sub);<br><br>pFunction pFn;<br><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">6</span>;i++)<br>&#123;<br><span class="hljs-type">int</span> temp = *((<span class="hljs-type">int</span>*)(*(<span class="hljs-type">int</span>*)&amp;sub)+i);<br><span class="hljs-keyword">if</span>(temp == <span class="hljs-number">0</span>)<br>&#123;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>pFn = (pFunction)temp;<br>pFn();<br>&#125;<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="总结-4"><a href="#总结-4" class="headerlink" title="总结"></a>总结</h3><p><img src="/../images/image-20231216162331040.png" alt="image-20231216162331040"></p><h3 id="7、多层继承有函数覆盖-2"><a href="#7、多层继承有函数覆盖-2" class="headerlink" title="7、多层继承有函数覆盖(2)"></a>7、多层继承有函数覆盖(2)</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Base1</span></span><br><span class="hljs-class">&#123;</span><br>public:<br>    virtual <span class="hljs-type">void</span> <span class="hljs-title function_">Fn_1</span><span class="hljs-params">()</span><br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Base1:Fn_1...\n&quot;</span>);<br>    &#125;<br>    virtual <span class="hljs-type">void</span> <span class="hljs-title function_">Fn_2</span><span class="hljs-params">()</span><br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Base1:Fn_2...\n&quot;</span>);<br>    &#125;<br>&#125;;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Base2</span>:</span>Base1<br>&#123;<br>public:<br>    virtual <span class="hljs-type">void</span> <span class="hljs-title function_">Fn_1</span><span class="hljs-params">()</span><br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Base2:Fn_1...\n&quot;</span>);<br>    &#125;<br>    virtual <span class="hljs-type">void</span> <span class="hljs-title function_">Fn_3</span><span class="hljs-params">()</span><br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Base2:Fn_3...\n&quot;</span>);<br>    &#125;<br>&#125;;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Sub</span>:</span>Base2<br>&#123;<br>public:<br>virtual <span class="hljs-type">void</span> <span class="hljs-title function_">Fn_1</span><span class="hljs-params">()</span><br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Sub:Fn_1...\n&quot;</span>);<br>    &#125;<br>virtual <span class="hljs-type">void</span> <span class="hljs-title function_">Fn_5</span><span class="hljs-params">()</span><br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Sub:Fn_5...\n&quot;</span>);<br>    &#125;<br>&#125;;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>* argv[])</span><br>&#123;<br><span class="hljs-comment">//查看 Sub 的虚函数表</span><br>    Sub sub;<br><br><span class="hljs-comment">//观察大小：虚函数表只有一个</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%x\n&quot;</span>,<span class="hljs-keyword">sizeof</span>(sub));<br><br><span class="hljs-comment">//通过函数指针调用函数，验证正确性</span><br>    <span class="hljs-keyword">typedef</span> <span class="hljs-title function_">void</span><span class="hljs-params">(*pFunction)</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br><br><br><span class="hljs-comment">//对象的前四个字节是就是虚函数表</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Sub 的虚函数表地址为：%x\n&quot;</span>,*(<span class="hljs-type">int</span>*)&amp;sub);<br><br>pFunction pFn;<br><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">6</span>;i++)<br>&#123;<br><span class="hljs-type">int</span> temp = *((<span class="hljs-type">int</span>*)(*(<span class="hljs-type">int</span>*)&amp;sub)+i);<br><span class="hljs-keyword">if</span>(temp == <span class="hljs-number">0</span>)<br>&#123;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>pFn = (pFunction)temp;<br>pFn();<br>&#125;<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><h3 id="总结-5"><a href="#总结-5" class="headerlink" title="总结"></a>总结</h3><p><img src="/../images/image-20231216162424143.png" alt="image-20231216162424143"></p><h3 id="8、多层继承有函数覆盖-3"><a href="#8、多层继承有函数覆盖-3" class="headerlink" title="8、多层继承有函数覆盖(3)"></a>8、多层继承有函数覆盖(3)</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Base1</span></span><br><span class="hljs-class">&#123;</span><br>public:<br>    virtual <span class="hljs-type">void</span> <span class="hljs-title function_">Fn_1</span><span class="hljs-params">()</span><br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Base1:Fn_1...\n&quot;</span>);<br>    &#125;<br>    virtual <span class="hljs-type">void</span> <span class="hljs-title function_">Fn_2</span><span class="hljs-params">()</span><br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Base1:Fn_2...\n&quot;</span>);<br>    &#125;<br>&#125;;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Base2</span>:</span>Base1<br>&#123;<br>public:<br>    virtual <span class="hljs-type">void</span> <span class="hljs-title function_">Fn_3</span><span class="hljs-params">()</span><br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Base2:Fn_3...\n&quot;</span>);<br>    &#125;<br>&#125;;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Sub</span>:</span>Base2<br>&#123;<br>public:<br>virtual <span class="hljs-type">void</span> <span class="hljs-title function_">Fn_1</span><span class="hljs-params">()</span><br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Sub:Fn_1...\n&quot;</span>);<br>    &#125;<br>virtual <span class="hljs-type">void</span> <span class="hljs-title function_">Fn_3</span><span class="hljs-params">()</span><br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Sub:Fn_3...\n&quot;</span>);<br>    &#125;<br>&#125;;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>* argv[])</span><br>&#123;<br><span class="hljs-comment">//查看 Sub 的虚函数表</span><br>    Sub sub;<br><br><span class="hljs-comment">//观察大小：虚函数表只有一个</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%x\n&quot;</span>,<span class="hljs-keyword">sizeof</span>(sub));<br><br><span class="hljs-comment">//通过函数指针调用函数，验证正确性</span><br>    <span class="hljs-keyword">typedef</span> <span class="hljs-title function_">void</span><span class="hljs-params">(*pFunction)</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br><br><br><span class="hljs-comment">//对象的前四个字节是就是虚函数表</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Sub 的虚函数表地址为：%x\n&quot;</span>,*(<span class="hljs-type">int</span>*)&amp;sub);<br><br>pFunction pFn;<br><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">6</span>;i++)<br>&#123;<br><span class="hljs-type">int</span> temp = *((<span class="hljs-type">int</span>*)(*(<span class="hljs-type">int</span>*)&amp;sub)+i);<br><span class="hljs-keyword">if</span>(temp == <span class="hljs-number">0</span>)<br>&#123;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>pFn = (pFunction)temp;<br>pFn();<br>&#125;<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="总结-6"><a href="#总结-6" class="headerlink" title="总结"></a>总结</h3><p><img src="/../images/image-20231216162536308.png" alt="image-20231216162536308"></p><h1 id="前期绑定与动态绑定"><a href="#前期绑定与动态绑定" class="headerlink" title="前期绑定与动态绑定"></a>前期绑定与动态绑定</h1><h2 id="1、什么是绑定？"><a href="#1、什么是绑定？" class="headerlink" title="1、什么是绑定？"></a>1、什么是绑定？</h2><p>绑定就是将函数调用与地址关联起来.</p><h2 id="练习-1"><a href="#练习-1" class="headerlink" title="练习"></a>练习</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-number">1</span>、定义一个父类：Base 有两个成员X,Y 有一个函数Print(非virtul)<br>能够打印X,Y的值.<br><br>定义<span class="hljs-number">3</span>个子类：Sub1  有一个成员A<br><br>    Sub2  有一个成员B<br><br>    Sub3  有一个成员C<br><br>    <br>每个子类有一个函数Print(非virtul)，打印所有成员.<br><br>Sub1:打印X Y A<br><br>Sub2:打印X Y B<br><br>Sub3:打印X Y C<br><br><span class="hljs-number">2</span>、定义一个数组，存储Base Sub1 Sub2 Sub3 使用一个循环语句<br>调用所有的Print函数。<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Base</span></span><br><span class="hljs-class">&#123;</span><br>public:<br>    <span class="hljs-type">int</span> X, Y;<br>public:<br>    Base() <br>    &#123;<br>        X = <span class="hljs-number">1</span>;<br>        Y = <span class="hljs-number">2</span>;<br>    &#125;<br>    <span class="hljs-type">void</span> <span class="hljs-title function_">Print</span><span class="hljs-params">()</span><br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Base:%x %x\n&quot;</span>,X,Y);<br>    &#125;<br>&#125;;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Sub1</span>:</span>public Base<br>&#123;<br>public:<br>    <span class="hljs-type">int</span> A;<br>public:<br>    Sub1()<br>    &#123;<br>        X = <span class="hljs-number">4</span>;<br>        Y = <span class="hljs-number">5</span>;<br>        A = <span class="hljs-number">6</span>;<br>    &#125;<br>    <span class="hljs-type">void</span> <span class="hljs-title function_">Print</span><span class="hljs-params">()</span><br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Sub1:%x %x %x\n&quot;</span>,X,Y,A);<br>    &#125;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Sub2</span>:</span>public Base<br>&#123;<br>public:<br>    <span class="hljs-type">int</span> B;<br>public:<br>    Sub2()<br>    &#123;<br>        X = <span class="hljs-number">7</span>;<br>        Y = <span class="hljs-number">8</span>;<br>        B = <span class="hljs-number">9</span>;<br>    &#125;<br>    <span class="hljs-type">void</span> <span class="hljs-title function_">Print</span><span class="hljs-params">()</span><br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Base2 :%x %x %x\n&quot;</span>,X,Y,B);<br>    &#125;<br>&#125;;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">TestBound</span><span class="hljs-params">()</span><br>&#123;<br>    Base base;<br>    Sub1 sub1;<br>    Sub2 sub2;<br>    Base* arr[] = &#123;&amp;base,&amp;sub1,&amp;sub2&#125;;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; i++)<br>    &#123;<br>        arr[i]-&gt;Print();<br>    &#125;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    TestBound();<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><img src="/../images/image-20231217102919341.png" alt="image-20231217102919341"></p><h2 id="3、将上面所有的Print函数改成virtul-继续观察效果"><a href="#3、将上面所有的Print函数改成virtul-继续观察效果" class="headerlink" title="3、将上面所有的Print函数改成virtul 继续观察效果."></a>3、将上面所有的Print函数改成virtul 继续观察效果.</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Base</span></span><br><span class="hljs-class">&#123;</span><br>public:<br>    <span class="hljs-type">int</span> X, Y;<br>public:<br>    Base() <br>    &#123;<br>        X = <span class="hljs-number">1</span>;<br>        Y = <span class="hljs-number">2</span>;<br>    &#125;<br>    virtual <span class="hljs-type">void</span> <span class="hljs-title function_">Print</span><span class="hljs-params">()</span><br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Base:%x %x\n&quot;</span>,X,Y);<br>    &#125;<br>&#125;;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Sub1</span>:</span>public Base<br>&#123;<br>public:<br>    <span class="hljs-type">int</span> A;<br>public:<br>    Sub1()<br>    &#123;<br>        X = <span class="hljs-number">4</span>;<br>        Y = <span class="hljs-number">5</span>;<br>        A = <span class="hljs-number">6</span>;<br>    &#125;<br>    virtual <span class="hljs-type">void</span> <span class="hljs-title function_">Print</span><span class="hljs-params">()</span><br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Sub1:%x %x %x\n&quot;</span>,X,Y,A);<br>    &#125;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Sub2</span>:</span>public Base<br>&#123;<br>public:<br>    <span class="hljs-type">int</span> B;<br>public:<br>    Sub2()<br>    &#123;<br>        X = <span class="hljs-number">7</span>;<br>        Y = <span class="hljs-number">8</span>;<br>        B = <span class="hljs-number">9</span>;<br>    &#125;<br>    virtual <span class="hljs-type">void</span> <span class="hljs-title function_">Print</span><span class="hljs-params">()</span><br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Base2 :%x %x %x\n&quot;</span>,X,Y,B);<br>    &#125;<br>&#125;;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">TestBound</span><span class="hljs-params">()</span><br>&#123;<br>    Base base;<br>    Sub1 sub1;<br>    Sub2 sub2;<br>    Base* arr[] = &#123;&amp;base,&amp;sub1,&amp;sub2&#125;;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; i++)<br>    &#123;<br>        arr[i]-&gt;Print();<br>    &#125;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    TestBound();<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><img src="/../images/image-20231217102831719.png" alt="image-20231217102831719"></p><h2 id="4、为什么析构函数要定义成虚函数"><a href="#4、为什么析构函数要定义成虚函数" class="headerlink" title="4、为什么析构函数要定义成虚函数"></a>4、为什么析构函数要定义成虚函数</h2><p>如果不定义成虚函数，他只会析构父类函数</p><h2 id="总结-7"><a href="#总结-7" class="headerlink" title="总结"></a>总结</h2><p>1、只有virtual的函数是动态绑定.</p><p>2、动态绑定还有一个名字：多态（一种类型能体现出不同的行为）</p><h1 id="引用类型"><a href="#引用类型" class="headerlink" title="引用类型"></a>引用类型</h1><h2 id="总结：-6"><a href="#总结：-6" class="headerlink" title="总结："></a>总结：</h2><p>1、引用类型<strong>是C++里面</strong>的类型</p><p>2、引用类型<strong>只能赋值一次</strong>，不能重新赋值</p><p>3、引用只是变量的一个别名.</p><p>4、引用可以理解成是编译器维护的一个指针，但并不占用空间(如何去理解这句话？).</p><p>5、使用引用可以像指针那样去访问、修改对象的内容，<strong>但更加安全</strong>.</p><p>例：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Base</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-type">int</span> x;<br><span class="hljs-type">int</span> y;<br>Base(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> y)<br>&#123;<br>this-&gt;x = x;<br>this-&gt;y = y;<br>&#125;<br>&#125;;<br><span class="hljs-type">void</span> <span class="hljs-title function_">PrintByPoint</span><span class="hljs-params">(Base* pb)</span><br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d  %d\n&quot;</span>,pb-&gt;x,pb-&gt;y);<br>pb = (Base*)<span class="hljs-number">0x123456</span>;<br><span class="hljs-comment">//为所欲为...</span><br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">PrintByRef</span><span class="hljs-params">(Base&amp; refb,Base* pb)</span> <br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d  %d\n&quot;</span>,refb.x,refb.y);<br>Base <span class="hljs-title function_">b1</span><span class="hljs-params">(<span class="hljs-number">21</span>,<span class="hljs-number">31</span>)</span>;<br><span class="hljs-comment">//&amp;refb = b1; //引用不能重新赋值</span><br>refb = b1;  <span class="hljs-comment">//这个不是重新赋值，这个是把b1的值赋给refb代表的对象</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d  %d\n&quot;</span>,pb-&gt;x,pb-&gt;y);<br>&#125;<br><br>为了避免出现这种情况，可以将refb声明为常量，不可修改：<br><span class="hljs-type">void</span> <span class="hljs-title function_">PrintByRef</span><span class="hljs-params">(<span class="hljs-type">const</span> Base&amp; refb)</span><br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d  %d\n&quot;</span>,refb.x,refb.y);<br>Base <span class="hljs-title function_">b1</span><span class="hljs-params">(<span class="hljs-number">21</span>,<span class="hljs-number">31</span>)</span>;<br><span class="hljs-comment">//&amp;refb = b1; //引用不能重新赋值</span><br><span class="hljs-comment">//refb = b1;  //不允许</span><br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>* argv[])</span><br>&#123;<br>Base <span class="hljs-title function_">base</span><span class="hljs-params">(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>)</span>;<br>PrintByRef(base,&amp;base);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>​</p><h1 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h1><h2 id="1、在函数中使用"><a href="#1、在函数中使用" class="headerlink" title="1、在函数中使用"></a>1、在函数中使用</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs c">template&lt;class T&gt;<br><span class="hljs-type">void</span> <span class="hljs-title function_">Sort</span><span class="hljs-params">(T arr,<span class="hljs-type">int</span> nLength)</span><br>&#123;<br><span class="hljs-type">int</span> i;<br><span class="hljs-type">int</span> k;<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;nLength<span class="hljs-number">-1</span>;i++)<br>&#123;<br><span class="hljs-keyword">for</span>(k=<span class="hljs-number">0</span>;k&lt;nLength<span class="hljs-number">-1</span>-i;k++)<br>&#123;<br><span class="hljs-keyword">if</span>(arr[k]&gt;arr[k+<span class="hljs-number">1</span>])<br>&#123;<br><span class="hljs-type">int</span> temp = arr[k];<br>arr[k] = arr[k+<span class="hljs-number">1</span>];<br>arr[k+<span class="hljs-number">1</span>] = temp;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br>template&lt;class T&gt;<br><span class="hljs-type">void</span> <span class="hljs-title function_">Print</span><span class="hljs-params">(T arr,<span class="hljs-type">int</span> nLength)</span><br>&#123;<br><span class="hljs-type">int</span> i;<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;nLength;i++)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,arr[i]);<br>&#125;<br>&#125;<br>template&lt;class T,class E&gt;<br><span class="hljs-type">int</span> <span class="hljs-title function_">Find</span><span class="hljs-params">(T arr,<span class="hljs-type">int</span> nLength,E nElement)</span><br>&#123;<br><span class="hljs-type">int</span> nBegin = <span class="hljs-number">0</span>,nEnd = nLength<span class="hljs-number">-1</span>,nIndex;<br><span class="hljs-keyword">while</span>(nBegin&lt;=nEnd)<br>&#123;<br>nIndex = (nBegin+nEnd)/<span class="hljs-number">2</span>;<span class="hljs-comment">//(nBegin+nEnd)&gt;&gt;1</span><br><span class="hljs-keyword">if</span>(nElement &gt; arr[nIndex])<br>&#123;<br>nBegin = nIndex+<span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(nElement &lt; arr[nIndex])<br>&#123;<br>nEnd = nIndex<span class="hljs-number">-1</span>;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-keyword">return</span> nIndex;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>* argv[])</span><br>&#123;<br><br><span class="hljs-type">char</span> arr[] = &#123;<span class="hljs-number">2</span>,<span class="hljs-number">6</span>,<span class="hljs-number">1</span>,<span class="hljs-number">8</span>,<span class="hljs-number">4</span>,<span class="hljs-number">3</span>&#125;;<br><br>Sort(arr,<span class="hljs-number">6</span>);<br><br>Print(arr,<span class="hljs-number">6</span>);<br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;---------------\n&quot;</span>);<br><br><span class="hljs-type">int</span> x = Find(arr,<span class="hljs-number">6</span>,<span class="hljs-number">1</span>);<br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%x\n&quot;</span>,x);<br><br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2、在结构体-类中使用"><a href="#2、在结构体-类中使用" class="headerlink" title="2、在结构体&#x2F;类中使用"></a>2、在结构体&#x2F;类中使用</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs c">template&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>,<span class="hljs-keyword">class</span> <span class="hljs-title">M</span>&gt;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Base</span></span><br><span class="hljs-class">&#123;</span><br>T x;<br>T y;<br><br>M a;<br>M b;<br><br>T <span class="hljs-title function_">Max</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-keyword">if</span>(x&gt;y)<br>&#123;<br><span class="hljs-keyword">return</span> x;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-keyword">return</span> y;<br>&#125;<br>&#125;<br>M <span class="hljs-title function_">Min</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-keyword">if</span>(a&lt;b)<br>&#123;<br><span class="hljs-keyword">return</span> a;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-keyword">return</span> b;<br>&#125;<br>&#125;<br>&#125;;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>* argv[])</span><br>&#123;<br>Base&lt;<span class="hljs-type">int</span>,<span class="hljs-type">char</span>&gt; base;<br>base.x = <span class="hljs-number">10</span>;<br>base.y = <span class="hljs-number">20</span>;<br>base.a = <span class="hljs-number">1</span>;<br>base.b = <span class="hljs-number">2</span>;<br><br><span class="hljs-type">int</span> x = base.Max();<br><br><span class="hljs-type">int</span> y = base.Min();<br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d\n&quot;</span>,x,y);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="总结-8"><a href="#总结-8" class="headerlink" title="总结"></a>总结</h2><p>1、继承是数据的复制</p><p>2、模版是代码的复制</p>]]></content>
    
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>结构体对齐</title>
    <link href="/2023/10/11/%E7%BB%93%E6%9E%84%E4%BD%93%E5%AF%B9%E9%BD%90/"/>
    <url>/2023/10/11/%E7%BB%93%E6%9E%84%E4%BD%93%E5%AF%B9%E9%BD%90/</url>
    
    <content type="html"><![CDATA[<p>32位机器尺寸为4字节（32&#x2F;8）</p><p>64位机器尺寸为8字节（64&#x2F;8）</p><h1 id="一、结构体对齐"><a href="#一、结构体对齐" class="headerlink" title="一、结构体对齐"></a>一、结构体对齐</h1><p>1、结构体大小是多少？</p><p>struct Test<br>{<br>    char  a;&#x2F;&#x2F;1<br>    int b ; &#x2F;&#x2F;4<br>};</p><table><thead><tr><th>a</th><th></th><th></th><th></th></tr></thead><tbody><tr><td>b</td><td>b</td><td>b</td><td>b</td></tr></tbody></table><p>故结果为8</p><p>2、结构体大小是多少？</p><p>struct Test<br>{<br>    int a ;&#x2F;&#x2F;4<br>    __int64 b ;&#x2F;&#x2F;8<br>    char c ;&#x2F;&#x2F;1<br>};</p><table><thead><tr><th>a</th><th>a</th><th>a</th><th>a</th><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td>b</td><td>b</td><td>b</td><td>b</td><td>b</td><td>b</td><td>b</td><td>b</td></tr><tr><td>c</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><p>故结果为24</p><p>3、结构体大小是多少？</p><p>struct Test<br>{<br>    int a ;&#x2F;&#x2F;4<br>    __int64 b ;&#x2F;&#x2F;8<br>    char c ;&#x2F;&#x2F;1<br>    char d ;&#x2F;&#x2F;1<br>};</p><table><thead><tr><th>a</th><th>a</th><th>a</th><th>a</th><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td>b</td><td>b</td><td>b</td><td>b</td><td>b</td><td>b</td><td>b</td><td>b</td></tr><tr><td>c</td><td>d</td><td></td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><p>故结果为24</p><p>4、结构体大小是多少？</p><p>struct Test<br>{</p><p>​char c ;&#x2F;&#x2F;1<br>​    int a ;&#x2F;&#x2F;4<br>​    __int64 b ;&#x2F;&#x2F;8<br>​    char d ;&#x2F;&#x2F;1<br>};</p><table><thead><tr><th>c</th><th></th><th></th><th></th><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td>a</td><td>a</td><td>a</td><td>a</td><td></td><td></td><td></td><td></td></tr><tr><td>b</td><td>b</td><td>b</td><td>b</td><td>b</td><td>b</td><td>b</td><td>b</td></tr><tr><td>d</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><p>故结果为32</p><h1 id="二、为什么要有数据对齐？"><a href="#二、为什么要有数据对齐？" class="headerlink" title="二、为什么要有数据对齐？"></a>二、为什么要有数据对齐？</h1><p>本质：效率还是空间，二选一的结果.</p><h1 id="三、面包还是牛奶？这是个问题。。。选择空间还是选择效率！"><a href="#三、面包还是牛奶？这是个问题。。。选择空间还是选择效率！" class="headerlink" title="三、面包还是牛奶？这是个问题。。。选择空间还是选择效率！"></a>三、面包还是牛奶？这是个问题。。。选择空间还是选择效率！</h1><h2 id="pragma-pack的基本用法为："><a href="#pragma-pack的基本用法为：" class="headerlink" title="#pragma pack的基本用法为："></a>#pragma pack的基本用法为：</h2><p>#pragma pack( n )<br>结构体。。。<br>#pragma pack(  )</p><p>对齐参数：n为字节对齐数，其取值为1、2、4、8，默认是8。</p><p>如果这个值比结构体成员的sizeof值小，那么该成员的偏移量应该以此值为准，<br>即是说，结构体成员的偏移量应该取二者的最小值.</p><p>#pragma pack(8)<br>struct Test<br>{<br>     int a ;<br>     __int64 b ;<br>     char c ;<br>};<br>#pragma pack()</p><p><img src="/../images/image-20231011194046167.png" alt="image-20231011194046167"></p><h1 id="四、VC6默认的结构对齐大小"><a href="#四、VC6默认的结构对齐大小" class="headerlink" title="四、VC6默认的结构对齐大小"></a>四、VC6默认的结构对齐大小</h1><p>项目右键–&gt;setting–&gt;C&#x2F;C++–&gt;Code Generation</p><p>如果这个值比结构体成员的sizeof值小，那么该成员的偏移量应该以此值为准，<br>即是说，结构体成员的偏移量应该取二者的最小值，</p><h1 id="对齐原则："><a href="#对齐原则：" class="headerlink" title="对齐原则："></a>对齐原则：</h1><p><strong>原则一：</strong>数据成员对齐规则：结构的数据成员，第一个数据成员放在offset为0的地方，以后每个数据成员存储的起始位置要从<br>该成员大小的整数倍开始(比如int在32位机为４字节，则要从4的整数倍地址开始存储).</p><p><strong>原则二：</strong>结构体的总大小，也就是sizeof的结果，必须是其内部最大成员的整数倍，不足的要补齐。</p><p><strong>原则三：</strong>如果一个结构里有某些结构体成员，则结构体成员要从其内部最大元素大小的整数倍地址开始存储。<br>(struct a里存有struct b，b里有char，int，double等元素，那b应该从8的整数倍开始存储.)</p><p><strong>原则四：</strong>对齐参数如果比结构体成员的sizeof值小，该成员的偏移量应该以此值为准.<br>    也就是说，结构体成员的偏移量应该取二者的最小值.</p><h1 id="5、建议："><a href="#5、建议：" class="headerlink" title="5、建议："></a>5、建议：</h1><p>按照数据类型由小到大的顺序进行书写</p>]]></content>
    
    
    
    <tags>
      
      <tag>C语言</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C语言反汇编</title>
    <link href="/2023/10/11/C%E8%AF%AD%E8%A8%80%E5%8F%8D%E6%B1%87%E7%BC%96/"/>
    <url>/2023/10/11/C%E8%AF%AD%E8%A8%80%E5%8F%8D%E6%B1%87%E7%BC%96/</url>
    
    <content type="html"><![CDATA[<h1 id="switch语句"><a href="#switch语句" class="headerlink" title="switch语句"></a>switch语句</h1><h2 id="1、switch语句，是if语句的简写"><a href="#1、switch语句，是if语句的简写" class="headerlink" title="1、switch语句，是if语句的简写"></a>1、switch语句，是if语句的简写</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-keyword">if</span>(表达式 == 常量<span class="hljs-number">1</span>)switch(表达式)<br>&#123;   &#123;<br><span class="hljs-regexp">//</span>...代码case 常量表达式<span class="hljs-number">1</span>：<br>&#125;     语句;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(表达式 == 常量<span class="hljs-number">2</span>)  <span class="hljs-keyword">break</span>;<br>&#123;case 常量表达式<span class="hljs-number">2</span>：<br><span class="hljs-regexp">//</span>...代码语句;<br>&#125;    <span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(表达式 == 常量<span class="hljs-number">3</span>)  case 常量表达式<span class="hljs-number">3</span>：<br>&#123; 语句;<br><span class="hljs-regexp">//</span>...代码   <span class="hljs-keyword">break</span>;<br>&#125;default:<br><span class="hljs-keyword">else</span>  语句;<br>&#123;     <span class="hljs-keyword">break</span>;<br><span class="hljs-regexp">//</span>...代码 &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>switch要求：</strong></p><p>1、case后面必须是常量表达式</p><p>2、case后常量表达式的值不能一样</p><p>3、switch后面表达式必须为整数</p><h2 id="2、break加与不加有什么特点-default语句可以省略吗？"><a href="#2、break加与不加有什么特点-default语句可以省略吗？" class="headerlink" title="2、break加与不加有什么特点?default语句可以省略吗？"></a>2、break加与不加有什么特点?default语句可以省略吗？</h2><p>break不加他会继续执行下一个case;</p><p>可以省略default（如果不需要）</p><h2 id="3、添加case后面的值，一个一个增加，观察反汇编代码的变化-何时生成大表（实验环境VC6-0）"><a href="#3、添加case后面的值，一个一个增加，观察反汇编代码的变化-何时生成大表（实验环境VC6-0）" class="headerlink" title="3、添加case后面的值，一个一个增加，观察反汇编代码的变化(何时生成大表（实验环境VC6.0）"></a>3、添加case后面的值，一个一个增加，观察反汇编代码的变化(何时生成大表（实验环境VC6.0）</h2><p><strong>当case值连续且数目大于等于4时，编译器会在内存中生成一张大表</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdafx.h&quot;</span></span><br><span class="hljs-type">void</span> <span class="hljs-title function_">function</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span><br>&#123;<br><span class="hljs-keyword">switch</span>(x)<br>&#123;<br><span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;1&quot;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;2&quot;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;3&quot;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;4&quot;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">default</span>:<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;error&quot;</span>);<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>* argv[])</span>&#123;<br>function(<span class="hljs-number">3</span>);<br>&#125;<br><br></code></pre></td></tr></table></figure><p><img src="/../images/image-20231011145921458.png" alt="image-20231011145921458"></p><h2 id="4、将3中的常量值的顺序打乱，观察反汇编代码-观察顺序是否会影响生成大表"><a href="#4、将3中的常量值的顺序打乱，观察反汇编代码-观察顺序是否会影响生成大表" class="headerlink" title="4、将3中的常量值的顺序打乱，观察反汇编代码(观察顺序是否会影响生成大表)."></a>4、将3中的常量值的顺序打乱，观察反汇编代码(观察顺序是否会影响生成大表).</h2><p><strong>不会影响</strong></p><h2 id="5、将case后面的值改成从100开始到109，观察汇编变化-观察值较大时是否生成大表"><a href="#5、将case后面的值改成从100开始到109，观察汇编变化-观察值较大时是否生成大表" class="headerlink" title="5、将case后面的值改成从100开始到109，观察汇编变化(观察值较大时是否生成大表)."></a>5、将case后面的值改成从100开始到109，观察汇编变化(观察值较大时是否生成大表).</h2><p><strong>会生成</strong></p><h2 id="6、将连续的10项中抹去1项或者2项，观察反汇编有无变化-观察大表空缺位置的处理"><a href="#6、将连续的10项中抹去1项或者2项，观察反汇编有无变化-观察大表空缺位置的处理" class="headerlink" title="6、将连续的10项中抹去1项或者2项，观察反汇编有无变化(观察大表空缺位置的处理)."></a>6、将连续的10项中抹去1项或者2项，观察反汇编有无变化(观察大表空缺位置的处理).</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdafx.h&quot;</span></span><br><span class="hljs-type">void</span> <span class="hljs-title function_">function</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span><br>&#123;<br><span class="hljs-keyword">switch</span>(x)<br>&#123;<br><span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;1&quot;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">case 2:</span><br><span class="hljs-comment">printf(&quot;2&quot;);</span><br><span class="hljs-comment">break;</span><br><span class="hljs-comment">case 3:</span><br><span class="hljs-comment">printf(&quot;3&quot;);</span><br><span class="hljs-comment">break;</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;4&quot;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">5</span>:<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;5&quot;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">6</span>:<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;6&quot;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">7</span>:<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;7&quot;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">8</span>:<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;8&quot;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">9</span>:<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;9&quot;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">10</span>:<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;10&quot;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">default</span>:<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;error&quot;</span>);<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>* argv[])</span>&#123;<br>function(<span class="hljs-number">3</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/../images/image-20231011151041379.png" alt="image-20231011151041379"><br>    <strong>故，编译器会将抹去的中间几个case用default地址填充</strong></p><h2 id="7、在10项中连续抹去，不要抹去最大值和最小值-观察何时生成小表"><a href="#7、在10项中连续抹去，不要抹去最大值和最小值-观察何时生成小表" class="headerlink" title="7、在10项中连续抹去，不要抹去最大值和最小值(观察何时生成小表)."></a>7、在10项中连续抹去，不要抹去最大值和最小值(观察何时生成小表).</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdafx.h&quot;</span></span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">function</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span><br>&#123;<br><span class="hljs-keyword">switch</span>(x)<br>&#123;<br><span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;1&quot;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">case 2:</span><br><span class="hljs-comment">printf(&quot;2&quot;);</span><br><span class="hljs-comment">break;</span><br><span class="hljs-comment">case 3:</span><br><span class="hljs-comment">printf(&quot;3&quot;);</span><br><span class="hljs-comment">break;</span><br><span class="hljs-comment">case 4:</span><br><span class="hljs-comment">printf(&quot;4&quot;);</span><br><span class="hljs-comment">break;</span><br><span class="hljs-comment">case 5:</span><br><span class="hljs-comment">printf(&quot;5&quot;);</span><br><span class="hljs-comment">break;</span><br><span class="hljs-comment">case 6:</span><br><span class="hljs-comment">printf(&quot;6&quot;);</span><br><span class="hljs-comment">break;</span><br><span class="hljs-comment">case 7:</span><br><span class="hljs-comment">printf(&quot;7&quot;);</span><br><span class="hljs-comment">break;*/</span><br><span class="hljs-keyword">case</span> <span class="hljs-number">8</span>:<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;8&quot;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">9</span>:<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;9&quot;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">10</span>:<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;10&quot;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">default</span>:<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;error&quot;</span>);<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>* argv[])</span>&#123;<br>function(<span class="hljs-number">8</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>抹去6个case会生成小表（紧跟在大表后面）</strong></p><p><img src="/../images/image-20231011153436948.png" alt="image-20231011153436948"></p><h2 id="8、将case后面常量表达式改成毫不连续的值，观察反汇编变化"><a href="#8、将case后面常量表达式改成毫不连续的值，观察反汇编变化" class="headerlink" title="8、将case后面常量表达式改成毫不连续的值，观察反汇编变化."></a>8、将case后面常量表达式改成毫不连续的值，观察反汇编变化.</h2><p>结果等同于if…else…</p><h2 id="9、如果case值相差256，编译器就会执行搜索二叉树"><a href="#9、如果case值相差256，编译器就会执行搜索二叉树" class="headerlink" title="9、如果case值相差256，编译器就会执行搜索二叉树"></a>9、如果case值相差256，编译器就会执行搜索二叉树</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdafx.h&quot;</span></span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">function</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span><br>&#123;<br><span class="hljs-keyword">switch</span>(x)<br>&#123;<br><span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;1&quot;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">case 2:</span><br><span class="hljs-comment">printf(&quot;2&quot;);</span><br><span class="hljs-comment">break;</span><br><span class="hljs-comment">case 3:</span><br><span class="hljs-comment">printf(&quot;3&quot;);</span><br><span class="hljs-comment">break;</span><br><span class="hljs-comment">case 4:</span><br><span class="hljs-comment">printf(&quot;4&quot;);</span><br><span class="hljs-comment">break;</span><br><span class="hljs-comment">case 5:</span><br><span class="hljs-comment">printf(&quot;5&quot;);</span><br><span class="hljs-comment">break;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">case 6:</span><br><span class="hljs-comment">printf(&quot;6&quot;);</span><br><span class="hljs-comment">break;</span><br><span class="hljs-comment">case 7:</span><br><span class="hljs-comment">printf(&quot;7&quot;);</span><br><span class="hljs-comment">break;*/</span><br><span class="hljs-keyword">case</span> <span class="hljs-number">257</span>:<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;257&quot;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">1111</span>:<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;1111&quot;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">1430</span>:<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;1430&quot;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">default</span>:<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;error&quot;</span>);<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>* argv[])</span>&#123;<br>function(<span class="hljs-number">8</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/../images/image-20231011160142792.png" alt="image-20231011160142792"></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><h2 id="采用多个比较和jcc跳转指令"><a href="#采用多个比较和jcc跳转指令" class="headerlink" title="采用多个比较和jcc跳转指令"></a>采用多个比较和jcc跳转指令</h2><p><img src="/../images/switch%E5%8F%8D%E6%B1%87%E7%BC%96.png" alt="switch反汇编"></p><h2 id="采用case地址表"><a href="#采用case地址表" class="headerlink" title="采用case地址表"></a>采用case地址表</h2><p><img src="/../images/image-20210309012444407.png" alt="image-20210309012444407"></p><h2 id="采用case地址表和偏移表"><a href="#采用case地址表和偏移表" class="headerlink" title="采用case地址表和偏移表"></a>采用case地址表和偏移表</h2><p><img src="/../images/image-20210309012502593.png" alt="image-20210309012502593"></p>]]></content>
    
    
    
    <tags>
      
      <tag>C语言</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>全局变量、局部变量</title>
    <link href="/2023/10/07/%E5%85%A8%E5%B1%80%E5%8F%98%E9%87%8F%E3%80%81%E5%B1%80%E9%83%A8%E5%8F%98%E9%87%8F/"/>
    <url>/2023/10/07/%E5%85%A8%E5%B1%80%E5%8F%98%E9%87%8F%E3%80%81%E5%B1%80%E9%83%A8%E5%8F%98%E9%87%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> g_n = <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">Function</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-type">int</span> x = <span class="hljs-number">2</span>;<br><span class="hljs-type">int</span> y = <span class="hljs-number">3</span>;<br><span class="hljs-keyword">return</span> g_n+x+y;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">Function2</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-type">int</span> y = <span class="hljs-number">3</span>;<br><span class="hljs-keyword">return</span> g_n+x+y;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="全局变量的特点"><a href="#全局变量的特点" class="headerlink" title="全局变量的特点"></a>全局变量的特点</h2><p>1、全局变量在程序编译完成后地址就已经确定下来了，只要程序启动，全局变量就已经存在了，启动后里面<br>是否有值取决于声明时是否给定了初始值，如果没有，默认为0<br>2、全局变量的值可以被所有函数所修改，里面存储的是最后一次修改的值.<br>3、全局变量所占内存会一直存在，知道整个进程结束.</p><p>4、全局变量的反汇编识别：</p><p>MOV 寄存器,byte&#x2F;word&#x2F;dword ptr ds:[0x12345678]</p><p>通过寄存器的宽度，或者byte&#x2F;word&#x2F;dword 来判断全局变量的宽度</p><p><strong>全局变量就是所谓的基址</strong></p><h1 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a>局部变量</h1><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-function"><span class="hljs-built_in">int</span> <span class="hljs-title">Function</span>()</span><br>&#123;<br><span class="hljs-built_in">int</span> x = <span class="hljs-number">2</span>;<br><span class="hljs-built_in">int</span> y = <span class="hljs-number">3</span>;<br><br><span class="hljs-keyword">return</span> g_n+x+y;<br>&#125;<br><span class="hljs-function"><span class="hljs-built_in">int</span> <span class="hljs-title">Function2</span>()</span><br>&#123;<br><span class="hljs-built_in">int</span> x = <span class="hljs-number">3</span>;<br><span class="hljs-built_in">int</span> y = <span class="hljs-number">4</span>;<br><br><span class="hljs-keyword">return</span> g_n+x+y;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="局部变量的特点："><a href="#局部变量的特点：" class="headerlink" title="局部变量的特点："></a>局部变量的特点：</h2><p>1、局部变量在程序编译完成后并没有分配固定的地址.</p><p>2、在所属的方法没有被调用时，局部变量并不会分配内存地址，只有当所属的程序被调用了，才会在堆栈中分配内存.</p><p>3、当局部变量所属的方法执行完毕后，局部变量所占用的内存将变成垃圾数据.局部变量消失.</p><p>4、局部变量只能在方法内部使用，函数A无法使用函数B的局部变量.<br>5、局部变量的反汇编识别：</p><p>[ebp-4]</p><p>[ebp-8]</p><p>[ebp-0xC]</p><h1 id="内存图："><a href="#内存图：" class="headerlink" title="内存图："></a>内存图：</h1><p><img src="/../images/image-20231007153416481.png" alt="image-20231007153416481"></p>]]></content>
    
    
    
    <tags>
      
      <tag>C语言</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>常见的几种调用约定</title>
    <link href="/2023/10/07/%E8%B0%83%E7%94%A8%E7%BA%A6%E5%AE%9A/"/>
    <url>/2023/10/07/%E8%B0%83%E7%94%A8%E7%BA%A6%E5%AE%9A/</url>
    
    <content type="html"><![CDATA[<h1 id="常见的几种调用约定："><a href="#常见的几种调用约定：" class="headerlink" title="常见的几种调用约定："></a>常见的几种调用约定：</h1><table><thead><tr><th>调用约定</th><th>参数压栈顺序</th><th>平衡堆栈</th></tr></thead><tbody><tr><td>__cdecl</td><td>从右至左入栈</td><td>调用者清理栈</td></tr><tr><td>__stdcall</td><td>从右至左入栈</td><td>自身清理堆栈</td></tr><tr><td>__fastcall</td><td>ECX&#x2F;EDX传送前两个，剩下:从右至左入栈</td><td>自身清理堆栈</td></tr></tbody></table><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-number">1</span>、<span class="hljs-type">int</span> __cdecl <span class="hljs-title function_">Plus</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span><span class="hljs-comment">//外平栈</span><br>&#123;<br><span class="hljs-keyword">return</span> a+b;<br>&#125;<br><br>push        <span class="hljs-number">2</span><br>push        <span class="hljs-number">1</span><br>call        @ILT+<span class="hljs-number">15</span>(Plus) (<span class="hljs-number">00401014</span>)<br>add         esp,<span class="hljs-number">8</span><br>    <br><span class="hljs-number">2</span>、<span class="hljs-type">int</span> __stdcall <span class="hljs-title function_">Plus</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span><span class="hljs-comment">//内平栈</span><br>&#123;<br><span class="hljs-keyword">return</span> a+b;<br>&#125;<br><br>push        <span class="hljs-number">2</span><br>push        <span class="hljs-number">1</span><br>call        @ILT+<span class="hljs-number">10</span>(Plus) (<span class="hljs-number">0040100f</span>)<br><br>函数内部：<br><br>ret         <span class="hljs-number">8</span><br><br><span class="hljs-number">3</span>、<span class="hljs-type">int</span> __fastcall <span class="hljs-title function_">Plus</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span><br>&#123;<br><span class="hljs-keyword">return</span> a+b;<br>&#125;<br><br>mov         edx,<span class="hljs-number">2</span><br>mov         ecx,<span class="hljs-number">1</span><br>call        @ILT+<span class="hljs-number">0</span>(Plus) (<span class="hljs-number">00401005</span>)<br><br>函数内部：<br><br>ret         <br><br>    <span class="hljs-number">4</span>、<span class="hljs-type">int</span> __fastcall <span class="hljs-title function_">Plus4</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b,<span class="hljs-type">int</span> c,<span class="hljs-type">int</span> d)</span><br>&#123;<br><span class="hljs-keyword">return</span> a+b+c+d;<br>&#125;<br><br>push        <span class="hljs-number">4</span><br>push        <span class="hljs-number">3</span><br>mov         edx,<span class="hljs-number">2</span><br>mov         ecx,<span class="hljs-number">1</span><br>call        @ILT+<span class="hljs-number">5</span>(Plus) (<span class="hljs-number">0040100</span>a)<br><br>函数内部：<br><br>ret         <span class="hljs-number">8</span><span class="hljs-comment">//内平</span><br><br></code></pre></td></tr></table></figure><p>58：55</p><p>1-26</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>指针</title>
    <link href="/2023/10/07/%E6%8C%87%E9%92%88/"/>
    <url>/2023/10/07/%E6%8C%87%E9%92%88/</url>
    
    <content type="html"><![CDATA[<h2 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h2><p>1、”带*类型“ 的特征探测：宽度</p><p>2、”带*类型“ 的特征探测：声明</p><p>3、”带*类型“ 的特征探测：赋值</p><p>4、”带*类型“ 的特征探测：++、–</p><p>5、”带*类型“ 的特征探测：加上&#x2F;减去 一个整数</p><p>6、”带*类型“ 的特征探测：求差值</p><p>7、”带*类型“ 的特征探测：比较</p><p><strong>笔记</strong></p><p>1、带有*的变量类型的标准写法：变量类型 *  变量名；</p><p>​如int*  a</p><p>2、任何类型都可以带*，加上 *以后是新的类型；</p><p>3、*可以是任意多个。</p><p>4、带*类型的变量赋值时只能使用”完整写法”；</p><p>5、带*类型的变量宽度永远是4字节(本机尺寸)，无论类型是什么，无论有几个 *；</p><p>6、带*类型的变量可以加、减去一个整数，但不能乘或者除；</p><p>7、带*类型变量与其他整数相加或者相减时；</p><p>​带<em>类型变量 + N &#x3D; 带</em>类型变量 + N*(去掉一个 * 后类型的宽度)</p><p>​带<em>类型变量  - N &#x3D; 带</em>类型变量 - N*(去掉一个 * 后类型的宽度)</p><p>8、两个类型相同的带*类型的变量可以进行减法操作；</p><p>9、相减的结果要除以去掉一个*的数据的宽度；</p><p>10、带*的变量，如果类型相同，可以进行大小比较；</p><p>注：关于本机尺寸：32位机器的本机尺寸位4B; 64位机器的本机尺寸为8B;</p><h3 id="赋值"><a href="#赋值" class="headerlink" title="赋值"></a>赋值</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">char</span>* a;<br><span class="hljs-type">short</span>* b;<br><span class="hljs-type">int</span>* c;<br><br>a = (<span class="hljs-type">char</span>*)<span class="hljs-number">1</span>;<br>b = (<span class="hljs-type">short</span>*)<span class="hljs-number">2</span>;<br>c = (<span class="hljs-type">int</span>*)<span class="hljs-number">3</span>;<br></code></pre></td></tr></table></figure><h3 id="、–"><a href="#、–" class="headerlink" title="++、–"></a>++、–</h3><p><strong>++：结果为原有值加上除去一个*后数据宽度；</strong></p><p><strong>– 类似</strong></p><p>如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">char</span>* a;<br><span class="hljs-type">short</span>* b;<br><span class="hljs-type">int</span>* c;<br><br>a = (<span class="hljs-type">char</span>*)<span class="hljs-number">100</span>;<br>b = (<span class="hljs-type">short</span>*)<span class="hljs-number">100</span>;<br>c = (<span class="hljs-type">int</span>*)<span class="hljs-number">100</span>;<br><br>a++;<br>b++;<br>c++;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d %d&quot;</span>,a,b,c);<br></code></pre></td></tr></table></figure><p>得到结果为：101  102  104</p><p>因为：</p><p>​char* 去掉一个*为char,而char的数据宽度为1字节；</p><p>​short* 去掉一个*为short,而short的数据宽度为1字节；</p><p>​int* 去掉一个*为int,而int的数据宽度为1字节；</p><p>同理：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">char</span>** a;<br><span class="hljs-type">short</span>** b;<br><span class="hljs-type">int</span>** c;<br><br>a = (<span class="hljs-type">char</span>**)<span class="hljs-number">100</span>;<br>b = (<span class="hljs-type">short</span>**)<span class="hljs-number">100</span>;<br>c = (<span class="hljs-type">int</span>**)<span class="hljs-number">100</span>;<br><br>a++;<br>b++;<br>c++;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d %d&quot;</span>,a,b,c);<br></code></pre></td></tr></table></figure><p>的结果应为  104   104   104</p><h3 id="加上-减去一个整数"><a href="#加上-减去一个整数" class="headerlink" title="加上&#x2F;减去一个整数"></a>加上&#x2F;减去一个整数</h3><p><strong>结果为原有值 加上 除去一个*后数据宽度 与 被加整数 的乘积；</strong></p><p><strong>减法类似</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">char</span>* a;<br><span class="hljs-type">short</span>* b;<br><span class="hljs-type">int</span>* c;<br><br>a = (<span class="hljs-type">char</span>*)<span class="hljs-number">100</span>;<br>b = (<span class="hljs-type">short</span>*)<span class="hljs-number">100</span>;<br>c = (<span class="hljs-type">int</span>*)<span class="hljs-number">100</span>;<br><br>a = a + <span class="hljs-number">5</span>;<br>b = b + <span class="hljs-number">5</span>;<br>c = c + <span class="hljs-number">5</span>;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d %d&quot;</span>,a,b,c);<br></code></pre></td></tr></table></figure><p>得到结果为：105  110  120</p><p>因为：</p><p>​char* 去掉一个*为char,而char的数据宽度为1字节，100 + 1 * 5 &#x3D; 105；</p><p>​short* 去掉一个*为short,而short的数据宽度为2字节，100 + 2 * 5 &#x3D; 110；</p><p>​int* 去掉一个*为int,而int的数据宽度为4字节，100 + 4 * 5 &#x3D; 120；</p><p>同理：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">char</span>***** a;<br><span class="hljs-type">short</span>***** b;<br><span class="hljs-type">int</span>***** c;<br><br>a = (<span class="hljs-type">char</span>*****)<span class="hljs-number">100</span>;<br>b = (<span class="hljs-type">short</span>*****)<span class="hljs-number">100</span>;<br>c = (<span class="hljs-type">int</span>*****)<span class="hljs-number">100</span>;<br><br>a = a + <span class="hljs-number">5</span>;<br>b = b + <span class="hljs-number">5</span>;<br>c = c + <span class="hljs-number">5</span>;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d %d&quot;</span>,a,b,c);<br></code></pre></td></tr></table></figure><p>的结果为 120 120 120</p><h3 id="求差值"><a href="#求差值" class="headerlink" title="求差值"></a>求差值</h3><p><strong>两个类型相同的带 * 类型的变量可以进行减法操作；相减的结果要除以 去掉一个*的数据的宽度,结果为int型</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">char</span>* a;<br><span class="hljs-type">char</span>* b;<br><br>a = (<span class="hljs-type">char</span>*)<span class="hljs-number">200</span>;<br>b = (<span class="hljs-type">char</span>*)<span class="hljs-number">100</span>;<br><br><span class="hljs-type">int</span> x = a - b;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,x);<br></code></pre></td></tr></table></figure><p>结果为 ：(200-100)&#x2F;1 &#x3D; 100</p><p>同理：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">short</span>* a;<br><span class="hljs-type">short</span>* b;<br><br>a = (<span class="hljs-type">short</span>*)<span class="hljs-number">200</span>;<br>b = (<span class="hljs-type">short</span>*)<span class="hljs-number">100</span>;<br><br><span class="hljs-type">int</span> x = a - b;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,x);<br></code></pre></td></tr></table></figure><p>的结果为（200-100）&#x2F; 2 &#x3D; 50；</p><h3 id="作比较"><a href="#作比较" class="headerlink" title="作比较"></a>作比较</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">char</span>***** a;<br><span class="hljs-type">char</span>***** b;<br><br><br>a = (<span class="hljs-type">char</span>*****)<span class="hljs-number">200</span>;<br>b = (<span class="hljs-type">char</span>*****)<span class="hljs-number">100</span>;<br><br><span class="hljs-keyword">if</span>(a &gt; b)&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;1&quot;</span>);<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;2&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>结果为：1</p><h4 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs awk">自定义结构体如下：<br>struct Student<br>&#123;<br>    int x;<br>    int y;<br>&#125;; <span class="hljs-regexp">//</span><span class="hljs-number">8</span>B<br><br>第一步：<br>Student**** s;<span class="hljs-regexp">//</span><span class="hljs-number">4</span>B（本机尺寸）<br>s = (Student****)<span class="hljs-number">100</span>;<br>s++; <span class="hljs-regexp">//</span>s的值是多少？<br>s = s+<span class="hljs-number">2</span>; <span class="hljs-regexp">//</span>s的值是多少？<br>s = s-<span class="hljs-number">3</span>; <span class="hljs-regexp">//</span>s的值是多少？<br>解：<br>s++= <span class="hljs-number">100</span> + <span class="hljs-number">4</span> = <span class="hljs-number">104</span><br>s+<span class="hljs-number">2</span>= <span class="hljs-number">100</span> + <span class="hljs-number">2</span>*<span class="hljs-number">4</span> = <span class="hljs-number">108</span><br>s-<span class="hljs-number">3</span>= <span class="hljs-number">100</span> - <span class="hljs-number">3</span>*<span class="hljs-number">4</span> = <span class="hljs-number">88</span><br><br>第二步：<br>Student**** s1;<span class="hljs-regexp">//</span><span class="hljs-number">4</span>B<br>Student**** s2;<span class="hljs-regexp">//</span><span class="hljs-number">4</span>B<br>int x;<span class="hljs-regexp">//</span><span class="hljs-number">4</span>B<br>s1 = (Student****)<span class="hljs-number">200</span>;<br>s2 = (Student****)<span class="hljs-number">100</span>;<br>x = s1-s2; <span class="hljs-regexp">//</span>x的值是多少？<br>解：<br>x = (<span class="hljs-number">200</span>-<span class="hljs-number">100</span>)/<span class="hljs-number">4</span> = <span class="hljs-number">25</span><br><br>第三步：<br>Student* s;<br>s = (Student*)<span class="hljs-number">100</span>;<br>s++; <span class="hljs-regexp">//</span>s的值是多少？<br>s = s+<span class="hljs-number">2</span>; <span class="hljs-regexp">//</span>s的值是多少？<br>s = s-<span class="hljs-number">3</span>; <span class="hljs-regexp">//</span>s的值是多少？<br>解：<br>s++= <span class="hljs-number">100</span> + <span class="hljs-number">8</span> = <span class="hljs-number">108</span><br>s+<span class="hljs-number">2</span>= <span class="hljs-number">100</span> + <span class="hljs-number">2</span>*<span class="hljs-number">8</span> = <span class="hljs-number">116</span><br>s-<span class="hljs-number">3</span>= <span class="hljs-number">100</span> - <span class="hljs-number">3</span>*<span class="hljs-number">8</span> = <span class="hljs-number">76</span><br><br>第四步：<br>Student* s1;<br>Student* s2;<br>int x;<br>s1 = (Student*)<span class="hljs-number">200</span>;<br>s2 = (Student*)<span class="hljs-number">100</span>;<br>x = s1-s2; <span class="hljs-regexp">//</span>x的值是多少？<br>解：<br>x = int ((<span class="hljs-number">200</span>-<span class="hljs-number">100</span>)/<span class="hljs-number">8</span>) = int(<span class="hljs-number">12.5</span>) = <span class="hljs-number">12</span>;<br></code></pre></td></tr></table></figure><h3 id="符号"><a href="#符号" class="headerlink" title="&amp;符号"></a>&amp;符号</h3><p><strong>&amp;是地址符，任何一个变量都可以用&amp;来获取地址，比如&amp;a可以获取到a的地址，其类型为原类型加上</strong>*</p><p>如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">char</span> a;<br><span class="hljs-type">short</span> b;<br><br>则 &amp;a就是a的类型加一颗’*’，即就是<span class="hljs-type">char</span>*；<br>   &amp;b的类型`<span class="hljs-type">short</span>*`<br></code></pre></td></tr></table></figure><p><strong>如果在一个变量前用‘*’，比如</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span>* x   *x == <span class="hljs-type">int</span>;<br></code></pre></td></tr></table></figure><p><strong>得到的结果就是原来类型砍一颗星(与&amp;相反)</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span>* px1 = (<span class="hljs-type">int</span>*)<span class="hljs-number">10</span>;<br><span class="hljs-type">int</span>** px2 = (<span class="hljs-type">int</span>**)<span class="hljs-number">11</span>;<br><span class="hljs-type">int</span>*** px3 = (<span class="hljs-type">int</span>***)<span class="hljs-number">12</span>;<br><span class="hljs-type">int</span>**** px4 = (<span class="hljs-type">int</span>****)<span class="hljs-number">13</span>;<br><br><span class="hljs-comment">//*(px1)是什么类型？</span><br><span class="hljs-type">int</span><br><span class="hljs-comment">//*(px2)是什么类型？</span><br><span class="hljs-type">int</span>*<br><span class="hljs-comment">//*(px3)是什么类型？</span><br><span class="hljs-type">int</span>**<br><span class="hljs-comment">//*(px4)是什么类型？</span><br><span class="hljs-type">int</span>***<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> x = <span class="hljs-number">10</span>;<br><span class="hljs-comment">//movdword ptr [ebp-4],0Ah</span><br><br><span class="hljs-type">int</span>* px = &amp;x;<br>        <span class="hljs-comment">/*  leaeax,[ebp-4]</span><br><span class="hljs-comment">movdword ptr [ebp-8],eax*/</span><br><br><span class="hljs-type">int</span> x1 = *px;<br>        <span class="hljs-comment">/*  movecx,[ebp-8]先将地址为px内的值传给ecx</span><br><span class="hljs-comment">        movedx,dword ptr [ecx]再将地址为ecx 的值传给 edx</span><br><span class="hljs-comment">movdword ptr [ebp-0Ch],edx最后将edx的值传给x1*/</span><br>首先定义的变量 x，并赋值为<span class="hljs-number">10</span>；<br>然后定义 <span class="hljs-type">int</span>* 型变量 px，并把变量x的地址赋值给px;<br>再定义一个 变量 x1，将地址为px内的值赋值给x1；<br></code></pre></td></tr></table></figure><h4 id="作业：-调试相关：在vc-6-0中，F5是调试（运行到第一个断点处）；ctrl-F5是执行；F7是编译；F9是下断点；F10是单步步过；F11是单步步入"><a href="#作业：-调试相关：在vc-6-0中，F5是调试（运行到第一个断点处）；ctrl-F5是执行；F7是编译；F9是下断点；F10是单步步过；F11是单步步入" class="headerlink" title="作业：[调试相关：在vc++6.0中，F5是调试（运行到第一个断点处）；ctrl+F5是执行；F7是编译；F9是下断点；F10是单步步过；F11是单步步入]"></a><strong>作业：</strong>[调试相关：在vc++6.0中，F5是调试（运行到第一个断点处）；ctrl+F5是执行；F7是编译；F9是下断点；F10是单步步过；F11是单步步入]</h4><p>1、<strong>列出每一行的反汇编代码</strong></p><table><thead><tr><th>a</th><th>b</th><th>c</th><th>pa</th><th>pb</th><th>pc</th><th>ppa</th><th>ppb</th><th>ppc</th></tr></thead></table><p>​          ebp-4 ebp-8 ebp-0ch        ebp-10h    ebp-14h  ebp-18h    ebp-1ch             ebp-20h        ebp-24h</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">char</span> a = <span class="hljs-number">10</span>;<span class="hljs-comment">//movbyte ptr [ebp-4],0Ah</span><br><span class="hljs-comment">//[ebp-4]存的是局部变量a</span><br>    <span class="hljs-type">char</span>* pa = &amp;a;<span class="hljs-comment">/*leaeax,[ebp-4]</span><br><span class="hljs-comment">                          movdword ptr [ebp-10h],eax  */</span><br><span class="hljs-comment">//[ebp-10h]存的是局部变量pa</span><br><span class="hljs-type">char</span>** ppa = &amp;pa;<span class="hljs-comment">/*lea   eax,[ebp-10h]</span><br><span class="hljs-comment">  mov   dword ptr [ebp-1Ch],eax */</span><br><span class="hljs-comment">//[ebp-1Ch]存的是局部变量ppa</span><br><br><span class="hljs-type">short</span> b = <span class="hljs-number">20</span>;<span class="hljs-comment">//mov   word ptr [ebp-8],offset test+20h (00401040)</span><br><span class="hljs-type">int</span> c = <span class="hljs-number">30</span>;<span class="hljs-comment">//mov   dword ptr [ebp-0Ch],1Eh</span><br><br><span class="hljs-type">short</span>* pb = &amp;b;<span class="hljs-comment">/*leaecx,[ebp-8]</span><br><span class="hljs-comment">  movdword ptr [ebp-14h],ecx */</span><br><span class="hljs-type">int</span>* pc = &amp;c;<span class="hljs-comment">/*lea   edx,[ebp-0Ch]</span><br><span class="hljs-comment">  mov   dword ptr [ebp-18h],edx */</span><br><br><span class="hljs-type">char</span>** ppa = &amp;pa;<span class="hljs-comment">/*lea   eax,[ebp-10h]</span><br><span class="hljs-comment">  mov   dword ptr [ebp-1Ch],eax */</span><br><span class="hljs-comment">//[ebp-1Ch]存的是局部变量ppa</span><br><br><span class="hljs-type">short</span>** ppb = &amp;pb;<span class="hljs-comment">/*lea   ecx,[ebp-14h]</span><br><span class="hljs-comment">  mov   dword ptr [ebp-20h],ecx */</span><br><span class="hljs-type">int</span>** ppc = &amp;pc;<span class="hljs-comment">/*lea   edx,[ebp-18h]</span><br><span class="hljs-comment">  mov   dword ptr [ebp-24h],edx */</span><br><br></code></pre></td></tr></table></figure><p><strong>2、列出每一行的反汇编代码</strong></p><table><thead><tr><th>p</th><th>p7</th><th>p6</th><th>p5</th><th>p4</th><th>p3</th><th>p2</th><th>p1</th></tr></thead></table><p>​                   ebp-4                  ebp-8               ebp-0ch              ebp-10h         ebp-14h               ebp-18h               ebp-1ch             ebp-20h                                                                                                     </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> p = <span class="hljs-number">10</span>;<span class="hljs-comment">//movdword ptr [ebp-4],0Ah</span><br><span class="hljs-type">int</span>******* p7;<br><span class="hljs-type">int</span>****** p6;<br><span class="hljs-type">int</span>***** p5;<br><span class="hljs-type">int</span>**** p4;<br><span class="hljs-type">int</span>*** p3;<br><span class="hljs-type">int</span>** p2;<br><span class="hljs-type">int</span>* p1;<br><br>p1 = &amp;p;<span class="hljs-comment">/*lea eax,[ebp-4]</span><br><span class="hljs-comment">  mov dword ptr [ebp-20h],eax */</span><br><br>p2 = &amp;p1;<span class="hljs-comment">/*lea eax,[ebp-20h]</span><br><span class="hljs-comment">  mov dword ptr [ebp-1ch],ecx */</span><br><br>p3 = &amp;p2;<span class="hljs-comment">/*lea eax,[ebp-1ch]</span><br><span class="hljs-comment">  mov dword ptr [ebp-18h],edx */</span><br><br>p4 = &amp;p3;<span class="hljs-comment">/*lea eax,[ebp-18h]</span><br><span class="hljs-comment">  mov dword ptr [ebp-14h],eax */</span><br><br>p5 = &amp;p4;<span class="hljs-comment">/*lea eax,[ebp-14h]</span><br><span class="hljs-comment">  mov dword ptr [ebp-10h],ecx */</span><br><br>p6 = &amp;p5;<span class="hljs-comment">/*lea eax,[ebp-10h]</span><br><span class="hljs-comment">  mov dword ptr [ebp-0ch],edx */</span><br><br>p7 = &amp;p6;<span class="hljs-comment">/*lea eax,[ebp-0ch]</span><br><span class="hljs-comment">  mov dword ptr [ebp-8],eax */</span><br><br></code></pre></td></tr></table></figure><h3 id="”带-类型“-的特征探测，求值"><a href="#”带-类型“-的特征探测，求值" class="headerlink" title="”带*类型“ 的特征探测，求值"></a>”带*类型“ 的特征探测，求值</h3><h3 id="指针操作数组"><a href="#指针操作数组" class="headerlink" title="指针操作数组"></a>指针操作数组</h3><p>1、&amp;arr[0]代表取数组中第一个元素的地址，可以省略为数组名</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">char</span> arr[<span class="hljs-number">5</span>] = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>&#125;;<br>    <span class="hljs-comment">//用char* x = &amp;arr[0]; == char* px = arr;</span><br>    <span class="hljs-type">char</span>* px = arr;<span class="hljs-comment">//px存的就是第一个整数的地址</span><br>   <br>    <span class="hljs-comment">//常规打印数组</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">char</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">5</span>;i++)&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,arr[i]);<br>    &#125;<br>    <br>    <span class="hljs-comment">//用指针打印数组</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">char</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">5</span>;i++)&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,*(px+i));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">short</span> arr[<span class="hljs-number">5</span>] = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>&#125;;<br>    <span class="hljs-type">short</span>* px = arr;<br><br>    <span class="hljs-comment">//用指针打印数组</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">char</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">5</span>;i++)&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,*(px+i));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="作业"><a href="#作业" class="headerlink" title="作业"></a>作业</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-number">4</span>、完成代码，实现数组值的互换<br>    <span class="hljs-type">void</span> <span class="hljs-title function_">Function</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">int</span> arr[<span class="hljs-number">5</span>] = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>];<br>    <span class="hljs-comment">//此处添加代码，使用指针，将数组的值倒置</span><br>    <span class="hljs-type">int</span>* px = arr;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">char</span> i = <span class="hljs-number">0</span>;i &lt; <span class="hljs-number">2</span>;i++)&#123;<br>            temp = *(px+i);<br>            *(px+i) = *(px+(<span class="hljs-number">4</span>-i))<br>            *(px+(<span class="hljs-number">4</span>-i)) = temp;<br>        &#125;<br>    <span class="hljs-comment">//打印数组值的代码已经写完，不需要修改</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> k = <span class="hljs-number">0</span>;k &lt; <span class="hljs-number">5</span>;k++)&#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,*(px+k));<br>        &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="模拟CE实现搜索"><a href="#模拟CE实现搜索" class="headerlink" title="模拟CE实现搜索"></a>模拟CE实现搜索</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">1、数组作为参数；</span><br><span class="hljs-comment">2、通过char指针遍历</span><br><span class="hljs-comment">3、通过short指针遍历数据</span><br><span class="hljs-comment">4、通过int指针遍历数据</span><br><span class="hljs-comment">模拟CE实现搜索功能：</span><br><span class="hljs-comment">这一堆数据中存储了角色的血值信息，假设血值的类型为int类型</span><br><span class="hljs-comment">值为100(10进制)，请列出所有可能的值以及该值对应的地址</span><br><span class="hljs-comment">0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x07,0x09,</span><br><span class="hljs-comment">0x00,0x20,0x10,0x03,0x03,0x0C,0xO0,0x41,0x00,0x00,</span><br><span class="hljs-comment">0x00,0x01,0x00,0x00,0x00,0x05,0x00,0x00,0x00,0x0A,</span><br><span class="hljs-comment">0x00,0x00,0x02,0x74,0x64,0x41,0x00,0x06,0x08,0x00,</span><br><span class="hljs-comment">0x00,0x00,0x64,0x00,0x64,0x00,0xOF,0x00,0x00,0xOD,</span><br><span class="hljs-comment">0x00,0x00,0x00,0x23,0x00,0x00,0x0E,0x00,0x00,0x00,</span><br><span class="hljs-comment">0x00,0x00,0x00,0x23,0x00,0x00,0x04,0x00,0x00,0x00,</span><br><span class="hljs-comment">0x00,0x00,0x00,0x23,0x00,0x00,0x04,0x00,0x00,0x00,</span><br><span class="hljs-comment">0x00,0x00,0x00,0x23,0x00,0x00,0x04,0x00,0x00,0x00,</span><br><span class="hljs-comment">0x00,0x00,0x00,0x23,0x00,0x64,0x05,0x00,0x64,0x00,</span><br><span class="hljs-comment">*/</span><br><span class="hljs-type">char</span> data[] =<br>&#123;<br><span class="hljs-number">0x00</span>,<span class="hljs-number">0x64</span>,<span class="hljs-number">0x02</span>,<span class="hljs-number">0x03</span>,<span class="hljs-number">0x64</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x07</span>,<span class="hljs-number">0x64</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x03</span>,<span class="hljs-number">0x03</span>,<span class="hljs-number">0x0C</span>,<br><span class="hljs-number">0x07</span>,<span class="hljs-number">0x41</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x01</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x05</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x0A</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<br><span class="hljs-number">0x02</span>,<span class="hljs-number">0x74</span>,<span class="hljs-number">0x64</span>,<span class="hljs-number">0x41</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x06</span>,<span class="hljs-number">0x08</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x64</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x64</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x05</span>,<span class="hljs-number">0x00</span>,<br><span class="hljs-number">0x00</span>,<span class="hljs-number">0x0D</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x23</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x0E</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x23</span>,<br><span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x04</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x23</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x04</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<br><span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x23</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x04</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x23</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x64</span>,<br><span class="hljs-number">0x05</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x64</span>,<span class="hljs-number">0x00</span>,<br>&#125;;<br><span class="hljs-type">void</span> <span class="hljs-title function_">FindBloodAddr</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">通过char指针遍历</span><br><span class="hljs-comment">printf(&quot;%x\n&quot;, &amp;data[0]);//&amp;data[0]等价于 data</span><br><span class="hljs-comment">char* p = data;</span><br><span class="hljs-comment">for (int i = 0; i &lt; 100; i++) &#123;</span><br><span class="hljs-comment">if (*(p + i) == 0x64) &#123;</span><br><span class="hljs-comment">printf(&quot;%x\n&quot;,p+i);</span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment">*/</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">通过short指针遍历</span><br><span class="hljs-comment">printf(&quot;%x\n&quot;, &amp;data[0]);//&amp;data[0]等价于 data</span><br><span class="hljs-comment">short* p = (short*)data;</span><br><span class="hljs-comment">for (int i = 0; i &lt; 50; i++) &#123;  //printf(&quot;%x\n&quot;,*(p+i));打印出来是两个字节数据</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">if (*(p + i) == 0x64) &#123;//64 00 00 00</span><br><span class="hljs-comment">printf(&quot;%x\n&quot;, p + i);//p+i 等价于 &amp;(*(p + i)) </span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">通过int指针遍历</span><br><span class="hljs-comment">printf(&quot;%x\n&quot;, &amp;data[0]);//&amp;data[0]等价于 data</span><br><span class="hljs-comment">char* p = data;</span><br><span class="hljs-comment">for (int i = 0; i &lt; 97; i++) &#123;</span><br><span class="hljs-comment">if (*(p+i) == 0x64 &amp;&amp; *(p+i+1) == 0x0 &amp;&amp; *(p+i+2) == 0x0 &amp;&amp; *(p+i+3) == 0x0) &#123;</span><br><span class="hljs-comment">printf(&quot;%x\n&quot;, p+i);</span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment">*/</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">思路：通过双指针，模拟CE实现搜索功能</span><br><span class="hljs-comment">pt指针用于遍历，pr指针取当下pt所指位置的int单元，取pr所指的值与0x64进行比较</span><br><span class="hljs-comment">*/</span><br><span class="hljs-type">char</span>* pt;<br><span class="hljs-type">int</span>* pr;<br><span class="hljs-type">int</span> n = <span class="hljs-keyword">sizeof</span>(data);<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n - <span class="hljs-number">4</span>; i++) &#123;<br>pt = (data + i);<br>pr = (<span class="hljs-type">int</span>*)pt;<br><span class="hljs-keyword">if</span> (*pr == <span class="hljs-number">0x64</span>) &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[%x ]=%d\n&quot;</span>, pr, *pr);<br>&#125;<br>&#125;<br><br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>FindBloodAddr();<br>&#125;<br><span class="hljs-comment">//参考：https://www.cnblogs.com/ybit/p/15217003.html#%E6%96%B9%E6%A1%88%E4%BA%8C</span><br></code></pre></td></tr></table></figure><h2 id="字符串指针"><a href="#字符串指针" class="headerlink" title="字符串指针"></a>字符串指针</h2><p><strong>exe的内存分布：</strong></p><p><img src="/../images/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2NDQxNDI3,size_16,color_FFFFFF,t_70.png" alt="在这里插入图片描述"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">char</span>* x = <span class="hljs-string">&#x27;china&#x27;</span>;<br><span class="hljs-type">char</span> y[] = <span class="hljs-string">&#x27;china&#x27;</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span><br>&#123;<br>    *(x+<span class="hljs-number">1</span>)=<span class="hljs-string">&#x27;A&#x27;</span>;  <br>    y[<span class="hljs-number">1</span>] = <span class="hljs-string">&#x27;A&#x27;</span>;<br>&#125;<br>第一种使用字符串指针，x指向的是字符串的首地址；<br>第二种使用数组；<br>在test()中，修改字符串内容，发现第一种不可行，会报错内存非法读写。第二种可以：<br>    原因：<br>    第一种定义的是全局变量，可读不可写；<br>    第二种使用数组方式，首先会将字符串copy一下，因此可以修改<br></code></pre></td></tr></table></figure><h2 id="复制语句作为判断语句"><a href="#复制语句作为判断语句" class="headerlink" title="复制语句作为判断语句"></a>复制语句作为判断语句</h2><p>赋值语句作为判断条件是什么意思呢？它并<strong>不是</strong>以是否赋值成功作为<code>true</code>和<code>false</code>的判断机制，而是看<strong>赋值的值是多少</strong>，如果为<code>0</code>自动就作为<code>false</code>了</p><p>如：while ((*dest++) &#x3D; (*src++));</p><p>当src指向结束符，跳出循环；</p><h2 id="搜索字符串"><a href="#搜索字符串" class="headerlink" title="搜索字符串"></a>搜索字符串</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-comment">/*</span><br><span class="hljs-comment">1、int strlen(char* s)</span><br><span class="hljs-comment">返回值是字符串s的长度，不包括结束符‘/0’。</span><br><span class="hljs-comment">2、char* strcpy(char* dest,char* src);</span><br><span class="hljs-comment">复制字符串src到dest中，返回指针为dest的值。</span><br><span class="hljs-comment">3、char* strcat(char* dest,char* src);</span><br><span class="hljs-comment">将字符串src添加到dest尾部，返回指针为dest的值。</span><br><span class="hljs-comment">4、int strcmp(char* s1,char* s2);</span><br><span class="hljs-comment">一样的返回0，不一样返回1；</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">strlen</span><span class="hljs-params">(<span class="hljs-type">char</span>* s)</span> &#123;<span class="hljs-comment">//返回值是字符串s的长度，不包括结束符‘/0’。</span><br><span class="hljs-type">int</span> ret = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span> (*s != <span class="hljs-string">&#x27;\0&#x27;</span>) &#123;<br>ret++;<br>s++;<br>&#125;<br><span class="hljs-keyword">return</span> ret;<br>&#125;<br><br><span class="hljs-type">char</span>* <span class="hljs-title function_">strcpy</span><span class="hljs-params">(<span class="hljs-type">char</span>* dest, <span class="hljs-type">char</span>* src)</span> &#123;<span class="hljs-comment">//复制字符串src到dest中，返回指针为dest的值。</span><br><span class="hljs-type">char</span>* ret = dest;<br><span class="hljs-keyword">while</span> (*src != <span class="hljs-string">&#x27;\0&#x27;</span>) &#123;<br>*dest++ = *src++;<br>&#125;<br><span class="hljs-keyword">return</span> ret;<br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">最简写法：</span><br><span class="hljs-comment">char* strcpy(char* dest, char* src) &#123;</span><br><span class="hljs-comment">char* ret = dest;</span><br><span class="hljs-comment">while ((*dest++) = (*src++));</span><br><span class="hljs-comment">return ret;</span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-type">char</span>* <span class="hljs-title function_">strcat</span><span class="hljs-params">(<span class="hljs-type">char</span>* dest, <span class="hljs-type">char</span>* src)</span> &#123;<span class="hljs-comment">//将字符串src添加到dest尾部，返回指针为dest的值。</span><br><span class="hljs-comment">//思路:先找到字符串dest尾部；然后再拼接</span><br><span class="hljs-type">char</span>* ret = dest;<br><span class="hljs-keyword">while</span> (*dest != <span class="hljs-string">&#x27;\0&#x27;</span>) &#123;<span class="hljs-comment">//找到目的字符串尾部</span><br>dest++;<br>&#125;<br><span class="hljs-comment">//注：不能写成while(*dest++ != &#x27;0\&#x27;),这种写法当指向结束符时指针会向后移动，因此不会覆盖结束符</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">while (*src != &#x27;\0&#x27;) &#123;</span><br><span class="hljs-comment">*dest = *src;</span><br><span class="hljs-comment">dest++;</span><br><span class="hljs-comment">src++;</span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">while</span> ((*dest++) = (*src++));<br><span class="hljs-keyword">return</span> ret;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">strcmp</span><span class="hljs-params">(<span class="hljs-type">char</span>* s1, <span class="hljs-type">char</span>* s2)</span> &#123; <span class="hljs-comment">//一样的返回0，不一样返回1；</span><br><span class="hljs-keyword">while</span> (*s1++ == *s2++) &#123;<br><span class="hljs-keyword">if</span> (*s1 == <span class="hljs-string">&#x27;\0&#x27;</span> &amp;&amp; *s2 == <span class="hljs-string">&#x27;\0&#x27;</span>) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">char</span> arr1[] = <span class="hljs-string">&quot;china&quot;</span>;<br><span class="hljs-type">char</span> arr2[] = <span class="hljs-string">&quot;chinab&quot;</span>;<br><span class="hljs-comment">//strlen(arr);</span><br><span class="hljs-comment">//strcpy(arr1,arr2);</span><br><span class="hljs-comment">//printf(&quot;%s\n&quot;, strcpy(arr1, arr2));</span><br><span class="hljs-comment">//strcat(arr1, arr2);</span><br><span class="hljs-comment">//printf(&quot;%s&quot;,strcat(arr1, arr2));</span><br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">strcmp</span>(arr1, arr2)) &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;True&quot;</span>);<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;False&quot;</span>);<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="查找字符串"><a href="#查找字符串" class="headerlink" title="查找字符串"></a>查找字符串</h3><p>模拟实现CE的数据搜索功能：</p><p>这一堆数据中存储了角色的名字信息(WOW)，请列出角色名的内存地址.</p><p>0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x07,0x09,</p><p>0x00,0x20,0x10,0x03,0x03,0x0C,0x00,0x00,0x44,0x00,</p><p>0x00,0x33,0x00,0x47,0x0C,0x0E,0x00,0x0D,0x00,0x11,</p><p>0x00,0x00,0x00,0x02,0x64,0x00,0x00,0x00,0xAA,0x00,</p><p>0x00,0x00,0x64,0x10,0x00,0x00,0x00,0x00,0x00,0x00,</p><p>0x00,0x00,0x02,0x00,0x74,0x0F,0x41,0x00,0x00,0x00,</p><p>0x01,0x00,0x00,0x00,0x05,0x00,0x00,0x00,0x0A,0x00,</p><p>0x00,0x02,0x57,0x4F,0x57,0x00,0x06,0x08,0x00,0x00,</p><p>0x00,0x00,0x00,0x64,0x00,0x0F,0x00,0x00,0x0D,0x00,</p><p>0x00,0x00,0x23,0x00,0x00,0x64,0x00,0x00,0x64,0x00</p><h2 id="指针数组"><a href="#指针数组" class="headerlink" title="指针数组"></a>指针数组</h2><p>1、创建一个int* arr[5] 数组，并为数组赋值(使用&amp;).</p><p>2、创建一个字符指针数组，存储所有的C的关键词(查资料找)，并全部打印出来.</p><p>3、查找这些数据中，有几个id&#x3D;1 level&#x3D;8的结构体信息。</p><p>0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x07,0x09,0x00,0x20,0x10,0x03,0x03,0x0C,</p><p>0x00,0x00,0x44,0x00,0x00,0x33,0x01,0x00,0x00,0x08,0x00,0x00,0x00,0x00,0x00,0x00,</p><p>0x00,0x02,0x64,0x00,0x00,0x00,0xAA,0x00,0x00,0x00,0x64,<strong>0x01,0x00,0x00,0x00,0x08,</strong></p><p><strong>0x00,0x00,</strong> <strong>0x00</strong>,0x00,0x02,0x00,0x74,0x0F,0x41,0x00,0x00,0x00, 0x01,0x00,0x00,0x00,</p><p>0x05,0x00,0x00,0x00,0x0A,0x00,0x00,0x02,0x57,0x4F,0x57,0x00,0x06,0x08,0x00,0x00,  </p><p>0x00,0x00,0x00,0x64,0x00,0x0F,0x00,0x00,0x0D,0x00, 0x00,0x00,0x23,0x00,0x00,0x64,</p><p>0x00,0x00,0x64,0x00  </p><p>结构体定义如下：</p><p>typedef struct TagPlayer </p><p>{ </p><p>​int id;</p><p>​int level;</p><p>}Player;</p><h2 id="结构体指针"><a href="#结构体指针" class="headerlink" title="结构体指针"></a>结构体指针</h2><p><img src="/2023/10/07/%E6%8C%87%E9%92%88/Users/HF\AppData\Roaming\Typora\typora-user-images\image-20230911213230999.png" alt="image-20230911213230999"></p><p><a href="https://blog.csdn.net/qq_46441427/article/details/114444224">https://blog.csdn.net/qq_46441427/article/details/114444224</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>C语言</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>裸函数</title>
    <link href="/2023/10/07/%E8%A3%B8%E5%87%BD%E6%95%B0&amp;%E5%86%85%E8%81%94%E6%B1%87%E7%BC%96/"/>
    <url>/2023/10/07/%E8%A3%B8%E5%87%BD%E6%95%B0&amp;%E5%86%85%E8%81%94%E6%B1%87%E7%BC%96/</url>
    
    <content type="html"><![CDATA[<hr><h1 id="裸函数-没人管你"><a href="#裸函数-没人管你" class="headerlink" title="裸函数(没人管你)"></a>裸函数(没人管你)</h1><p>普通函数会自动生成实现堆栈提升、堆栈的缓存区建立、堆栈平衡和函数返回的汇编代码，裸函数不会自动生成任何代码，全部要自己手动写汇编代码。</p><p>裸函数定义：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c">_ _declspec(naked) Function()&#123;&#125;<br><span class="hljs-comment">//加汇编代码 ret 可以正确返回，否则报错</span><br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-number">1</span>、无参数无返回值的函数框架<br><span class="hljs-type">void</span> __declspec(naked) Function()  <br>&#123;<br>__asm<br>&#123;<br>push ebp<br>mov ebp,esp<br>sub esp,<span class="hljs-number">0x40</span><br>push ebx<br>push esi<br>push edi<br>lea edi,dword ptr ds:[ebp<span class="hljs-number">-0x40</span>]<br>mov eax,<span class="hljs-number">0xCCCCCCCC</span><br>mov ecx,<span class="hljs-number">0x10</span><br>rep stosd<br><br>pop edi<br>pop esi<br>pop ebx<br>mov esp,ebp<br>pop ebp<br><br>ret<br>&#125;<br>&#125;<br><br><span class="hljs-number">2</span>、有参数有返回值的函数框架<br><span class="hljs-type">int</span> __declspec(naked) Function(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> y)  <br>&#123;<br>__asm<br>&#123;<br>push ebp<br>mov ebp,esp<br>sub esp,<span class="hljs-number">0x40</span><br>push ebx<br>push esi<br>push edi<br>lea edi,dword ptr ds:[ebp<span class="hljs-number">-0x40</span>]<br>mov eax,<span class="hljs-number">0xCCCCCCCC</span><br>mov ecx,<span class="hljs-number">0x10</span><br>rep stosd<br><br>mov eax,dword ptr ds:[ebp+<span class="hljs-number">8</span>]<br>add eax,dword ptr ds:[ebp+<span class="hljs-number">0xC</span>]<br><br>pop edi<br>pop esi<br>pop ebx<br>mov esp,ebp<br>pop ebp<br><br>ret<br>&#125;<br>&#125;<br><br><span class="hljs-number">3</span>、带局部变量的函数框架<br><span class="hljs-type">int</span> __declspec(naked) Function(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> y)  <br>&#123;<br>__asm<br>&#123;<br>push ebp<br>mov ebp,esp<br>sub esp,<span class="hljs-number">0x40</span><br>push ebx<br>push esi<br>push edi<br>lea edi,dword ptr ds:[ebp<span class="hljs-number">-0x40</span>]<br>mov eax,<span class="hljs-number">0xCCCCCCCC</span><br>mov ecx,<span class="hljs-number">0x10</span><br>rep stosd<br>mov dword ptr ds:[ebp<span class="hljs-number">-4</span>],<span class="hljs-number">2</span><br>mov dword ptr ds:[ebp<span class="hljs-number">-8</span>],<span class="hljs-number">3</span><br><br>mov eax,dword ptr ds:[ebp+<span class="hljs-number">8</span>]<br>add eax,dword ptr ds:[ebp+<span class="hljs-number">0xC</span>]<br><br>pop edi<br>pop esi<br>pop ebx<br>mov esp,ebp<br>pop ebp<br><br>ret<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="内联汇编"><a href="#内联汇编" class="headerlink" title="内联汇编"></a>内联汇编</h1><p>在裸函数中加上_ _asm{}</p><p>{}之间可以写汇编代码</p><p>以下使用裸函数加内联汇编实现简单的C语言加法</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdafx.h&quot;</span></span><br><br><span class="hljs-type">void</span> _ _declspec(naked) Plus(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> y) <br>&#123;<br>_ _asm<br>&#123;<br><span class="hljs-comment">//保留调用前的栈底</span><br>push ebp<br><span class="hljs-comment">//提升堆栈</span><br>mov ebp,esp<br>sub esp,<span class="hljs-number">0x40</span><br><span class="hljs-comment">//保留现场</span><br>push ebx<br>push esi<br>push edi<br><span class="hljs-comment">//开始填充缓冲区</span><br>mov eax,<span class="hljs-number">0xcccccccc</span>;<br>mov ecx,<span class="hljs-number">0x10</span>   <span class="hljs-comment">//0x40/4 = 0x10</span><br>lea edi,dword ptr ds:[ebp<span class="hljs-number">-0x40</span>]<br>rep stosd<br><span class="hljs-comment">//函数的核心功能</span><br>mov eax,dword ptr ds:[ebp+<span class="hljs-number">0x8</span>]<br>add eax,dword ptr ds:[ebp+<span class="hljs-number">0xc</span>]<br><span class="hljs-comment">//恢复现场</span><br>pop edi<br>pop esi<br>pop ebx<br><span class="hljs-comment">//降低堆栈</span><br>mov esp,ebp<br>pop ebp<br>ret<br>&#125;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>* argv[])</span><br>&#123;<br>Plus(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>使用内联汇编来实现以下函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">plus</span><span class="hljs-params">(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> y,<span class="hljs-type">int</span> z)</span><br>&#123;<br><span class="hljs-type">int</span> a = <span class="hljs-number">2</span>;<br><span class="hljs-type">int</span> b = <span class="hljs-number">3</span>;<br><span class="hljs-type">int</span> c = <span class="hljs-number">4</span>;<br><span class="hljs-keyword">return</span> x+y+z+a+b+c;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdafx.h&quot;</span></span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">必须包含这头文件否则报错atal error C1010: unexpected end of file while looking for precompiled header directive</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-type">void</span> __declspec(naked) Plus(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> y,<span class="hljs-type">int</span> z)  <br>&#123;<br>__asm<br>&#123;<br>push ebp<br>mov ebp,esp<br>sub esp,<span class="hljs-number">0x40</span><br>                <br>push ebx<br>push esi<br>push edi<br>                <br>lea edi,dword ptr ds:[ebp<span class="hljs-number">-0x40</span>]<br>mov eax,<span class="hljs-number">0xCCCCCCCC</span><br>mov ecx,<span class="hljs-number">0x10</span><br>rep stosd<br>             <br>            <span class="hljs-comment">//int a = 2;</span><br>mov dword ptr ds:[ebp<span class="hljs-number">-4</span>],<span class="hljs-number">2</span><br>            <span class="hljs-comment">//int b = 3;</span><br>mov dword ptr ds:[ebp<span class="hljs-number">-8</span>],<span class="hljs-number">3</span><br>            <span class="hljs-comment">//int c = 4;</span><br>            mov dword ptr ds:[ebp<span class="hljs-number">-0xc</span>],<span class="hljs-number">4</span><br><br>mov eax,dword ptr ds:[ebp+<span class="hljs-number">8</span>]<br>add eax,dword ptr ds:[ebp+<span class="hljs-number">0xC</span>]<br>add eax,dword ptr ds:[ebp+<span class="hljs-number">0x10</span>]<br>            add eax,dword ptr ds:[ebp<span class="hljs-number">-4</span>]<br>            add eax,dword ptr ds:[ebp<span class="hljs-number">-8</span>]<br>            add eax,dword ptr ds:[ebp<span class="hljs-number">-0xc</span>]<br>            <br>pop edi<br>pop esi<br>pop ebx<br>mov esp,ebp<br>pop ebp<br><br>ret<br>&#125;<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>* argv[])</span><br>&#123;<br>    Plus(<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>);<br><span class="hljs-comment">//return 0;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>用VC6.0写的C语言生成的反汇编：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs assembly">55                    push        ebp<br>00401021 8B EC                mov         ebp,esp<br>00401023 83 EC 4C             sub         esp,4Ch<br>00401026 53                   push        ebx<br>00401027 56                   push        esi<br>00401028 57                   push        edi<br>00401029 8D 7D B4             lea         edi,[ebp-4Ch]<br>0040102C B9 13 00 00 00       mov         ecx,13h<br>00401031 B8 CC CC CC CC       mov         eax,0CCCCCCCCh<br>00401036 F3 AB                rep stos    dword ptr [edi]<br>4:        int a = 2;<br>00401038 C7 45 FC 02 00 00 00 mov         dword ptr [ebp-4],2<br>5:        int b = 3;<br>0040103F C7 45 F8 03 00 00 00 mov         dword ptr [ebp-8],3<br>6:        int c = 4;<br>00401046 C7 45 F4 04 00 00 00 mov         dword ptr [ebp-0Ch],4<br>7:        return x+y+z+a+b+c;<br>0040104D 8B 45 08             mov         eax,dword ptr [ebp+8]<br>00401050 03 45 0C             add         eax,dword ptr [ebp+0Ch]<br>00401053 03 45 10             add         eax,dword ptr [ebp+10h]<br>00401056 03 45 FC             add         eax,dword ptr [ebp-4]<br>00401059 03 45 F8             add         eax,dword ptr [ebp-8]<br>0040105C 03 45 F4             add         eax,dword ptr [ebp-0Ch]<br>8:    &#125;<br>0040105F 5F                   pop         edi<br>00401060 5E                   pop         esi<br>00401061 5B                   pop         ebx<br>00401062 8B E5                mov         esp,ebp<br>00401064 5D                   pop         ebp<br>00401065 C3                   ret<br><br></code></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>局部变量从EBP-4开始；参数从EBP+8开始（EBP+4保存的是返回EIP,EBP保存的是原来的栈底（调用前的EBP））</p><p>局部变量放在ebp上面 [ebp-4],[ebp-8],[ebp-0xC]</p><p>参数返回值放在ebp下面[ebp+8],[ebp+0x0C],[ebp+0x10] </p><p><strong>因为参数返回值不在函数内部</strong></p>]]></content>
    
    
    
    <tags>
      
      <tag>C语言</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>进制相关(C)</title>
    <link href="/2023/10/07/%E8%BF%9B%E5%88%B6%E7%9B%B8%E5%85%B3(C)/"/>
    <url>/2023/10/07/%E8%BF%9B%E5%88%B6%E7%9B%B8%E5%85%B3(C)/</url>
    
    <content type="html"><![CDATA[<hr><h1 id="进制相关-C"><a href="#进制相关-C" class="headerlink" title="进制相关(C)"></a>进制相关(C)</h1><p>要求：</p><p>输入两个参数，第一个参数base代表几进制，第二个参数num代表该进制下的第num个数；</p><p>输出base进制下第num个数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-comment">// 函数声明</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">print_num_in_base</span><span class="hljs-params">(<span class="hljs-type">int</span> base, <span class="hljs-type">int</span> num)</span>;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 定义两个整数变量x和y</span><br>    <span class="hljs-type">int</span> x, y;<br><br>    <span class="hljs-comment">// 提示用户输入两个整数</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;请输入两个整数（空格分隔）：&quot;</span>);<br><br>    <span class="hljs-comment">// 从用户那里获取两个整数</span><br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d&quot;</span>, &amp;x, &amp;y);<br><br>    <span class="hljs-comment">// 调用函数来打印x进制下的第y个数</span><br>    print_num_in_base(x, y);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">// 函数定义</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">print_num_in_base</span><span class="hljs-params">(<span class="hljs-type">int</span> base, <span class="hljs-type">int</span> num)</span> &#123;<br><span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> j;<br>    <span class="hljs-comment">// 定义一个字符数组来存储数字和字母</span><br>    <span class="hljs-type">char</span> digits[] = <span class="hljs-string">&quot;0123456789ABCDEF&quot;</span>;<br><br>    <span class="hljs-comment">// 定义一个字符数组来存储结果</span><br>    <span class="hljs-type">char</span> result[<span class="hljs-number">50</span>];<br>    <br>    <span class="hljs-comment">//第一个数从0开始</span><br>result[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>;<br>num = num<span class="hljs-number">-1</span>;<br>    <br>    <span class="hljs-comment">// 使用循环来计算每一位数字，并将其存储在结果数组中</span><br>    <span class="hljs-keyword">while</span> (num &gt; <span class="hljs-number">0</span>) &#123;<br>        result[i] = digits[num % base];<br>        num = num / base;<br>        i++;<br>    &#125;<br><br>    <span class="hljs-comment">// 打印出结果数组中的每一位数字，从最后一位开始打印</span><br>    <span class="hljs-keyword">for</span> (j = i - <span class="hljs-number">1</span>; j &gt;= <span class="hljs-number">0</span>; j--) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c&quot;</span>, result[j]);<br>    &#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="注：VC6-0快捷键"><a href="#注：VC6-0快捷键" class="headerlink" title="注：VC6.0快捷键"></a><strong>注：VC6.0快捷键</strong></h2><p>F7：构建（生成.exe）</p><p>F5：运行</p><p>shift + F5：结束运行</p><p>F9：断点</p><p>F10：步进</p><p>F11：步入</p>]]></content>
    
    
    
    <tags>
      
      <tag>C语言</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>头文件&amp;C_misc</title>
    <link href="/2023/10/07/%E5%A4%B4%E6%96%87%E4%BB%B6&amp;C_misc/"/>
    <url>/2023/10/07/%E5%A4%B4%E6%96%87%E4%BB%B6&amp;C_misc/</url>
    
    <content type="html"><![CDATA[<h1 id="重复包含问题"><a href="#重复包含问题" class="headerlink" title="重复包含问题"></a>重复包含问题</h1><p>x.h</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">include</span> z.h</span><br></code></pre></td></tr></table></figure><p>y.h</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> z.h</span><br></code></pre></td></tr></table></figure><p>z.h</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Student</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-type">int</span> level;<br>&#125;<br></code></pre></td></tr></table></figure><p>如果此时有个文件同时包含了x.h和y.h会出问题</p><p>如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&quot;stdafx.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&quot;X.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&quot;Y.h&quot;</span></span><br></code></pre></td></tr></table></figure><h2 id="解决方案："><a href="#解决方案：" class="headerlink" title="解决方案："></a>解决方案：</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">if</span> !defined(ZZZ)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ZZZ</span><br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Student</span><br>&#123;<br><span class="hljs-type">int</span> level;<br>&#125;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br></code></pre></td></tr></table></figure><p>这句话的意思可以这样去理解，如果ZZZ已经存在了，就不再声明，ZZZ相当于一个编号，越复杂越好，唯一的。</p><p>详细见：</p><p>[<a href="https://blog.csdn.net/a15608445683/article/details/122960570]">https://blog.csdn.net/a15608445683/article/details/122960570]</a>: </p><h2 id="关于头文件-与“-”"><a href="#关于头文件-与“-”" class="headerlink" title="关于头文件&lt; &gt;与“ ”"></a><strong>关于头文件&lt; &gt;与“ ”</strong></h2><p>正式说法：&lt;&gt;表示从系统目录下开始搜索，然后再搜索PATH环境变量所列出的目录，不搜索当前目录，””是表示从当前目录开始搜索，然后是系统目录和PATH环境变量所列出的目录。</p><p>人话：自己写的头文件用” “ ; 如“PE.h”；系统类用 &lt; &gt; ; 如&lt;stdio.h&gt;</p><h1 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-number">2</span>、类型转换<br><br>MOVSX 先符号扩展,再传送.(有符号)<br><br>MOV AL,<span class="hljs-number">0F</span>F<br>MOVSX CX,AL<br>MOV AL,<span class="hljs-number">80</span><br>MOVSX CX,AL<br><br><br>MOVZX 先零扩展,再传送. (无符号)<br><br>MOV AL,<span class="hljs-number">0F</span>F<br>MOVZX CX,AL<br>MOV AL,<span class="hljs-number">80</span><br>MOVSX CX,AL<br><br></code></pre></td></tr></table></figure><h2 id="类型转换：小转大"><a href="#类型转换：小转大" class="headerlink" title="类型转换：小转大"></a>类型转换：小转大</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">char</span> i = <span class="hljs-number">0xFF</span>;<span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> i = <span class="hljs-number">0xFF</span>;<br><span class="hljs-type">short</span> k = <span class="hljs-number">0xFFFF</span>;<span class="hljs-type">unsigned</span> <span class="hljs-type">short</span> k = <span class="hljs-number">0x00FF</span>;<br><span class="hljs-type">int</span> h = <span class="hljs-number">0xFFFFFFFF</span>;     <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> h = <span class="hljs-number">0x00000000FF</span>;<br></code></pre></td></tr></table></figure><p><strong>实例代码（有符号小转大）：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">Function1</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-type">char</span> ci = <span class="hljs-number">0xFF</span>;<br><br><span class="hljs-type">short</span> si = ci;<br><br><span class="hljs-type">int</span> ni = ci;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>汇编代码：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs assembly">8:        char ci = 0xFF;<br>00401038 C6 45 FC FF          mov         byte ptr [ebp-4],0FFh<br>9:<br>10:       short si = ci;<br>0040103C 66 0F BE 45 FC       movsx       ax,byte ptr [ebp-4]<br>00401041 66 89 45 F8          mov         word ptr [ebp-8],ax<br>11:<br>12:       int ni = ci;<br>00401045 0F BE 4D FC          movsx       ecx,byte ptr [ebp-4]<br>00401049 89 4D F4             mov         dword ptr [ebp-0Ch],ecx<br>13:   &#125;<br></code></pre></td></tr></table></figure><p><strong>实例代码（无符号小转大）：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">Function2</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> ci = <span class="hljs-number">0xFF</span>;<br><br><span class="hljs-type">unsigned</span> <span class="hljs-type">short</span> si = ci;<br><br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> ni = ci;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>汇编代码：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs assembly">8:        unsigned char ci = 0xFF;<br>00401038 C6 45 FC FF          mov         byte ptr [ebp-4],0FFh<br>9:<br>10:       unsigned short si = ci;<br>0040103C 66 0F B6 45 FC       movzx       ax,byte ptr [ebp-4]<br>00401041 66 89 45 F8          mov         word ptr [ebp-8],ax<br>11:<br>12:       unsigned int ni = ci;<br>00401045 8B 4D FC             mov         ecx,dword ptr [ebp-4]<br>00401048 81 E1 FF 00 00 00    and         ecx,0FFh<br>0040104E 89 4D F4             mov         dword ptr [ebp-0Ch],ecx<br>13:   &#125;<br><br></code></pre></td></tr></table></figure><h2 id="类型转换：大转小"><a href="#类型转换：大转小" class="headerlink" title="类型转换：大转小"></a>类型转换：大转小</h2><p><strong>会截取低位，高位舍去</strong></p><p>实例代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">Function1</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-type">int</span> ni = <span class="hljs-number">0x12345678</span>;<br><br><span class="hljs-type">short</span> si = ni;<br><br><span class="hljs-type">char</span> ci = ni;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>汇编代码：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs assembly">8:        int ni = 0x12345678;<br>00401038 C7 45 FC 78 56 34 12 mov         dword ptr [ebp-4],12345678h<br>9:<br>10:       short si = ni;<br>0040103F 66 8B 45 FC          mov         ax,word ptr [ebp-4]<br>00401043 66 89 45 F8          mov         word ptr [ebp-8],ax<br>11:<br>12:       char ci = ni;<br>00401047 8A 4D FC             mov         cl,byte ptr [ebp-4]<br>0040104A 88 4D F4             mov         byte ptr [ebp-0Ch],cl<br>13:   &#125;<br><br></code></pre></td></tr></table></figure><h2 id="表达式"><a href="#表达式" class="headerlink" title="表达式"></a>表达式</h2><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">特点一：<br>表达式无论多么复杂，都只有一个结果<br><br>特点二：<br>只有表达式，可以编译通过，但并不生成代码，需要与赋值或者其他流程控制语句一起组合的时候才有意义.<br><br>特点三：当表达式中存在不同宽度的变量时，结果将转换为宽度最大的那个.<br><span class="hljs-keyword">char</span> <span class="hljs-keyword">a</span>;<br>int b;<br><span class="hljs-keyword">a</span> = <span class="hljs-number">10</span>;<br>b = <span class="hljs-number">20</span>;<br>printf(<span class="hljs-string">&quot;%d&quot;</span>,<span class="hljs-keyword">a</span>+b);<br><br>特点四：当表达式中同时存在有符号和无符号数的时候，表达式的结构将转换为无符号数.<br>unsigned <span class="hljs-keyword">char</span> <span class="hljs-keyword">a</span>;<br><span class="hljs-keyword">char</span> b;<br><span class="hljs-keyword">a</span> = <span class="hljs-number">0xFE</span>;<br>b = <span class="hljs-number">1</span>;<br>printf(<span class="hljs-string">&quot;%d&quot;</span>,<span class="hljs-keyword">a</span>+b);<br><br></code></pre></td></tr></table></figure><h2 id="语句的执行条件"><a href="#语句的执行条件" class="headerlink" title="语句的执行条件"></a>语句的执行条件</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-number">10</span>、语句的执行条件<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">Fun</span><span class="hljs-params">(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> y)</span><br>&#123;<br><span class="hljs-keyword">if</span>(<span class="hljs-number">1</span>)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;1\n&quot;</span>);执行<br>&#125;<br><span class="hljs-keyword">if</span>(<span class="hljs-number">2</span>)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;2\n&quot;</span>);执行<br>&#125;<br><span class="hljs-keyword">if</span>(<span class="hljs-number">-1</span>)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;3\n&quot;</span>);执行<br>&#125;<br><span class="hljs-keyword">if</span>(<span class="hljs-number">0</span>)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;4\n&quot;</span>);不执行<br>&#125;<br><span class="hljs-keyword">if</span>(x&gt;y)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;5\n&quot;</span>);x&gt;y是否成立<br>&#125;<br><span class="hljs-keyword">if</span>(x=<span class="hljs-number">2</span>)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;6\n&quot;</span>);执行<br>&#125;<br><span class="hljs-keyword">if</span>(x==<span class="hljs-number">2</span>)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;7\n&quot;</span>);执行（看被赋的值是否非<span class="hljs-number">0</span>）<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>注：非0就是1</strong></p><h1 id="返回值是如何传递的"><a href="#返回值是如何传递的" class="headerlink" title="返回值是如何传递的"></a>返回值是如何传递的</h1><h2 id="char类型返回值"><a href="#char类型返回值" class="headerlink" title="char类型返回值"></a>char类型返回值</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdafx.h&quot;</span></span><br><span class="hljs-type">char</span> <span class="hljs-title function_">Function</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">12</span>;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>* argv[])</span><br>&#123;<br>Function();<br>&#125;<br></code></pre></td></tr></table></figure><p>反汇编：**(AL)**</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs assembly">9:        return 12;<br>0040D4A8 B0 0C                mov         al,0Ch<br>;存在AL中<br></code></pre></td></tr></table></figure><h2 id="short类型返回值"><a href="#short类型返回值" class="headerlink" title="short类型返回值"></a>short类型返回值</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdafx.h&quot;</span></span><br><span class="hljs-type">short</span> <span class="hljs-title function_">Function</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">12</span>;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>* argv[])</span><br>&#123;<br>Function();<br>&#125;<br></code></pre></td></tr></table></figure><p>反汇编：**(AX)**</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs assembly">9:        return 12;<br>0040D4A8 66 B8 0C 00          mov         ax,offset Function+1Ah (0040d4aa)<br>;存在AX中<br></code></pre></td></tr></table></figure><h2 id="int类型返回值"><a href="#int类型返回值" class="headerlink" title="int类型返回值"></a>int类型返回值</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdafx.h&quot;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">Function</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">12</span>;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>* argv[])</span><br>&#123;<br>Function();<br>&#125;<br></code></pre></td></tr></table></figure><p>反汇编：**(EAX)**</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs assembly">9:        return 12;<br>0040D4A8 B8 0C 00 00 00       mov         eax,0Ch<br>;存在EAX中<br></code></pre></td></tr></table></figure><h2 id="思考："><a href="#思考：" class="headerlink" title="思考："></a>思考：</h2><h3 id="返回值超过32位时，存在哪里？"><a href="#返回值超过32位时，存在哪里？" class="headerlink" title="返回值超过32位时，存在哪里？"></a>返回值超过32位时，存在哪里？</h3><p><strong>long long类型在VC6中对应的是__int64</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdafx.h&quot;</span></span><br><br>__int64 <span class="hljs-title function_">Function</span><span class="hljs-params">()</span><br>&#123;<br>__int64 x = <span class="hljs-number">0x1234567890</span>;<br><span class="hljs-keyword">return</span> x;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>* argv[])</span><br>&#123;<br>Function();<br>&#125;<br></code></pre></td></tr></table></figure><p>反汇编（<strong>EAX、EDX</strong>）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs assembly">8:        __int64 x = 0x1234567890;<br>0040D4A8 C7 45 F8 90 78 56 34 mov         dword ptr [ebp-8],34567890h<br>0040D4AF C7 45 FC 12 00 00 00 mov         dword ptr [ebp-4],12h<br>;低位存在EDX,高位存在EAX<br>9:        return x;<br>0040D4B6 8B 45 F8             mov         eax,dword ptr [ebp-8]<br>0040D4B9 8B 55 FC             mov         edx,dword ptr [ebp-4]<br></code></pre></td></tr></table></figure><h1 id="参数传递的本质"><a href="#参数传递的本质" class="headerlink" title="参数传递的本质"></a>参数传递的本质</h1><h2 id="1、8位参数传递"><a href="#1、8位参数传递" class="headerlink" title="1、8位参数传递"></a>1、8位参数传递</h2><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">void <span class="hljs-constructor">Function(<span class="hljs-params">char</span> <span class="hljs-params">x</span>,<span class="hljs-params">char</span> <span class="hljs-params">y</span>,<span class="hljs-params">char</span> <span class="hljs-params">z</span>)</span><br>&#123;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>反汇编</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">20</span>:       Function1(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>);<br><span class="hljs-attribute">004010D8</span> <span class="hljs-number">6</span>A <span class="hljs-number">03</span>                push        <span class="hljs-number">3</span><br><span class="hljs-attribute">004010DA</span> <span class="hljs-number">6</span>A <span class="hljs-number">02</span>                push        <span class="hljs-number">2</span><br><span class="hljs-attribute">004010DC</span> <span class="hljs-number">6</span>A <span class="hljs-number">01</span>                push        <span class="hljs-number">1</span><br><br></code></pre></td></tr></table></figure><p><img src="/../images/image-20231009110559898.png" alt="image-20231009110559898"></p><p>每次ESP减4，说明给每个char参数分4字节</p><h2 id="2、16位参数传递"><a href="#2、16位参数传递" class="headerlink" title="2、16位参数传递"></a>2、16位参数传递</h2><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-number">2</span>、<span class="hljs-number">16</span>位参数传递<br>void <span class="hljs-constructor">Function(<span class="hljs-params">short</span> <span class="hljs-params">x</span>,<span class="hljs-params">short</span> <span class="hljs-params">y</span>,<span class="hljs-params">short</span> <span class="hljs-params">z</span>)</span><br>&#123;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>反汇编</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">21</span>:       Function2(<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>);<br><span class="hljs-attribute">004010E6</span> <span class="hljs-number">6</span>A <span class="hljs-number">06</span>                push        <span class="hljs-number">6</span><br><span class="hljs-attribute">004010E8</span> <span class="hljs-number">6</span>A <span class="hljs-number">05</span>                push        <span class="hljs-number">5</span><br><span class="hljs-attribute">004010EA</span> <span class="hljs-number">6</span>A <span class="hljs-number">04</span>                push        <span class="hljs-number">4</span><br><br></code></pre></td></tr></table></figure><p><img src="/../images/image-20231009125202838.png" alt="image-20231009125202838"></p><p>每次ESP减4，说明给每个short参数分4字节</p><h2 id="3、32位参数传递"><a href="#3、32位参数传递" class="headerlink" title="3、32位参数传递"></a>3、32位参数传递</h2><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">void <span class="hljs-constructor">Function(<span class="hljs-params">int</span> <span class="hljs-params">x</span>,<span class="hljs-params">int</span> <span class="hljs-params">y</span>,<span class="hljs-params">int</span> <span class="hljs-params">z</span>)</span><br>&#123;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>反汇编</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">004010F4</span> <span class="hljs-number">6</span>A <span class="hljs-number">09</span>                push        <span class="hljs-number">9</span><br><span class="hljs-attribute">004010F6</span> <span class="hljs-number">6</span>A <span class="hljs-number">08</span>                push        <span class="hljs-number">8</span><br><span class="hljs-attribute">004010F8</span> <span class="hljs-number">6</span>A <span class="hljs-number">07</span>                push        <span class="hljs-number">7</span><br><br></code></pre></td></tr></table></figure><p><img src="/../images/image-20231009125320248.png" alt="image-20231009125320248"></p><p>每次ESP减4，说明给每个int参数分4字节</p><h2 id="思考如下程序输出结果"><a href="#思考如下程序输出结果" class="headerlink" title="思考如下程序输出结果"></a>思考如下程序输出结果</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//函数定义：</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Plus</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>x = x + <span class="hljs-number">1</span>;<br><br>&#125;<br><span class="hljs-comment">//入口函数</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>* argv[])</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> x = <span class="hljs-number">1</span>;<br>    <span class="hljs-built_in">Plus</span>(x);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,x);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>反汇编</strong></p><pre><code class="hljs">14:       int x = 1;00401068 C7 45 FC 01 00 00 00 mov         dword ptr [ebp-4],115:       Plus(x);0040106F 8B 45 FC             mov         eax,dword ptr [ebp-4]00401072 50                   push        eax00401073 E8 B5 FF FF FF       call        @ILT+40(Function) (0040102d)</code></pre><p>查看反汇编，plus(x)只是使用的[ebp-4]的值，将其传到eax,再将eax压栈，不会修改[ebp-4]的值</p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>参数传递的本质：将上层函数的变量，或者表达式的值“复制一份”，传递给下层函数.</p><h1 id="局部变量的内存分配"><a href="#局部变量的内存分配" class="headerlink" title="局部变量的内存分配"></a>局部变量的内存分配</h1><p><strong>VC6.0默认为没有参数和局部变量的函数分配0x40空间</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">Function</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-type">char</span> a = <span class="hljs-number">1</span>;<br><span class="hljs-type">char</span> b = <span class="hljs-number">2</span>;<br>  <span class="hljs-comment">//0040D523 83 EC 48             sub         esp,48h</span><br>  <span class="hljs-comment">//48h-40h = 8 = 4*2  </span><br><span class="hljs-type">short</span> c = <span class="hljs-number">3</span>;<br><span class="hljs-type">short</span> d = <span class="hljs-number">4</span>;<br> <span class="hljs-comment">//0040D523 83 EC 48             sub         esp,48h</span><br> <span class="hljs-comment">//48h-40h = 8 = 4*2  </span><br>&#125;<br><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">Function</span><span class="hljs-params">(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> y)</span><br>&#123;<br><span class="hljs-type">char</span> a = x;<br>  <span class="hljs-comment">//0040D538 8A 45 08             mov         al,byte ptr [ebp+8]</span><br>  <span class="hljs-comment">//0040D53B 88 45 FC             mov         byte ptr [ebp-4],al</span><br><span class="hljs-type">char</span> b = y;<br>  <span class="hljs-comment">//0040D53E 8A 4D 0C             mov         cl,byte ptr [ebp+0Ch]</span><br>  <span class="hljs-comment">//0040D541 88 4D F8             mov         byte ptr [ebp-8],cl</span><br>x = <span class="hljs-number">3</span>;<br>y = <span class="hljs-number">4</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><p>1、小于32位的局部变量，空间在分配时，按32位分配.</p><p>2、使用时按实际的宽度使用.</p><p>3、不要定义char&#x2F;short类型的局部变量.</p><p>4、参数与局部变量没有本质区别，都是局部变量，都在栈中分配.</p><p>5、完全可以把参数当初局部变量使用</p><h1 id="赋值语句的本质"><a href="#赋值语句的本质" class="headerlink" title="赋值语句的本质"></a>赋值语句的本质</h1><p>​<strong>将某个值存储到变量中的过程就是赋值</strong>.</p><h1 id="数组的本质"><a href="#数组的本质" class="headerlink" title="数组的本质"></a>数组的本质</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs c">示例<span class="hljs-number">1</span>：定义<span class="hljs-number">10</span>个变量，观察反汇编<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">Function</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">int</span> v_0 = <span class="hljs-number">1</span>;<br><span class="hljs-comment">//0040D538 C7 45 FC 01 00 00 00 mov         dword ptr [ebp-4],1</span><br><span class="hljs-type">int</span> v_1 = <span class="hljs-number">2</span>;<br><span class="hljs-comment">//0040D53F C7 45 F8 02 00 00 00 mov         dword ptr [ebp-8],2</span><br><span class="hljs-type">int</span> v_2 = <span class="hljs-number">3</span>;<br><span class="hljs-comment">//0040D546 C7 45 F4 03 00 00 00 mov         dword ptr [ebp-0Ch],3</span><br> <span class="hljs-type">int</span> v_3 = <span class="hljs-number">4</span>;<br><span class="hljs-comment">//0040D54D C7 45 F0 04 00 00 00 mov         dword ptr [ebp-10h],4</span><br><span class="hljs-type">int</span> v_4 = <span class="hljs-number">5</span>;<br><span class="hljs-comment">//0040D554 C7 45 EC 05 00 00 00 mov         dword ptr [ebp-14h],5</span><br><span class="hljs-type">int</span> v_5 = <span class="hljs-number">6</span>;<br><span class="hljs-comment">//0040D55B C7 45 E8 06 00 00 00 mov         dword ptr [ebp-18h],6</span><br><span class="hljs-type">int</span> v_6 = <span class="hljs-number">7</span>;<br><span class="hljs-comment">//0040D562 C7 45 E4 07 00 00 00 mov         dword ptr [ebp-1Ch],7</span><br><span class="hljs-type">int</span> v_7 = <span class="hljs-number">8</span>;<br><span class="hljs-comment">//0040D569 C7 45 E0 08 00 00 00 mov         dword ptr [ebp-20h],8</span><br><span class="hljs-type">int</span> v_8 = <span class="hljs-number">9</span>;<br><span class="hljs-comment">//0040D570 C7 45 DC 09 00 00 00 mov         dword ptr [ebp-24h],9</span><br><span class="hljs-type">int</span> v_9 = <span class="hljs-number">10</span>;<br><span class="hljs-comment">//0040D577 C7 45 D8 0A 00 00 00 mov         dword ptr [ebp-28h],0Ah</span><br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">Function</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-type">int</span> arr[<span class="hljs-number">10</span>] = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">10</span>&#125;;<br>  <span class="hljs-comment">/*</span><br><span class="hljs-comment">  0040D538 C7 45 D8 01 00 00 00 mov         dword ptr [ebp-28h],1</span><br><span class="hljs-comment">    0040D53F C7 45 DC 02 00 00 00 mov         dword ptr [ebp-24h],2</span><br><span class="hljs-comment">    0040D546 C7 45 E0 03 00 00 00 mov         dword ptr [ebp-20h],3</span><br><span class="hljs-comment">    0040D54D C7 45 E4 04 00 00 00 mov         dword ptr [ebp-1Ch],4</span><br><span class="hljs-comment">    0040D554 C7 45 E8 05 00 00 00 mov         dword ptr [ebp-18h],5</span><br><span class="hljs-comment">    0040D55B C7 45 EC 06 00 00 00 mov         dword ptr [ebp-14h],6</span><br><span class="hljs-comment">    0040D562 C7 45 F0 07 00 00 00 mov         dword ptr [ebp-10h],7</span><br><span class="hljs-comment">    0040D569 C7 45 F4 08 00 00 00 mov         dword ptr [ebp-0Ch],8</span><br><span class="hljs-comment">    0040D570 C7 45 F8 09 00 00 00 mov         dword ptr [ebp-8],9</span><br><span class="hljs-comment">    0040D577 C7 45 FC 0A 00 00 00 mov         dword ptr [ebp-4],0Ah</span><br><span class="hljs-comment">  */</span>  <br>&#125;<br><span class="hljs-comment">//上面两种写法反汇编是一样的</span><br>示例<span class="hljs-number">2</span>：<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">Function</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-type">int</span> x = <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> arr[x] = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">10</span>&#125;;<br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">error C2057: expected constant expression</span><br><span class="hljs-comment">error C2466: cannot allocate an array of constant size 0</span><br><span class="hljs-comment">数组在声明的时候，必须用常量来指明长度，不能使用变量</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdafx.h&quot;</span></span><br><span class="hljs-type">void</span> <span class="hljs-title function_">Function</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-type">int</span> x = <span class="hljs-number">1</span>;<br><span class="hljs-type">int</span> y = <span class="hljs-number">2</span>;<br>  <span class="hljs-comment">/*</span><br><span class="hljs-comment">  0040D778 C7 45 FC 01 00 00 00 mov         dword ptr [ebp-4],1</span><br><span class="hljs-comment">0040D77F C7 45 F8 02 00 00 00 mov         dword ptr [ebp-8],2</span><br><span class="hljs-comment">  */</span><br><span class="hljs-type">int</span> r;<br><span class="hljs-type">int</span> arr[<span class="hljs-number">10</span>] = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">10</span>&#125;;<br>  <span class="hljs-comment">/*</span><br><span class="hljs-comment">  0040D786 C7 45 CC 01 00 00 00 mov         dword ptr [ebp-34h],1</span><br><span class="hljs-comment">0040D78D C7 45 D0 02 00 00 00 mov         dword ptr [ebp-30h],2</span><br><span class="hljs-comment">    0040D794 C7 45 D4 03 00 00 00 mov         dword ptr [ebp-2Ch],3</span><br><span class="hljs-comment">    0040D79B C7 45 D8 04 00 00 00 mov         dword ptr [ebp-28h],4</span><br><span class="hljs-comment">    0040D7A2 C7 45 DC 05 00 00 00 mov         dword ptr [ebp-24h],5</span><br><span class="hljs-comment">    0040D7A9 C7 45 E0 06 00 00 00 mov         dword ptr [ebp-20h],6</span><br><span class="hljs-comment">    0040D7B0 C7 45 E4 07 00 00 00 mov         dword ptr [ebp-1Ch],7</span><br><span class="hljs-comment">    0040D7B7 C7 45 E8 08 00 00 00 mov         dword ptr [ebp-18h],8</span><br><span class="hljs-comment">    0040D7BE C7 45 EC 09 00 00 00 mov         dword ptr [ebp-14h],9</span><br><span class="hljs-comment">    0040D7C5 C7 45 F0 0A 00 00 00 mov         dword ptr [ebp-10h],0Ah</span><br><span class="hljs-comment">  */</span><br>r = arr[<span class="hljs-number">1</span>];<br>  <span class="hljs-comment">/*</span><br><span class="hljs-comment">  0040D7CC 8B 45 D0             mov         eax,dword ptr [ebp-30h]</span><br><span class="hljs-comment">0040D7CF 89 45 F4             mov         dword ptr [ebp-0Ch],eax</span><br><span class="hljs-comment">  */</span>  <br>r = arr[x];<br>  <span class="hljs-comment">/*</span><br><span class="hljs-comment">  0040D7D2 8B 4D FC             mov         ecx,dword ptr [ebp-4]</span><br><span class="hljs-comment">    0040D7D5 8B 54 8D CC          mov         edx,dword ptr [ebp+ecx*4-34h]</span><br><span class="hljs-comment">    0040D7D9 89 55 F4             mov         dword ptr [ebp-0Ch],edx</span><br><span class="hljs-comment">  */</span>  <br>r = arr[x+y];<br>  <span class="hljs-comment">/*</span><br><span class="hljs-comment">  0040D7DC 8B 45 FC             mov         eax,dword ptr [ebp-4]</span><br><span class="hljs-comment">    0040D7DF 03 45 F8             add         eax,dword ptr [ebp-8]</span><br><span class="hljs-comment">    0040D7E2 8B 4C 85 CC          mov         ecx,dword ptr [ebp+eax*4-34h]</span><br><span class="hljs-comment">    0040D7E6 89 4D F4             mov         dword ptr [ebp-0Ch],ecx</span><br><span class="hljs-comment">  */</span><br>r = arr[x*<span class="hljs-number">2</span>+y];<br>  <span class="hljs-comment">/*</span><br><span class="hljs-comment">  0040D7E9 8B 55 FC             mov         edx,dword ptr [ebp-4]</span><br><span class="hljs-comment">    0040D7EC 8B 45 F8             mov         eax,dword ptr [ebp-8]</span><br><span class="hljs-comment">    0040D7EF 8D 0C 50             lea         ecx,[eax+edx*2]</span><br><span class="hljs-comment">    0040D7F2 8B 54 8D CC          mov         edx,dword ptr [ebp+ecx*4-34h]</span><br><span class="hljs-comment">    0040D7F6 89 55 F4             mov         dword ptr [ebp-0Ch],edx</span><br><span class="hljs-comment">  */</span>  <br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>* argv[])</span><br>&#123;<br>Function();<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">数组在内存中的寻址方式：</span><br><span class="hljs-comment">[ebp+ecx*4-34h]：可以理解为ebp-34h+eax*4</span><br><span class="hljs-comment">-34h是因为局部变量宽度为13*4=34h</span><br><span class="hljs-comment">+eax*4是因为定义数组为int型，int型宽度为4，即若定义数组为short型，就是+eax*2</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><p>总结</p><p><strong>1、一组相同类型的变量，为了方便读写，采用另外一种表示形式.</strong></p><hr><p><strong>2、数组在声明的时候，必须用常量来指明长度，不能使用变量.</strong></p><h1 id="数组的使用"><a href="#数组的使用" class="headerlink" title="数组的使用"></a>数组的使用</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c">示例：<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">Function</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-type">int</span> arr[<span class="hljs-number">10</span>] = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">10</span>&#125;;<br><br><span class="hljs-type">int</span> x = <span class="hljs-number">1</span>;<br><span class="hljs-type">int</span> y = <span class="hljs-number">2</span>;<br><span class="hljs-type">int</span> r ;<br><br>r = arr[<span class="hljs-number">1</span>];<br>r = arr[x];<span class="hljs-comment">//可以吗？可以</span><br>r = arr[x+y];<span class="hljs-comment">//可以吗？可以</span><br>r = arr[x*<span class="hljs-number">2</span>+y];<span class="hljs-comment">//可以吗？可以</span><br>r = arr[arr[<span class="hljs-number">1</span>]+arr[<span class="hljs-number">2</span>]];<span class="hljs-comment">//可以吗可以</span><br>r = arr[Add(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>)];<span class="hljs-comment">//可以吗？可以</span><br><span class="hljs-type">int</span> a5 = arr[<span class="hljs-number">100</span>];<span class="hljs-comment">//可以吗？可以，但是越界了</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h2><p><strong>1、数组在使用时，可以通过变量来定位数据.</strong></p><hr><p>2、数组定位时，可以超过数组的长度，编译不会有错，但读取的数据是错的.**</p>]]></content>
    
    
    
    <tags>
      
      <tag>C语言</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>标志寄存器</title>
    <link href="/2023/09/25/%E6%A0%87%E5%BF%97%E5%AF%84%E5%AD%98%E5%99%A8/"/>
    <url>/2023/09/25/%E6%A0%87%E5%BF%97%E5%AF%84%E5%AD%98%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="EFLAGS寄存器"><a href="#EFLAGS寄存器" class="headerlink" title="EFLAGS寄存器"></a>EFLAGS寄存器</h2><p><img src="/../images/image-20230926161935873.png" alt="image-20230926161935873"></p><h3 id="标志寄存器"><a href="#标志寄存器" class="headerlink" title="标志寄存器"></a>标志寄存器</h3><p>1、进位标志CF(Carry Flag):如果运算结果的最高位产生了一个进位或借位，那么，其值为1，否则其值为0。</p><p>2、奇偶标志PF(Parity Flag)：奇偶标志PF用于反映运算结果中“1”的个数的奇偶性。如果“1”的个数为偶数，则PF的值为1，否则其值为0。</p><p>3、辅助进位标志AF(Auxiliary Carry Flag)：</p><p>在发生下列情况时，辅助进位标志AF的值被置为1，否则其值为0：</p><p>(1)、在字操作时，发生低字节向高字节进位或借位时；</p><p>(2)、在字节操作时，发生低4位向高4位进位或借位时。</p><p>4、零标志ZF(Zero Flag)：零标志ZF用来反映运算结果是否为0。</p><p>如果运算结果为0，则其值为1，否则其值为0。在判断运算结果是否为0时，可使用此标志位。</p><p>5、符号标志SF(Sign Flag)：符号标志SF用来反映运算结果的符号位，它与运算结果的最高位相同。</p><p>6、溢出标志OF(Overflow Flag)：溢出标志OF用于反映有符号数加减运算所得结果是否溢出。</p><p>如果运算结果超过当前运算位数所能表示的范围，则称为溢出，OF的值被置为1，否则，OF的值被清为0。</p><p>注：最高位进位与溢出的区别：</p><p>​进位标志表示无符号数运算结果是否超出范围.</p><p>​溢出标志表示有符号数运算结果是否超出范围.</p><p>​溢出主要是给有符号运算使用的，在有符号的运算中，有如下的规律：</p><p>​正 + 正 &#x3D; 正 如果结果是负数，则说明有溢出</p><p>​负 + 负 &#x3D; 负 如果结果是正数，则说明有溢出</p><p>​正 + 负 永远都不会有溢出.</p><p><img src="/../images/image-20230926162007713.png" alt="image-20230926162007713"></p><h2 id="其他指令"><a href="#其他指令" class="headerlink" title="其他指令"></a>其他指令</h2><h3 id="ADC指令：带进位加法"><a href="#ADC指令：带进位加法" class="headerlink" title="ADC指令：带进位加法"></a>ADC指令：带进位加法</h3><p>​格式：ADC  R&#x2F;M,R&#x2F;M&#x2F;IMM   两边不能同时为内存  宽度要一样</p><h3 id="SBB指令：带借位减法"><a href="#SBB指令：带借位减法" class="headerlink" title="SBB指令：带借位减法"></a>SBB指令：带借位减法</h3><p>​格式：SBB  R&#x2F;M,R&#x2F;M   两边不能同时为内存  宽度要一样</p><h3 id="XCHG指令：交换数据"><a href="#XCHG指令：交换数据" class="headerlink" title="XCHG指令：交换数据"></a>XCHG指令：交换数据</h3><p>​格式：XCHG  R&#x2F;M,R&#x2F;M&#x2F;IMM   两边不能同时为内存  宽度要一样</p><h3 id="MOVS指令：移动数据-内存-内存"><a href="#MOVS指令：移动数据-内存-内存" class="headerlink" title="MOVS指令：移动数据  内存-内存"></a>MOVS指令：移动数据  内存-内存</h3><p>​BYTE&#x2F;WORD&#x2F;DWORD</p><p>​MOVS BYTE PTR ES:[EDI],BYTE PTR DS:[ESI]简写为：MOVSB</p><p>​MOVS WORD PTR ES:[EDI],BYTE PTR DS:[ESI]简写为：MOVSW</p><p>​MOVS DWORD PTR ES:[EDI],BYTE PTR DS:[ESI]简写为：MOVSD</p><h3 id="STOS指令：将AL-AX-EAX的值存储到-EDI-指定的内存单元"><a href="#STOS指令：将AL-AX-EAX的值存储到-EDI-指定的内存单元" class="headerlink" title="STOS指令：将AL&#x2F;AX&#x2F;EAX的值存储到[EDI]指定的内存单元"></a>STOS指令：将AL&#x2F;AX&#x2F;EAX的值存储到[EDI]指定的内存单元</h3><p>​STOS BYTE PTR ES:[EDI]简写为STOSB</p><p>​STOS WORD PTR ES:[EDI]简写为STOSW</p><p>​STOS DWORD PTR ES:[EDI]简写为STOSD</p><h3 id="REP指令：按计数寄存器-ECX-中指定的次数重复执行字符串指令"><a href="#REP指令：按计数寄存器-ECX-中指定的次数重复执行字符串指令" class="headerlink" title="REP指令：按计数寄存器 (ECX) 中指定的次数重复执行字符串指令"></a>REP指令：按计数寄存器 (ECX) 中指定的次数重复执行字符串指令</h3><h1 id="JCC"><a href="#JCC" class="headerlink" title="JCC"></a>JCC</h1><p>J：jump </p><p>E：equal</p><p>Z：zero</p><p>N：not</p><p>O：overflow</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-number">1</span>、JE, JZ       结果为零则跳转(相等时跳转)ZF=<span class="hljs-number">1</span><br><br><span class="hljs-number">2</span>、JNE, JNZ        结果不为零则跳转(不相等时跳转)  ZF=<span class="hljs-number">0</span><br><br><span class="hljs-number">3</span>、JS 结果为负则跳转SF=<span class="hljs-number">1</span><br><br><span class="hljs-number">4</span>、JNS 结果为非负则跳转SF=<span class="hljs-number">0</span><br><br><span class="hljs-number">5</span>、JP, JPE   结果中<span class="hljs-number">1</span>的个数为偶数则跳转PF=<span class="hljs-number">1</span><br><br><span class="hljs-number">6</span>、JNP, JPO   结果中<span class="hljs-number">1</span>的个数为偶数则跳转PF=<span class="hljs-number">0</span><br><br><span class="hljs-number">7</span>、JO    结果溢出了则跳转OF=<span class="hljs-number">1</span><br><br><span class="hljs-number">8</span>、JNO    结果没有溢出则跳转OF=<span class="hljs-number">0</span><br><br><span class="hljs-number">9</span>、JB, JNAE   小于则跳转 (无符号数)CF=<span class="hljs-number">1</span><br><br><span class="hljs-number">10</span>、JNB, JAE    大于等于则跳转 (无符号数)CF=<span class="hljs-number">0</span><br><br><span class="hljs-number">11</span>、JBE, JNA    小于等于则跳转 (无符号数)CF=<span class="hljs-number">1</span> or ZF=<span class="hljs-number">1</span><br><br><span class="hljs-number">12</span>、JNBE, JA    大于则跳转(无符号数)CF=<span class="hljs-number">0</span> and ZF=<span class="hljs-number">0</span><br><br><span class="hljs-number">13</span>、JL, JNGE    小于则跳转 (有符号数)SF≠ OF<br><br><span class="hljs-number">14</span>、JNL, JGE    大于等于则跳转 (有符号数)SF=OF<br><br><span class="hljs-number">15</span>、JLE, JNG    小于等于则跳转 (有符号数)ZF=<span class="hljs-number">1</span> or SF≠ OF<br><br><span class="hljs-number">16</span>、JNLE, JG    大于则跳转(有符号数)ZF=<span class="hljs-number">0</span> and SF=OF<br><br>有符号无符号的区别：<br><br>CMP AL,CL<br>JG <span class="hljs-number">0x12345678</span><br>JA <span class="hljs-number">0x12345678</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>EFLAGS</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
